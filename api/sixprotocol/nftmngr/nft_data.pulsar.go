// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package nftmngr

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_NftData_8_list)(nil)

type _NftData_8_list struct {
	list *[]*NftAttributeValue
}

func (x *_NftData_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_NftData_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_NftData_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*NftAttributeValue)
	(*x.list)[i] = concreteValue
}

func (x *_NftData_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*NftAttributeValue)
	*x.list = append(*x.list, concreteValue)
}

func (x *_NftData_8_list) AppendMutable() protoreflect.Value {
	v := new(NftAttributeValue)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_NftData_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_NftData_8_list) NewElement() protoreflect.Value {
	v := new(NftAttributeValue)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_NftData_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_NftData_9_list)(nil)

type _NftData_9_list struct {
	list *[]*NftAttributeValue
}

func (x *_NftData_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_NftData_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_NftData_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*NftAttributeValue)
	(*x.list)[i] = concreteValue
}

func (x *_NftData_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*NftAttributeValue)
	*x.list = append(*x.list, concreteValue)
}

func (x *_NftData_9_list) AppendMutable() protoreflect.Value {
	v := new(NftAttributeValue)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_NftData_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_NftData_9_list) NewElement() protoreflect.Value {
	v := new(NftAttributeValue)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_NftData_9_list) IsValid() bool {
	return x.list != nil
}

var (
	md_NftData                    protoreflect.MessageDescriptor
	fd_NftData_nft_schema_code    protoreflect.FieldDescriptor
	fd_NftData_token_id           protoreflect.FieldDescriptor
	fd_NftData_token_owner        protoreflect.FieldDescriptor
	fd_NftData_owner_address_type protoreflect.FieldDescriptor
	fd_NftData_origin_image       protoreflect.FieldDescriptor
	fd_NftData_onchain_image      protoreflect.FieldDescriptor
	fd_NftData_token_uri          protoreflect.FieldDescriptor
	fd_NftData_origin_attributes  protoreflect.FieldDescriptor
	fd_NftData_onchain_attributes protoreflect.FieldDescriptor
)

func init() {
	file_sixprotocol_nftmngr_nft_data_proto_init()
	md_NftData = File_sixprotocol_nftmngr_nft_data_proto.Messages().ByName("NftData")
	fd_NftData_nft_schema_code = md_NftData.Fields().ByName("nft_schema_code")
	fd_NftData_token_id = md_NftData.Fields().ByName("token_id")
	fd_NftData_token_owner = md_NftData.Fields().ByName("token_owner")
	fd_NftData_owner_address_type = md_NftData.Fields().ByName("owner_address_type")
	fd_NftData_origin_image = md_NftData.Fields().ByName("origin_image")
	fd_NftData_onchain_image = md_NftData.Fields().ByName("onchain_image")
	fd_NftData_token_uri = md_NftData.Fields().ByName("token_uri")
	fd_NftData_origin_attributes = md_NftData.Fields().ByName("origin_attributes")
	fd_NftData_onchain_attributes = md_NftData.Fields().ByName("onchain_attributes")
}

var _ protoreflect.Message = (*fastReflection_NftData)(nil)

type fastReflection_NftData NftData

func (x *NftData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_NftData)(x)
}

func (x *NftData) slowProtoReflect() protoreflect.Message {
	mi := &file_sixprotocol_nftmngr_nft_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_NftData_messageType fastReflection_NftData_messageType
var _ protoreflect.MessageType = fastReflection_NftData_messageType{}

type fastReflection_NftData_messageType struct{}

func (x fastReflection_NftData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_NftData)(nil)
}
func (x fastReflection_NftData_messageType) New() protoreflect.Message {
	return new(fastReflection_NftData)
}
func (x fastReflection_NftData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_NftData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_NftData) Descriptor() protoreflect.MessageDescriptor {
	return md_NftData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_NftData) Type() protoreflect.MessageType {
	return _fastReflection_NftData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_NftData) New() protoreflect.Message {
	return new(fastReflection_NftData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_NftData) Interface() protoreflect.ProtoMessage {
	return (*NftData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_NftData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.NftSchemaCode != "" {
		value := protoreflect.ValueOfString(x.NftSchemaCode)
		if !f(fd_NftData_nft_schema_code, value) {
			return
		}
	}
	if x.TokenId != "" {
		value := protoreflect.ValueOfString(x.TokenId)
		if !f(fd_NftData_token_id, value) {
			return
		}
	}
	if x.TokenOwner != "" {
		value := protoreflect.ValueOfString(x.TokenOwner)
		if !f(fd_NftData_token_owner, value) {
			return
		}
	}
	if x.OwnerAddressType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.OwnerAddressType))
		if !f(fd_NftData_owner_address_type, value) {
			return
		}
	}
	if x.OriginImage != "" {
		value := protoreflect.ValueOfString(x.OriginImage)
		if !f(fd_NftData_origin_image, value) {
			return
		}
	}
	if x.OnchainImage != "" {
		value := protoreflect.ValueOfString(x.OnchainImage)
		if !f(fd_NftData_onchain_image, value) {
			return
		}
	}
	if x.TokenUri != "" {
		value := protoreflect.ValueOfString(x.TokenUri)
		if !f(fd_NftData_token_uri, value) {
			return
		}
	}
	if len(x.OriginAttributes) != 0 {
		value := protoreflect.ValueOfList(&_NftData_8_list{list: &x.OriginAttributes})
		if !f(fd_NftData_origin_attributes, value) {
			return
		}
	}
	if len(x.OnchainAttributes) != 0 {
		value := protoreflect.ValueOfList(&_NftData_9_list{list: &x.OnchainAttributes})
		if !f(fd_NftData_onchain_attributes, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_NftData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NftData.nft_schema_code":
		return x.NftSchemaCode != ""
	case "sixprotocol.nftmngr.NftData.token_id":
		return x.TokenId != ""
	case "sixprotocol.nftmngr.NftData.token_owner":
		return x.TokenOwner != ""
	case "sixprotocol.nftmngr.NftData.owner_address_type":
		return x.OwnerAddressType != 0
	case "sixprotocol.nftmngr.NftData.origin_image":
		return x.OriginImage != ""
	case "sixprotocol.nftmngr.NftData.onchain_image":
		return x.OnchainImage != ""
	case "sixprotocol.nftmngr.NftData.token_uri":
		return x.TokenUri != ""
	case "sixprotocol.nftmngr.NftData.origin_attributes":
		return len(x.OriginAttributes) != 0
	case "sixprotocol.nftmngr.NftData.onchain_attributes":
		return len(x.OnchainAttributes) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NftData"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NftData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NftData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NftData.nft_schema_code":
		x.NftSchemaCode = ""
	case "sixprotocol.nftmngr.NftData.token_id":
		x.TokenId = ""
	case "sixprotocol.nftmngr.NftData.token_owner":
		x.TokenOwner = ""
	case "sixprotocol.nftmngr.NftData.owner_address_type":
		x.OwnerAddressType = 0
	case "sixprotocol.nftmngr.NftData.origin_image":
		x.OriginImage = ""
	case "sixprotocol.nftmngr.NftData.onchain_image":
		x.OnchainImage = ""
	case "sixprotocol.nftmngr.NftData.token_uri":
		x.TokenUri = ""
	case "sixprotocol.nftmngr.NftData.origin_attributes":
		x.OriginAttributes = nil
	case "sixprotocol.nftmngr.NftData.onchain_attributes":
		x.OnchainAttributes = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NftData"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NftData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_NftData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sixprotocol.nftmngr.NftData.nft_schema_code":
		value := x.NftSchemaCode
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NftData.token_id":
		value := x.TokenId
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NftData.token_owner":
		value := x.TokenOwner
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NftData.owner_address_type":
		value := x.OwnerAddressType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "sixprotocol.nftmngr.NftData.origin_image":
		value := x.OriginImage
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NftData.onchain_image":
		value := x.OnchainImage
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NftData.token_uri":
		value := x.TokenUri
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NftData.origin_attributes":
		if len(x.OriginAttributes) == 0 {
			return protoreflect.ValueOfList(&_NftData_8_list{})
		}
		listValue := &_NftData_8_list{list: &x.OriginAttributes}
		return protoreflect.ValueOfList(listValue)
	case "sixprotocol.nftmngr.NftData.onchain_attributes":
		if len(x.OnchainAttributes) == 0 {
			return protoreflect.ValueOfList(&_NftData_9_list{})
		}
		listValue := &_NftData_9_list{list: &x.OnchainAttributes}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NftData"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NftData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NftData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NftData.nft_schema_code":
		x.NftSchemaCode = value.Interface().(string)
	case "sixprotocol.nftmngr.NftData.token_id":
		x.TokenId = value.Interface().(string)
	case "sixprotocol.nftmngr.NftData.token_owner":
		x.TokenOwner = value.Interface().(string)
	case "sixprotocol.nftmngr.NftData.owner_address_type":
		x.OwnerAddressType = (OwnerAddressType)(value.Enum())
	case "sixprotocol.nftmngr.NftData.origin_image":
		x.OriginImage = value.Interface().(string)
	case "sixprotocol.nftmngr.NftData.onchain_image":
		x.OnchainImage = value.Interface().(string)
	case "sixprotocol.nftmngr.NftData.token_uri":
		x.TokenUri = value.Interface().(string)
	case "sixprotocol.nftmngr.NftData.origin_attributes":
		lv := value.List()
		clv := lv.(*_NftData_8_list)
		x.OriginAttributes = *clv.list
	case "sixprotocol.nftmngr.NftData.onchain_attributes":
		lv := value.List()
		clv := lv.(*_NftData_9_list)
		x.OnchainAttributes = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NftData"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NftData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NftData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NftData.origin_attributes":
		if x.OriginAttributes == nil {
			x.OriginAttributes = []*NftAttributeValue{}
		}
		value := &_NftData_8_list{list: &x.OriginAttributes}
		return protoreflect.ValueOfList(value)
	case "sixprotocol.nftmngr.NftData.onchain_attributes":
		if x.OnchainAttributes == nil {
			x.OnchainAttributes = []*NftAttributeValue{}
		}
		value := &_NftData_9_list{list: &x.OnchainAttributes}
		return protoreflect.ValueOfList(value)
	case "sixprotocol.nftmngr.NftData.nft_schema_code":
		panic(fmt.Errorf("field nft_schema_code of message sixprotocol.nftmngr.NftData is not mutable"))
	case "sixprotocol.nftmngr.NftData.token_id":
		panic(fmt.Errorf("field token_id of message sixprotocol.nftmngr.NftData is not mutable"))
	case "sixprotocol.nftmngr.NftData.token_owner":
		panic(fmt.Errorf("field token_owner of message sixprotocol.nftmngr.NftData is not mutable"))
	case "sixprotocol.nftmngr.NftData.owner_address_type":
		panic(fmt.Errorf("field owner_address_type of message sixprotocol.nftmngr.NftData is not mutable"))
	case "sixprotocol.nftmngr.NftData.origin_image":
		panic(fmt.Errorf("field origin_image of message sixprotocol.nftmngr.NftData is not mutable"))
	case "sixprotocol.nftmngr.NftData.onchain_image":
		panic(fmt.Errorf("field onchain_image of message sixprotocol.nftmngr.NftData is not mutable"))
	case "sixprotocol.nftmngr.NftData.token_uri":
		panic(fmt.Errorf("field token_uri of message sixprotocol.nftmngr.NftData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NftData"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NftData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_NftData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NftData.nft_schema_code":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NftData.token_id":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NftData.token_owner":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NftData.owner_address_type":
		return protoreflect.ValueOfEnum(0)
	case "sixprotocol.nftmngr.NftData.origin_image":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NftData.onchain_image":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NftData.token_uri":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NftData.origin_attributes":
		list := []*NftAttributeValue{}
		return protoreflect.ValueOfList(&_NftData_8_list{list: &list})
	case "sixprotocol.nftmngr.NftData.onchain_attributes":
		list := []*NftAttributeValue{}
		return protoreflect.ValueOfList(&_NftData_9_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NftData"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NftData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_NftData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sixprotocol.nftmngr.NftData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_NftData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NftData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_NftData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_NftData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*NftData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.NftSchemaCode)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TokenId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TokenOwner)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.OwnerAddressType != 0 {
			n += 1 + runtime.Sov(uint64(x.OwnerAddressType))
		}
		l = len(x.OriginImage)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.OnchainImage)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TokenUri)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.OriginAttributes) > 0 {
			for _, e := range x.OriginAttributes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.OnchainAttributes) > 0 {
			for _, e := range x.OnchainAttributes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*NftData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.OnchainAttributes) > 0 {
			for iNdEx := len(x.OnchainAttributes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.OnchainAttributes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.OriginAttributes) > 0 {
			for iNdEx := len(x.OriginAttributes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.OriginAttributes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.TokenUri) > 0 {
			i -= len(x.TokenUri)
			copy(dAtA[i:], x.TokenUri)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokenUri)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.OnchainImage) > 0 {
			i -= len(x.OnchainImage)
			copy(dAtA[i:], x.OnchainImage)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OnchainImage)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.OriginImage) > 0 {
			i -= len(x.OriginImage)
			copy(dAtA[i:], x.OriginImage)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OriginImage)))
			i--
			dAtA[i] = 0x2a
		}
		if x.OwnerAddressType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OwnerAddressType))
			i--
			dAtA[i] = 0x20
		}
		if len(x.TokenOwner) > 0 {
			i -= len(x.TokenOwner)
			copy(dAtA[i:], x.TokenOwner)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokenOwner)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.TokenId) > 0 {
			i -= len(x.TokenId)
			copy(dAtA[i:], x.TokenId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokenId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.NftSchemaCode) > 0 {
			i -= len(x.NftSchemaCode)
			copy(dAtA[i:], x.NftSchemaCode)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NftSchemaCode)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*NftData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NftData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NftData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NftSchemaCode = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokenId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenOwner", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokenOwner = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OwnerAddressType", wireType)
				}
				x.OwnerAddressType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OwnerAddressType |= OwnerAddressType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OriginImage", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OriginImage = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OnchainImage", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OnchainImage = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenUri", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokenUri = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OriginAttributes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OriginAttributes = append(x.OriginAttributes, &NftAttributeValue{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OriginAttributes[len(x.OriginAttributes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OnchainAttributes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OnchainAttributes = append(x.OnchainAttributes, &NftAttributeValue{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OnchainAttributes[len(x.OnchainAttributes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sixprotocol/nftmngr/nft_data.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OwnerAddressType int32

const (
	OwnerAddressType_ORIGIN_ADDRESS   OwnerAddressType = 0
	OwnerAddressType_INTERNAL_ADDRESS OwnerAddressType = 1
)

// Enum value maps for OwnerAddressType.
var (
	OwnerAddressType_name = map[int32]string{
		0: "ORIGIN_ADDRESS",
		1: "INTERNAL_ADDRESS",
	}
	OwnerAddressType_value = map[string]int32{
		"ORIGIN_ADDRESS":   0,
		"INTERNAL_ADDRESS": 1,
	}
)

func (x OwnerAddressType) Enum() *OwnerAddressType {
	p := new(OwnerAddressType)
	*p = x
	return p
}

func (x OwnerAddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OwnerAddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_sixprotocol_nftmngr_nft_data_proto_enumTypes[0].Descriptor()
}

func (OwnerAddressType) Type() protoreflect.EnumType {
	return &file_sixprotocol_nftmngr_nft_data_proto_enumTypes[0]
}

func (x OwnerAddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OwnerAddressType.Descriptor instead.
func (OwnerAddressType) EnumDescriptor() ([]byte, []int) {
	return file_sixprotocol_nftmngr_nft_data_proto_rawDescGZIP(), []int{0}
}

type NftData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftSchemaCode     string               `protobuf:"bytes,1,opt,name=nft_schema_code,json=nftSchemaCode,proto3" json:"nft_schema_code,omitempty"`
	TokenId           string               `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenOwner        string               `protobuf:"bytes,3,opt,name=token_owner,json=tokenOwner,proto3" json:"token_owner,omitempty"`
	OwnerAddressType  OwnerAddressType     `protobuf:"varint,4,opt,name=owner_address_type,json=ownerAddressType,proto3,enum=sixprotocol.nftmngr.OwnerAddressType" json:"owner_address_type,omitempty"`
	OriginImage       string               `protobuf:"bytes,5,opt,name=origin_image,json=originImage,proto3" json:"origin_image,omitempty"`
	OnchainImage      string               `protobuf:"bytes,6,opt,name=onchain_image,json=onchainImage,proto3" json:"onchain_image,omitempty"`
	TokenUri          string               `protobuf:"bytes,7,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
	OriginAttributes  []*NftAttributeValue `protobuf:"bytes,8,rep,name=origin_attributes,json=originAttributes,proto3" json:"origin_attributes,omitempty"`
	OnchainAttributes []*NftAttributeValue `protobuf:"bytes,9,rep,name=onchain_attributes,json=onchainAttributes,proto3" json:"onchain_attributes,omitempty"`
}

func (x *NftData) Reset() {
	*x = NftData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sixprotocol_nftmngr_nft_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftData) ProtoMessage() {}

// Deprecated: Use NftData.ProtoReflect.Descriptor instead.
func (*NftData) Descriptor() ([]byte, []int) {
	return file_sixprotocol_nftmngr_nft_data_proto_rawDescGZIP(), []int{0}
}

func (x *NftData) GetNftSchemaCode() string {
	if x != nil {
		return x.NftSchemaCode
	}
	return ""
}

func (x *NftData) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *NftData) GetTokenOwner() string {
	if x != nil {
		return x.TokenOwner
	}
	return ""
}

func (x *NftData) GetOwnerAddressType() OwnerAddressType {
	if x != nil {
		return x.OwnerAddressType
	}
	return OwnerAddressType_ORIGIN_ADDRESS
}

func (x *NftData) GetOriginImage() string {
	if x != nil {
		return x.OriginImage
	}
	return ""
}

func (x *NftData) GetOnchainImage() string {
	if x != nil {
		return x.OnchainImage
	}
	return ""
}

func (x *NftData) GetTokenUri() string {
	if x != nil {
		return x.TokenUri
	}
	return ""
}

func (x *NftData) GetOriginAttributes() []*NftAttributeValue {
	if x != nil {
		return x.OriginAttributes
	}
	return nil
}

func (x *NftData) GetOnchainAttributes() []*NftAttributeValue {
	if x != nil {
		return x.OnchainAttributes
	}
	return nil
}

var File_sixprotocol_nftmngr_nft_data_proto protoreflect.FileDescriptor

var file_sixprotocol_nftmngr_nft_data_proto_rawDesc = []byte{
	0x0a, 0x22, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6e, 0x66,
	0x74, 0x6d, 0x6e, 0x67, 0x72, 0x2f, 0x6e, 0x66, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0x1a, 0x2d, 0x73, 0x69, 0x78, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0x2f, 0x6e,
	0x66, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x03, 0x0a, 0x07, 0x4e, 0x66, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55,
	0x72, 0x69, 0x12, 0x53, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6e, 0x66, 0x74, 0x6d,
	0x6e, 0x67, 0x72, 0x2e, 0x4e, 0x66, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x12, 0x6f, 0x6e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0x2e, 0x4e, 0x66, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6f, 0x6e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2a, 0x3c,
	0x0a, 0x10, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x42, 0xd3, 0x01, 0x0a,
	0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0x42, 0x0c, 0x4e, 0x66, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x78, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x73, 0x69, 0x78, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x6e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0xa2, 0x02, 0x03, 0x53, 0x4e, 0x58, 0xaa, 0x02, 0x13,
	0x53, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x66, 0x74, 0x6d,
	0x6e, 0x67, 0x72, 0xca, 0x02, 0x13, 0x53, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5c, 0x4e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0xe2, 0x02, 0x1f, 0x53, 0x69, 0x78, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5c, 0x4e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x53, 0x69,
	0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x3a, 0x4e, 0x66, 0x74, 0x6d, 0x6e,
	0x67, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sixprotocol_nftmngr_nft_data_proto_rawDescOnce sync.Once
	file_sixprotocol_nftmngr_nft_data_proto_rawDescData = file_sixprotocol_nftmngr_nft_data_proto_rawDesc
)

func file_sixprotocol_nftmngr_nft_data_proto_rawDescGZIP() []byte {
	file_sixprotocol_nftmngr_nft_data_proto_rawDescOnce.Do(func() {
		file_sixprotocol_nftmngr_nft_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_sixprotocol_nftmngr_nft_data_proto_rawDescData)
	})
	return file_sixprotocol_nftmngr_nft_data_proto_rawDescData
}

var file_sixprotocol_nftmngr_nft_data_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sixprotocol_nftmngr_nft_data_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_sixprotocol_nftmngr_nft_data_proto_goTypes = []interface{}{
	(OwnerAddressType)(0),     // 0: sixprotocol.nftmngr.OwnerAddressType
	(*NftData)(nil),           // 1: sixprotocol.nftmngr.NftData
	(*NftAttributeValue)(nil), // 2: sixprotocol.nftmngr.NftAttributeValue
}
var file_sixprotocol_nftmngr_nft_data_proto_depIdxs = []int32{
	0, // 0: sixprotocol.nftmngr.NftData.owner_address_type:type_name -> sixprotocol.nftmngr.OwnerAddressType
	2, // 1: sixprotocol.nftmngr.NftData.origin_attributes:type_name -> sixprotocol.nftmngr.NftAttributeValue
	2, // 2: sixprotocol.nftmngr.NftData.onchain_attributes:type_name -> sixprotocol.nftmngr.NftAttributeValue
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_sixprotocol_nftmngr_nft_data_proto_init() }
func file_sixprotocol_nftmngr_nft_data_proto_init() {
	if File_sixprotocol_nftmngr_nft_data_proto != nil {
		return
	}
	file_sixprotocol_nftmngr_nft_attribute_value_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sixprotocol_nftmngr_nft_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sixprotocol_nftmngr_nft_data_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sixprotocol_nftmngr_nft_data_proto_goTypes,
		DependencyIndexes: file_sixprotocol_nftmngr_nft_data_proto_depIdxs,
		EnumInfos:         file_sixprotocol_nftmngr_nft_data_proto_enumTypes,
		MessageInfos:      file_sixprotocol_nftmngr_nft_data_proto_msgTypes,
	}.Build()
	File_sixprotocol_nftmngr_nft_data_proto = out.File
	file_sixprotocol_nftmngr_nft_data_proto_rawDesc = nil
	file_sixprotocol_nftmngr_nft_data_proto_goTypes = nil
	file_sixprotocol_nftmngr_nft_data_proto_depIdxs = nil
}
