// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package nftmngr

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_NFTSchema                    protoreflect.MessageDescriptor
	fd_NFTSchema_code               protoreflect.FieldDescriptor
	fd_NFTSchema_name               protoreflect.FieldDescriptor
	fd_NFTSchema_owner              protoreflect.FieldDescriptor
	fd_NFTSchema_description        protoreflect.FieldDescriptor
	fd_NFTSchema_origin_data        protoreflect.FieldDescriptor
	fd_NFTSchema_onchain_data       protoreflect.FieldDescriptor
	fd_NFTSchema_isVerified         protoreflect.FieldDescriptor
	fd_NFTSchema_mint_authorization protoreflect.FieldDescriptor
)

func init() {
	file_sixprotocol_nftmngr_nft_schema_proto_init()
	md_NFTSchema = File_sixprotocol_nftmngr_nft_schema_proto.Messages().ByName("NFTSchema")
	fd_NFTSchema_code = md_NFTSchema.Fields().ByName("code")
	fd_NFTSchema_name = md_NFTSchema.Fields().ByName("name")
	fd_NFTSchema_owner = md_NFTSchema.Fields().ByName("owner")
	fd_NFTSchema_description = md_NFTSchema.Fields().ByName("description")
	fd_NFTSchema_origin_data = md_NFTSchema.Fields().ByName("origin_data")
	fd_NFTSchema_onchain_data = md_NFTSchema.Fields().ByName("onchain_data")
	fd_NFTSchema_isVerified = md_NFTSchema.Fields().ByName("isVerified")
	fd_NFTSchema_mint_authorization = md_NFTSchema.Fields().ByName("mint_authorization")
}

var _ protoreflect.Message = (*fastReflection_NFTSchema)(nil)

type fastReflection_NFTSchema NFTSchema

func (x *NFTSchema) ProtoReflect() protoreflect.Message {
	return (*fastReflection_NFTSchema)(x)
}

func (x *NFTSchema) slowProtoReflect() protoreflect.Message {
	mi := &file_sixprotocol_nftmngr_nft_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_NFTSchema_messageType fastReflection_NFTSchema_messageType
var _ protoreflect.MessageType = fastReflection_NFTSchema_messageType{}

type fastReflection_NFTSchema_messageType struct{}

func (x fastReflection_NFTSchema_messageType) Zero() protoreflect.Message {
	return (*fastReflection_NFTSchema)(nil)
}
func (x fastReflection_NFTSchema_messageType) New() protoreflect.Message {
	return new(fastReflection_NFTSchema)
}
func (x fastReflection_NFTSchema_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_NFTSchema
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_NFTSchema) Descriptor() protoreflect.MessageDescriptor {
	return md_NFTSchema
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_NFTSchema) Type() protoreflect.MessageType {
	return _fastReflection_NFTSchema_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_NFTSchema) New() protoreflect.Message {
	return new(fastReflection_NFTSchema)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_NFTSchema) Interface() protoreflect.ProtoMessage {
	return (*NFTSchema)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_NFTSchema) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Code != "" {
		value := protoreflect.ValueOfString(x.Code)
		if !f(fd_NFTSchema_code, value) {
			return
		}
	}
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_NFTSchema_name, value) {
			return
		}
	}
	if x.Owner != "" {
		value := protoreflect.ValueOfString(x.Owner)
		if !f(fd_NFTSchema_owner, value) {
			return
		}
	}
	if x.Description != "" {
		value := protoreflect.ValueOfString(x.Description)
		if !f(fd_NFTSchema_description, value) {
			return
		}
	}
	if x.OriginData != nil {
		value := protoreflect.ValueOfMessage(x.OriginData.ProtoReflect())
		if !f(fd_NFTSchema_origin_data, value) {
			return
		}
	}
	if x.OnchainData != nil {
		value := protoreflect.ValueOfMessage(x.OnchainData.ProtoReflect())
		if !f(fd_NFTSchema_onchain_data, value) {
			return
		}
	}
	if x.IsVerified != false {
		value := protoreflect.ValueOfBool(x.IsVerified)
		if !f(fd_NFTSchema_isVerified, value) {
			return
		}
	}
	if x.MintAuthorization != "" {
		value := protoreflect.ValueOfString(x.MintAuthorization)
		if !f(fd_NFTSchema_mint_authorization, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_NFTSchema) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NFTSchema.code":
		return x.Code != ""
	case "sixprotocol.nftmngr.NFTSchema.name":
		return x.Name != ""
	case "sixprotocol.nftmngr.NFTSchema.owner":
		return x.Owner != ""
	case "sixprotocol.nftmngr.NFTSchema.description":
		return x.Description != ""
	case "sixprotocol.nftmngr.NFTSchema.origin_data":
		return x.OriginData != nil
	case "sixprotocol.nftmngr.NFTSchema.onchain_data":
		return x.OnchainData != nil
	case "sixprotocol.nftmngr.NFTSchema.isVerified":
		return x.IsVerified != false
	case "sixprotocol.nftmngr.NFTSchema.mint_authorization":
		return x.MintAuthorization != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchema"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchema does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NFTSchema) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NFTSchema.code":
		x.Code = ""
	case "sixprotocol.nftmngr.NFTSchema.name":
		x.Name = ""
	case "sixprotocol.nftmngr.NFTSchema.owner":
		x.Owner = ""
	case "sixprotocol.nftmngr.NFTSchema.description":
		x.Description = ""
	case "sixprotocol.nftmngr.NFTSchema.origin_data":
		x.OriginData = nil
	case "sixprotocol.nftmngr.NFTSchema.onchain_data":
		x.OnchainData = nil
	case "sixprotocol.nftmngr.NFTSchema.isVerified":
		x.IsVerified = false
	case "sixprotocol.nftmngr.NFTSchema.mint_authorization":
		x.MintAuthorization = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchema"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchema does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_NFTSchema) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sixprotocol.nftmngr.NFTSchema.code":
		value := x.Code
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NFTSchema.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NFTSchema.owner":
		value := x.Owner
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NFTSchema.description":
		value := x.Description
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NFTSchema.origin_data":
		value := x.OriginData
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchema.onchain_data":
		value := x.OnchainData
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchema.isVerified":
		value := x.IsVerified
		return protoreflect.ValueOfBool(value)
	case "sixprotocol.nftmngr.NFTSchema.mint_authorization":
		value := x.MintAuthorization
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchema"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchema does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NFTSchema) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NFTSchema.code":
		x.Code = value.Interface().(string)
	case "sixprotocol.nftmngr.NFTSchema.name":
		x.Name = value.Interface().(string)
	case "sixprotocol.nftmngr.NFTSchema.owner":
		x.Owner = value.Interface().(string)
	case "sixprotocol.nftmngr.NFTSchema.description":
		x.Description = value.Interface().(string)
	case "sixprotocol.nftmngr.NFTSchema.origin_data":
		x.OriginData = value.Message().Interface().(*OriginData)
	case "sixprotocol.nftmngr.NFTSchema.onchain_data":
		x.OnchainData = value.Message().Interface().(*OnChainData)
	case "sixprotocol.nftmngr.NFTSchema.isVerified":
		x.IsVerified = value.Bool()
	case "sixprotocol.nftmngr.NFTSchema.mint_authorization":
		x.MintAuthorization = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchema"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchema does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NFTSchema) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NFTSchema.origin_data":
		if x.OriginData == nil {
			x.OriginData = new(OriginData)
		}
		return protoreflect.ValueOfMessage(x.OriginData.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchema.onchain_data":
		if x.OnchainData == nil {
			x.OnchainData = new(OnChainData)
		}
		return protoreflect.ValueOfMessage(x.OnchainData.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchema.code":
		panic(fmt.Errorf("field code of message sixprotocol.nftmngr.NFTSchema is not mutable"))
	case "sixprotocol.nftmngr.NFTSchema.name":
		panic(fmt.Errorf("field name of message sixprotocol.nftmngr.NFTSchema is not mutable"))
	case "sixprotocol.nftmngr.NFTSchema.owner":
		panic(fmt.Errorf("field owner of message sixprotocol.nftmngr.NFTSchema is not mutable"))
	case "sixprotocol.nftmngr.NFTSchema.description":
		panic(fmt.Errorf("field description of message sixprotocol.nftmngr.NFTSchema is not mutable"))
	case "sixprotocol.nftmngr.NFTSchema.isVerified":
		panic(fmt.Errorf("field isVerified of message sixprotocol.nftmngr.NFTSchema is not mutable"))
	case "sixprotocol.nftmngr.NFTSchema.mint_authorization":
		panic(fmt.Errorf("field mint_authorization of message sixprotocol.nftmngr.NFTSchema is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchema"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchema does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_NFTSchema) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NFTSchema.code":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NFTSchema.name":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NFTSchema.owner":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NFTSchema.description":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NFTSchema.origin_data":
		m := new(OriginData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchema.onchain_data":
		m := new(OnChainData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchema.isVerified":
		return protoreflect.ValueOfBool(false)
	case "sixprotocol.nftmngr.NFTSchema.mint_authorization":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchema"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchema does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_NFTSchema) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sixprotocol.nftmngr.NFTSchema", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_NFTSchema) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NFTSchema) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_NFTSchema) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_NFTSchema) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*NFTSchema)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Code)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Owner)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Description)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.OriginData != nil {
			l = options.Size(x.OriginData)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.OnchainData != nil {
			l = options.Size(x.OnchainData)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IsVerified {
			n += 2
		}
		l = len(x.MintAuthorization)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*NFTSchema)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.MintAuthorization) > 0 {
			i -= len(x.MintAuthorization)
			copy(dAtA[i:], x.MintAuthorization)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MintAuthorization)))
			i--
			dAtA[i] = 0x42
		}
		if x.IsVerified {
			i--
			if x.IsVerified {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x38
		}
		if x.OnchainData != nil {
			encoded, err := options.Marshal(x.OnchainData)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.OriginData != nil {
			encoded, err := options.Marshal(x.OriginData)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Description) > 0 {
			i -= len(x.Description)
			copy(dAtA[i:], x.Description)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Description)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Owner) > 0 {
			i -= len(x.Owner)
			copy(dAtA[i:], x.Owner)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Owner)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Code) > 0 {
			i -= len(x.Code)
			copy(dAtA[i:], x.Code)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Code)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*NFTSchema)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NFTSchema: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NFTSchema: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Code = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Owner = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Description = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OriginData", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.OriginData == nil {
					x.OriginData = &OriginData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OriginData); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OnchainData", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.OnchainData == nil {
					x.OnchainData = &OnChainData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OnchainData); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsVerified = bool(v != 0)
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MintAuthorization", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MintAuthorization = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_NFTSchemaINPUT_5_list)(nil)

type _NFTSchemaINPUT_5_list struct {
	list *[]string
}

func (x *_NFTSchemaINPUT_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_NFTSchemaINPUT_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_NFTSchemaINPUT_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_NFTSchemaINPUT_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_NFTSchemaINPUT_5_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message NFTSchemaINPUT at list field SystemActioners as it is not of Message kind"))
}

func (x *_NFTSchemaINPUT_5_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_NFTSchemaINPUT_5_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_NFTSchemaINPUT_5_list) IsValid() bool {
	return x.list != nil
}

var (
	md_NFTSchemaINPUT                    protoreflect.MessageDescriptor
	fd_NFTSchemaINPUT_code               protoreflect.FieldDescriptor
	fd_NFTSchemaINPUT_name               protoreflect.FieldDescriptor
	fd_NFTSchemaINPUT_owner              protoreflect.FieldDescriptor
	fd_NFTSchemaINPUT_description        protoreflect.FieldDescriptor
	fd_NFTSchemaINPUT_system_actioners   protoreflect.FieldDescriptor
	fd_NFTSchemaINPUT_origin_data        protoreflect.FieldDescriptor
	fd_NFTSchemaINPUT_onchain_data       protoreflect.FieldDescriptor
	fd_NFTSchemaINPUT_isVerified         protoreflect.FieldDescriptor
	fd_NFTSchemaINPUT_mint_authorization protoreflect.FieldDescriptor
)

func init() {
	file_sixprotocol_nftmngr_nft_schema_proto_init()
	md_NFTSchemaINPUT = File_sixprotocol_nftmngr_nft_schema_proto.Messages().ByName("NFTSchemaINPUT")
	fd_NFTSchemaINPUT_code = md_NFTSchemaINPUT.Fields().ByName("code")
	fd_NFTSchemaINPUT_name = md_NFTSchemaINPUT.Fields().ByName("name")
	fd_NFTSchemaINPUT_owner = md_NFTSchemaINPUT.Fields().ByName("owner")
	fd_NFTSchemaINPUT_description = md_NFTSchemaINPUT.Fields().ByName("description")
	fd_NFTSchemaINPUT_system_actioners = md_NFTSchemaINPUT.Fields().ByName("system_actioners")
	fd_NFTSchemaINPUT_origin_data = md_NFTSchemaINPUT.Fields().ByName("origin_data")
	fd_NFTSchemaINPUT_onchain_data = md_NFTSchemaINPUT.Fields().ByName("onchain_data")
	fd_NFTSchemaINPUT_isVerified = md_NFTSchemaINPUT.Fields().ByName("isVerified")
	fd_NFTSchemaINPUT_mint_authorization = md_NFTSchemaINPUT.Fields().ByName("mint_authorization")
}

var _ protoreflect.Message = (*fastReflection_NFTSchemaINPUT)(nil)

type fastReflection_NFTSchemaINPUT NFTSchemaINPUT

func (x *NFTSchemaINPUT) ProtoReflect() protoreflect.Message {
	return (*fastReflection_NFTSchemaINPUT)(x)
}

func (x *NFTSchemaINPUT) slowProtoReflect() protoreflect.Message {
	mi := &file_sixprotocol_nftmngr_nft_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_NFTSchemaINPUT_messageType fastReflection_NFTSchemaINPUT_messageType
var _ protoreflect.MessageType = fastReflection_NFTSchemaINPUT_messageType{}

type fastReflection_NFTSchemaINPUT_messageType struct{}

func (x fastReflection_NFTSchemaINPUT_messageType) Zero() protoreflect.Message {
	return (*fastReflection_NFTSchemaINPUT)(nil)
}
func (x fastReflection_NFTSchemaINPUT_messageType) New() protoreflect.Message {
	return new(fastReflection_NFTSchemaINPUT)
}
func (x fastReflection_NFTSchemaINPUT_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_NFTSchemaINPUT
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_NFTSchemaINPUT) Descriptor() protoreflect.MessageDescriptor {
	return md_NFTSchemaINPUT
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_NFTSchemaINPUT) Type() protoreflect.MessageType {
	return _fastReflection_NFTSchemaINPUT_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_NFTSchemaINPUT) New() protoreflect.Message {
	return new(fastReflection_NFTSchemaINPUT)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_NFTSchemaINPUT) Interface() protoreflect.ProtoMessage {
	return (*NFTSchemaINPUT)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_NFTSchemaINPUT) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Code != "" {
		value := protoreflect.ValueOfString(x.Code)
		if !f(fd_NFTSchemaINPUT_code, value) {
			return
		}
	}
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_NFTSchemaINPUT_name, value) {
			return
		}
	}
	if x.Owner != "" {
		value := protoreflect.ValueOfString(x.Owner)
		if !f(fd_NFTSchemaINPUT_owner, value) {
			return
		}
	}
	if x.Description != "" {
		value := protoreflect.ValueOfString(x.Description)
		if !f(fd_NFTSchemaINPUT_description, value) {
			return
		}
	}
	if len(x.SystemActioners) != 0 {
		value := protoreflect.ValueOfList(&_NFTSchemaINPUT_5_list{list: &x.SystemActioners})
		if !f(fd_NFTSchemaINPUT_system_actioners, value) {
			return
		}
	}
	if x.OriginData != nil {
		value := protoreflect.ValueOfMessage(x.OriginData.ProtoReflect())
		if !f(fd_NFTSchemaINPUT_origin_data, value) {
			return
		}
	}
	if x.OnchainData != nil {
		value := protoreflect.ValueOfMessage(x.OnchainData.ProtoReflect())
		if !f(fd_NFTSchemaINPUT_onchain_data, value) {
			return
		}
	}
	if x.IsVerified != false {
		value := protoreflect.ValueOfBool(x.IsVerified)
		if !f(fd_NFTSchemaINPUT_isVerified, value) {
			return
		}
	}
	if x.MintAuthorization != "" {
		value := protoreflect.ValueOfString(x.MintAuthorization)
		if !f(fd_NFTSchemaINPUT_mint_authorization, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_NFTSchemaINPUT) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NFTSchemaINPUT.code":
		return x.Code != ""
	case "sixprotocol.nftmngr.NFTSchemaINPUT.name":
		return x.Name != ""
	case "sixprotocol.nftmngr.NFTSchemaINPUT.owner":
		return x.Owner != ""
	case "sixprotocol.nftmngr.NFTSchemaINPUT.description":
		return x.Description != ""
	case "sixprotocol.nftmngr.NFTSchemaINPUT.system_actioners":
		return len(x.SystemActioners) != 0
	case "sixprotocol.nftmngr.NFTSchemaINPUT.origin_data":
		return x.OriginData != nil
	case "sixprotocol.nftmngr.NFTSchemaINPUT.onchain_data":
		return x.OnchainData != nil
	case "sixprotocol.nftmngr.NFTSchemaINPUT.isVerified":
		return x.IsVerified != false
	case "sixprotocol.nftmngr.NFTSchemaINPUT.mint_authorization":
		return x.MintAuthorization != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchemaINPUT"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchemaINPUT does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NFTSchemaINPUT) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NFTSchemaINPUT.code":
		x.Code = ""
	case "sixprotocol.nftmngr.NFTSchemaINPUT.name":
		x.Name = ""
	case "sixprotocol.nftmngr.NFTSchemaINPUT.owner":
		x.Owner = ""
	case "sixprotocol.nftmngr.NFTSchemaINPUT.description":
		x.Description = ""
	case "sixprotocol.nftmngr.NFTSchemaINPUT.system_actioners":
		x.SystemActioners = nil
	case "sixprotocol.nftmngr.NFTSchemaINPUT.origin_data":
		x.OriginData = nil
	case "sixprotocol.nftmngr.NFTSchemaINPUT.onchain_data":
		x.OnchainData = nil
	case "sixprotocol.nftmngr.NFTSchemaINPUT.isVerified":
		x.IsVerified = false
	case "sixprotocol.nftmngr.NFTSchemaINPUT.mint_authorization":
		x.MintAuthorization = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchemaINPUT"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchemaINPUT does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_NFTSchemaINPUT) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sixprotocol.nftmngr.NFTSchemaINPUT.code":
		value := x.Code
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NFTSchemaINPUT.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NFTSchemaINPUT.owner":
		value := x.Owner
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NFTSchemaINPUT.description":
		value := x.Description
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NFTSchemaINPUT.system_actioners":
		if len(x.SystemActioners) == 0 {
			return protoreflect.ValueOfList(&_NFTSchemaINPUT_5_list{})
		}
		listValue := &_NFTSchemaINPUT_5_list{list: &x.SystemActioners}
		return protoreflect.ValueOfList(listValue)
	case "sixprotocol.nftmngr.NFTSchemaINPUT.origin_data":
		value := x.OriginData
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchemaINPUT.onchain_data":
		value := x.OnchainData
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchemaINPUT.isVerified":
		value := x.IsVerified
		return protoreflect.ValueOfBool(value)
	case "sixprotocol.nftmngr.NFTSchemaINPUT.mint_authorization":
		value := x.MintAuthorization
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchemaINPUT"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchemaINPUT does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NFTSchemaINPUT) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NFTSchemaINPUT.code":
		x.Code = value.Interface().(string)
	case "sixprotocol.nftmngr.NFTSchemaINPUT.name":
		x.Name = value.Interface().(string)
	case "sixprotocol.nftmngr.NFTSchemaINPUT.owner":
		x.Owner = value.Interface().(string)
	case "sixprotocol.nftmngr.NFTSchemaINPUT.description":
		x.Description = value.Interface().(string)
	case "sixprotocol.nftmngr.NFTSchemaINPUT.system_actioners":
		lv := value.List()
		clv := lv.(*_NFTSchemaINPUT_5_list)
		x.SystemActioners = *clv.list
	case "sixprotocol.nftmngr.NFTSchemaINPUT.origin_data":
		x.OriginData = value.Message().Interface().(*OriginData)
	case "sixprotocol.nftmngr.NFTSchemaINPUT.onchain_data":
		x.OnchainData = value.Message().Interface().(*OnChainData)
	case "sixprotocol.nftmngr.NFTSchemaINPUT.isVerified":
		x.IsVerified = value.Bool()
	case "sixprotocol.nftmngr.NFTSchemaINPUT.mint_authorization":
		x.MintAuthorization = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchemaINPUT"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchemaINPUT does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NFTSchemaINPUT) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NFTSchemaINPUT.system_actioners":
		if x.SystemActioners == nil {
			x.SystemActioners = []string{}
		}
		value := &_NFTSchemaINPUT_5_list{list: &x.SystemActioners}
		return protoreflect.ValueOfList(value)
	case "sixprotocol.nftmngr.NFTSchemaINPUT.origin_data":
		if x.OriginData == nil {
			x.OriginData = new(OriginData)
		}
		return protoreflect.ValueOfMessage(x.OriginData.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchemaINPUT.onchain_data":
		if x.OnchainData == nil {
			x.OnchainData = new(OnChainData)
		}
		return protoreflect.ValueOfMessage(x.OnchainData.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchemaINPUT.code":
		panic(fmt.Errorf("field code of message sixprotocol.nftmngr.NFTSchemaINPUT is not mutable"))
	case "sixprotocol.nftmngr.NFTSchemaINPUT.name":
		panic(fmt.Errorf("field name of message sixprotocol.nftmngr.NFTSchemaINPUT is not mutable"))
	case "sixprotocol.nftmngr.NFTSchemaINPUT.owner":
		panic(fmt.Errorf("field owner of message sixprotocol.nftmngr.NFTSchemaINPUT is not mutable"))
	case "sixprotocol.nftmngr.NFTSchemaINPUT.description":
		panic(fmt.Errorf("field description of message sixprotocol.nftmngr.NFTSchemaINPUT is not mutable"))
	case "sixprotocol.nftmngr.NFTSchemaINPUT.isVerified":
		panic(fmt.Errorf("field isVerified of message sixprotocol.nftmngr.NFTSchemaINPUT is not mutable"))
	case "sixprotocol.nftmngr.NFTSchemaINPUT.mint_authorization":
		panic(fmt.Errorf("field mint_authorization of message sixprotocol.nftmngr.NFTSchemaINPUT is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchemaINPUT"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchemaINPUT does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_NFTSchemaINPUT) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NFTSchemaINPUT.code":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NFTSchemaINPUT.name":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NFTSchemaINPUT.owner":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NFTSchemaINPUT.description":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NFTSchemaINPUT.system_actioners":
		list := []string{}
		return protoreflect.ValueOfList(&_NFTSchemaINPUT_5_list{list: &list})
	case "sixprotocol.nftmngr.NFTSchemaINPUT.origin_data":
		m := new(OriginData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchemaINPUT.onchain_data":
		m := new(OnChainData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchemaINPUT.isVerified":
		return protoreflect.ValueOfBool(false)
	case "sixprotocol.nftmngr.NFTSchemaINPUT.mint_authorization":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchemaINPUT"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchemaINPUT does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_NFTSchemaINPUT) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sixprotocol.nftmngr.NFTSchemaINPUT", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_NFTSchemaINPUT) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NFTSchemaINPUT) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_NFTSchemaINPUT) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_NFTSchemaINPUT) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*NFTSchemaINPUT)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Code)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Owner)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Description)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.SystemActioners) > 0 {
			for _, s := range x.SystemActioners {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.OriginData != nil {
			l = options.Size(x.OriginData)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.OnchainData != nil {
			l = options.Size(x.OnchainData)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IsVerified {
			n += 2
		}
		l = len(x.MintAuthorization)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*NFTSchemaINPUT)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.MintAuthorization) > 0 {
			i -= len(x.MintAuthorization)
			copy(dAtA[i:], x.MintAuthorization)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MintAuthorization)))
			i--
			dAtA[i] = 0x4a
		}
		if x.IsVerified {
			i--
			if x.IsVerified {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x40
		}
		if x.OnchainData != nil {
			encoded, err := options.Marshal(x.OnchainData)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if x.OriginData != nil {
			encoded, err := options.Marshal(x.OriginData)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.SystemActioners) > 0 {
			for iNdEx := len(x.SystemActioners) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.SystemActioners[iNdEx])
				copy(dAtA[i:], x.SystemActioners[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SystemActioners[iNdEx])))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.Description) > 0 {
			i -= len(x.Description)
			copy(dAtA[i:], x.Description)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Description)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Owner) > 0 {
			i -= len(x.Owner)
			copy(dAtA[i:], x.Owner)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Owner)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Code) > 0 {
			i -= len(x.Code)
			copy(dAtA[i:], x.Code)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Code)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*NFTSchemaINPUT)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NFTSchemaINPUT: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NFTSchemaINPUT: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Code = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Owner = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Description = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SystemActioners", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SystemActioners = append(x.SystemActioners, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OriginData", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.OriginData == nil {
					x.OriginData = &OriginData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OriginData); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OnchainData", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.OnchainData == nil {
					x.OnchainData = &OnChainData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OnchainData); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsVerified = bool(v != 0)
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MintAuthorization", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MintAuthorization = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_NFTSchemaQueryResult                    protoreflect.MessageDescriptor
	fd_NFTSchemaQueryResult_code               protoreflect.FieldDescriptor
	fd_NFTSchemaQueryResult_name               protoreflect.FieldDescriptor
	fd_NFTSchemaQueryResult_owner              protoreflect.FieldDescriptor
	fd_NFTSchemaQueryResult_description        protoreflect.FieldDescriptor
	fd_NFTSchemaQueryResult_origin_data        protoreflect.FieldDescriptor
	fd_NFTSchemaQueryResult_onchain_data       protoreflect.FieldDescriptor
	fd_NFTSchemaQueryResult_isVerified         protoreflect.FieldDescriptor
	fd_NFTSchemaQueryResult_mint_authorization protoreflect.FieldDescriptor
)

func init() {
	file_sixprotocol_nftmngr_nft_schema_proto_init()
	md_NFTSchemaQueryResult = File_sixprotocol_nftmngr_nft_schema_proto.Messages().ByName("NFTSchemaQueryResult")
	fd_NFTSchemaQueryResult_code = md_NFTSchemaQueryResult.Fields().ByName("code")
	fd_NFTSchemaQueryResult_name = md_NFTSchemaQueryResult.Fields().ByName("name")
	fd_NFTSchemaQueryResult_owner = md_NFTSchemaQueryResult.Fields().ByName("owner")
	fd_NFTSchemaQueryResult_description = md_NFTSchemaQueryResult.Fields().ByName("description")
	fd_NFTSchemaQueryResult_origin_data = md_NFTSchemaQueryResult.Fields().ByName("origin_data")
	fd_NFTSchemaQueryResult_onchain_data = md_NFTSchemaQueryResult.Fields().ByName("onchain_data")
	fd_NFTSchemaQueryResult_isVerified = md_NFTSchemaQueryResult.Fields().ByName("isVerified")
	fd_NFTSchemaQueryResult_mint_authorization = md_NFTSchemaQueryResult.Fields().ByName("mint_authorization")
}

var _ protoreflect.Message = (*fastReflection_NFTSchemaQueryResult)(nil)

type fastReflection_NFTSchemaQueryResult NFTSchemaQueryResult

func (x *NFTSchemaQueryResult) ProtoReflect() protoreflect.Message {
	return (*fastReflection_NFTSchemaQueryResult)(x)
}

func (x *NFTSchemaQueryResult) slowProtoReflect() protoreflect.Message {
	mi := &file_sixprotocol_nftmngr_nft_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_NFTSchemaQueryResult_messageType fastReflection_NFTSchemaQueryResult_messageType
var _ protoreflect.MessageType = fastReflection_NFTSchemaQueryResult_messageType{}

type fastReflection_NFTSchemaQueryResult_messageType struct{}

func (x fastReflection_NFTSchemaQueryResult_messageType) Zero() protoreflect.Message {
	return (*fastReflection_NFTSchemaQueryResult)(nil)
}
func (x fastReflection_NFTSchemaQueryResult_messageType) New() protoreflect.Message {
	return new(fastReflection_NFTSchemaQueryResult)
}
func (x fastReflection_NFTSchemaQueryResult_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_NFTSchemaQueryResult
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_NFTSchemaQueryResult) Descriptor() protoreflect.MessageDescriptor {
	return md_NFTSchemaQueryResult
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_NFTSchemaQueryResult) Type() protoreflect.MessageType {
	return _fastReflection_NFTSchemaQueryResult_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_NFTSchemaQueryResult) New() protoreflect.Message {
	return new(fastReflection_NFTSchemaQueryResult)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_NFTSchemaQueryResult) Interface() protoreflect.ProtoMessage {
	return (*NFTSchemaQueryResult)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_NFTSchemaQueryResult) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Code != "" {
		value := protoreflect.ValueOfString(x.Code)
		if !f(fd_NFTSchemaQueryResult_code, value) {
			return
		}
	}
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_NFTSchemaQueryResult_name, value) {
			return
		}
	}
	if x.Owner != "" {
		value := protoreflect.ValueOfString(x.Owner)
		if !f(fd_NFTSchemaQueryResult_owner, value) {
			return
		}
	}
	if x.Description != "" {
		value := protoreflect.ValueOfString(x.Description)
		if !f(fd_NFTSchemaQueryResult_description, value) {
			return
		}
	}
	if x.OriginData != nil {
		value := protoreflect.ValueOfMessage(x.OriginData.ProtoReflect())
		if !f(fd_NFTSchemaQueryResult_origin_data, value) {
			return
		}
	}
	if x.OnchainData != nil {
		value := protoreflect.ValueOfMessage(x.OnchainData.ProtoReflect())
		if !f(fd_NFTSchemaQueryResult_onchain_data, value) {
			return
		}
	}
	if x.IsVerified != false {
		value := protoreflect.ValueOfBool(x.IsVerified)
		if !f(fd_NFTSchemaQueryResult_isVerified, value) {
			return
		}
	}
	if x.MintAuthorization != "" {
		value := protoreflect.ValueOfString(x.MintAuthorization)
		if !f(fd_NFTSchemaQueryResult_mint_authorization, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_NFTSchemaQueryResult) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.code":
		return x.Code != ""
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.name":
		return x.Name != ""
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.owner":
		return x.Owner != ""
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.description":
		return x.Description != ""
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.origin_data":
		return x.OriginData != nil
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.onchain_data":
		return x.OnchainData != nil
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.isVerified":
		return x.IsVerified != false
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.mint_authorization":
		return x.MintAuthorization != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchemaQueryResult"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchemaQueryResult does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NFTSchemaQueryResult) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.code":
		x.Code = ""
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.name":
		x.Name = ""
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.owner":
		x.Owner = ""
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.description":
		x.Description = ""
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.origin_data":
		x.OriginData = nil
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.onchain_data":
		x.OnchainData = nil
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.isVerified":
		x.IsVerified = false
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.mint_authorization":
		x.MintAuthorization = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchemaQueryResult"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchemaQueryResult does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_NFTSchemaQueryResult) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.code":
		value := x.Code
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.owner":
		value := x.Owner
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.description":
		value := x.Description
		return protoreflect.ValueOfString(value)
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.origin_data":
		value := x.OriginData
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.onchain_data":
		value := x.OnchainData
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.isVerified":
		value := x.IsVerified
		return protoreflect.ValueOfBool(value)
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.mint_authorization":
		value := x.MintAuthorization
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchemaQueryResult"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchemaQueryResult does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NFTSchemaQueryResult) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.code":
		x.Code = value.Interface().(string)
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.name":
		x.Name = value.Interface().(string)
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.owner":
		x.Owner = value.Interface().(string)
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.description":
		x.Description = value.Interface().(string)
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.origin_data":
		x.OriginData = value.Message().Interface().(*OriginData)
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.onchain_data":
		x.OnchainData = value.Message().Interface().(*OnChainDataResult)
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.isVerified":
		x.IsVerified = value.Bool()
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.mint_authorization":
		x.MintAuthorization = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchemaQueryResult"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchemaQueryResult does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NFTSchemaQueryResult) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.origin_data":
		if x.OriginData == nil {
			x.OriginData = new(OriginData)
		}
		return protoreflect.ValueOfMessage(x.OriginData.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.onchain_data":
		if x.OnchainData == nil {
			x.OnchainData = new(OnChainDataResult)
		}
		return protoreflect.ValueOfMessage(x.OnchainData.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.code":
		panic(fmt.Errorf("field code of message sixprotocol.nftmngr.NFTSchemaQueryResult is not mutable"))
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.name":
		panic(fmt.Errorf("field name of message sixprotocol.nftmngr.NFTSchemaQueryResult is not mutable"))
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.owner":
		panic(fmt.Errorf("field owner of message sixprotocol.nftmngr.NFTSchemaQueryResult is not mutable"))
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.description":
		panic(fmt.Errorf("field description of message sixprotocol.nftmngr.NFTSchemaQueryResult is not mutable"))
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.isVerified":
		panic(fmt.Errorf("field isVerified of message sixprotocol.nftmngr.NFTSchemaQueryResult is not mutable"))
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.mint_authorization":
		panic(fmt.Errorf("field mint_authorization of message sixprotocol.nftmngr.NFTSchemaQueryResult is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchemaQueryResult"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchemaQueryResult does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_NFTSchemaQueryResult) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.code":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.name":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.owner":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.description":
		return protoreflect.ValueOfString("")
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.origin_data":
		m := new(OriginData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.onchain_data":
		m := new(OnChainDataResult)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.isVerified":
		return protoreflect.ValueOfBool(false)
	case "sixprotocol.nftmngr.NFTSchemaQueryResult.mint_authorization":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sixprotocol.nftmngr.NFTSchemaQueryResult"))
		}
		panic(fmt.Errorf("message sixprotocol.nftmngr.NFTSchemaQueryResult does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_NFTSchemaQueryResult) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sixprotocol.nftmngr.NFTSchemaQueryResult", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_NFTSchemaQueryResult) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NFTSchemaQueryResult) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_NFTSchemaQueryResult) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_NFTSchemaQueryResult) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*NFTSchemaQueryResult)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Code)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Owner)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Description)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.OriginData != nil {
			l = options.Size(x.OriginData)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.OnchainData != nil {
			l = options.Size(x.OnchainData)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IsVerified {
			n += 2
		}
		l = len(x.MintAuthorization)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*NFTSchemaQueryResult)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.MintAuthorization) > 0 {
			i -= len(x.MintAuthorization)
			copy(dAtA[i:], x.MintAuthorization)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MintAuthorization)))
			i--
			dAtA[i] = 0x42
		}
		if x.IsVerified {
			i--
			if x.IsVerified {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x38
		}
		if x.OnchainData != nil {
			encoded, err := options.Marshal(x.OnchainData)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.OriginData != nil {
			encoded, err := options.Marshal(x.OriginData)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Description) > 0 {
			i -= len(x.Description)
			copy(dAtA[i:], x.Description)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Description)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Owner) > 0 {
			i -= len(x.Owner)
			copy(dAtA[i:], x.Owner)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Owner)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Code) > 0 {
			i -= len(x.Code)
			copy(dAtA[i:], x.Code)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Code)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*NFTSchemaQueryResult)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NFTSchemaQueryResult: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NFTSchemaQueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Code = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Owner = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Description = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OriginData", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.OriginData == nil {
					x.OriginData = &OriginData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OriginData); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OnchainData", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.OnchainData == nil {
					x.OnchainData = &OnChainDataResult{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OnchainData); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsVerified = bool(v != 0)
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MintAuthorization", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MintAuthorization = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sixprotocol/nftmngr/nft_schema.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NFTSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code              string       `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name              string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Owner             string       `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Description       string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	OriginData        *OriginData  `protobuf:"bytes,5,opt,name=origin_data,json=originData,proto3" json:"origin_data,omitempty"`
	OnchainData       *OnChainData `protobuf:"bytes,6,opt,name=onchain_data,json=onchainData,proto3" json:"onchain_data,omitempty"`
	IsVerified        bool         `protobuf:"varint,7,opt,name=isVerified,proto3" json:"isVerified,omitempty"`
	MintAuthorization string       `protobuf:"bytes,8,opt,name=mint_authorization,json=mintAuthorization,proto3" json:"mint_authorization,omitempty"`
}

func (x *NFTSchema) Reset() {
	*x = NFTSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sixprotocol_nftmngr_nft_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTSchema) ProtoMessage() {}

// Deprecated: Use NFTSchema.ProtoReflect.Descriptor instead.
func (*NFTSchema) Descriptor() ([]byte, []int) {
	return file_sixprotocol_nftmngr_nft_schema_proto_rawDescGZIP(), []int{0}
}

func (x *NFTSchema) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *NFTSchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NFTSchema) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *NFTSchema) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NFTSchema) GetOriginData() *OriginData {
	if x != nil {
		return x.OriginData
	}
	return nil
}

func (x *NFTSchema) GetOnchainData() *OnChainData {
	if x != nil {
		return x.OnchainData
	}
	return nil
}

func (x *NFTSchema) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *NFTSchema) GetMintAuthorization() string {
	if x != nil {
		return x.MintAuthorization
	}
	return ""
}

type NFTSchemaINPUT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code              string       `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name              string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Owner             string       `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Description       string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	SystemActioners   []string     `protobuf:"bytes,5,rep,name=system_actioners,json=systemActioners,proto3" json:"system_actioners,omitempty"`
	OriginData        *OriginData  `protobuf:"bytes,6,opt,name=origin_data,json=originData,proto3" json:"origin_data,omitempty"`
	OnchainData       *OnChainData `protobuf:"bytes,7,opt,name=onchain_data,json=onchainData,proto3" json:"onchain_data,omitempty"`
	IsVerified        bool         `protobuf:"varint,8,opt,name=isVerified,proto3" json:"isVerified,omitempty"`
	MintAuthorization string       `protobuf:"bytes,9,opt,name=mint_authorization,json=mintAuthorization,proto3" json:"mint_authorization,omitempty"`
}

func (x *NFTSchemaINPUT) Reset() {
	*x = NFTSchemaINPUT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sixprotocol_nftmngr_nft_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTSchemaINPUT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTSchemaINPUT) ProtoMessage() {}

// Deprecated: Use NFTSchemaINPUT.ProtoReflect.Descriptor instead.
func (*NFTSchemaINPUT) Descriptor() ([]byte, []int) {
	return file_sixprotocol_nftmngr_nft_schema_proto_rawDescGZIP(), []int{1}
}

func (x *NFTSchemaINPUT) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *NFTSchemaINPUT) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NFTSchemaINPUT) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *NFTSchemaINPUT) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NFTSchemaINPUT) GetSystemActioners() []string {
	if x != nil {
		return x.SystemActioners
	}
	return nil
}

func (x *NFTSchemaINPUT) GetOriginData() *OriginData {
	if x != nil {
		return x.OriginData
	}
	return nil
}

func (x *NFTSchemaINPUT) GetOnchainData() *OnChainData {
	if x != nil {
		return x.OnchainData
	}
	return nil
}

func (x *NFTSchemaINPUT) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *NFTSchemaINPUT) GetMintAuthorization() string {
	if x != nil {
		return x.MintAuthorization
	}
	return ""
}

type NFTSchemaQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code              string             `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name              string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Owner             string             `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Description       string             `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	OriginData        *OriginData        `protobuf:"bytes,5,opt,name=origin_data,json=originData,proto3" json:"origin_data,omitempty"`
	OnchainData       *OnChainDataResult `protobuf:"bytes,6,opt,name=onchain_data,json=onchainData,proto3" json:"onchain_data,omitempty"`
	IsVerified        bool               `protobuf:"varint,7,opt,name=isVerified,proto3" json:"isVerified,omitempty"`
	MintAuthorization string             `protobuf:"bytes,8,opt,name=mint_authorization,json=mintAuthorization,proto3" json:"mint_authorization,omitempty"`
}

func (x *NFTSchemaQueryResult) Reset() {
	*x = NFTSchemaQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sixprotocol_nftmngr_nft_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTSchemaQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTSchemaQueryResult) ProtoMessage() {}

// Deprecated: Use NFTSchemaQueryResult.ProtoReflect.Descriptor instead.
func (*NFTSchemaQueryResult) Descriptor() ([]byte, []int) {
	return file_sixprotocol_nftmngr_nft_schema_proto_rawDescGZIP(), []int{2}
}

func (x *NFTSchemaQueryResult) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *NFTSchemaQueryResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NFTSchemaQueryResult) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *NFTSchemaQueryResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NFTSchemaQueryResult) GetOriginData() *OriginData {
	if x != nil {
		return x.OriginData
	}
	return nil
}

func (x *NFTSchemaQueryResult) GetOnchainData() *OnChainDataResult {
	if x != nil {
		return x.OnchainData
	}
	return nil
}

func (x *NFTSchemaQueryResult) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *NFTSchemaQueryResult) GetMintAuthorization() string {
	if x != nil {
		return x.MintAuthorization
	}
	return ""
}

var File_sixprotocol_nftmngr_nft_schema_proto protoreflect.FileDescriptor

var file_sixprotocol_nftmngr_nft_schema_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6e, 0x66,
	0x74, 0x6d, 0x6e, 0x67, 0x72, 0x2f, 0x6e, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0x1a, 0x27, 0x73, 0x69, 0x78,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72,
	0x2f, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x6e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc1, 0x02, 0x0a, 0x09,
	0x4e, 0x46, 0x54, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6e, 0x66, 0x74,
	0x6d, 0x6e, 0x67, 0x72, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0c, 0x6f,
	0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x6e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0x2e, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0b, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x69,
	0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xf1, 0x02, 0x0a, 0x0e, 0x4e, 0x46, 0x54, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x4e, 0x50,
	0x55, 0x54, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x43, 0x0a, 0x0c, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0x2e, 0x4f, 0x6e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6d, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x02, 0x0a, 0x14, 0x4e, 0x46, 0x54, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x6e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49,
	0x0a, 0x0c, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0x2e, 0x4f, 0x6e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x6f, 0x6e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x69, 0x6e,
	0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xd5, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6e, 0x66, 0x74,
	0x6d, 0x6e, 0x67, 0x72, 0x42, 0x0e, 0x4e, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x78, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2f, 0x73, 0x69, 0x78, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6e, 0x66,
	0x74, 0x6d, 0x6e, 0x67, 0x72, 0xa2, 0x02, 0x03, 0x53, 0x4e, 0x58, 0xaa, 0x02, 0x13, 0x53, 0x69,
	0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x66, 0x74, 0x6d, 0x6e, 0x67,
	0x72, 0xca, 0x02, 0x13, 0x53, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5c,
	0x4e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0xe2, 0x02, 0x1f, 0x53, 0x69, 0x78, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5c, 0x4e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x53, 0x69, 0x78, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x3a, 0x4e, 0x66, 0x74, 0x6d, 0x6e, 0x67, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sixprotocol_nftmngr_nft_schema_proto_rawDescOnce sync.Once
	file_sixprotocol_nftmngr_nft_schema_proto_rawDescData = file_sixprotocol_nftmngr_nft_schema_proto_rawDesc
)

func file_sixprotocol_nftmngr_nft_schema_proto_rawDescGZIP() []byte {
	file_sixprotocol_nftmngr_nft_schema_proto_rawDescOnce.Do(func() {
		file_sixprotocol_nftmngr_nft_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_sixprotocol_nftmngr_nft_schema_proto_rawDescData)
	})
	return file_sixprotocol_nftmngr_nft_schema_proto_rawDescData
}

var file_sixprotocol_nftmngr_nft_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_sixprotocol_nftmngr_nft_schema_proto_goTypes = []interface{}{
	(*NFTSchema)(nil),            // 0: sixprotocol.nftmngr.NFTSchema
	(*NFTSchemaINPUT)(nil),       // 1: sixprotocol.nftmngr.NFTSchemaINPUT
	(*NFTSchemaQueryResult)(nil), // 2: sixprotocol.nftmngr.NFTSchemaQueryResult
	(*OriginData)(nil),           // 3: sixprotocol.nftmngr.OriginData
	(*OnChainData)(nil),          // 4: sixprotocol.nftmngr.OnChainData
	(*OnChainDataResult)(nil),    // 5: sixprotocol.nftmngr.OnChainDataResult
}
var file_sixprotocol_nftmngr_nft_schema_proto_depIdxs = []int32{
	3, // 0: sixprotocol.nftmngr.NFTSchema.origin_data:type_name -> sixprotocol.nftmngr.OriginData
	4, // 1: sixprotocol.nftmngr.NFTSchema.onchain_data:type_name -> sixprotocol.nftmngr.OnChainData
	3, // 2: sixprotocol.nftmngr.NFTSchemaINPUT.origin_data:type_name -> sixprotocol.nftmngr.OriginData
	4, // 3: sixprotocol.nftmngr.NFTSchemaINPUT.onchain_data:type_name -> sixprotocol.nftmngr.OnChainData
	3, // 4: sixprotocol.nftmngr.NFTSchemaQueryResult.origin_data:type_name -> sixprotocol.nftmngr.OriginData
	5, // 5: sixprotocol.nftmngr.NFTSchemaQueryResult.onchain_data:type_name -> sixprotocol.nftmngr.OnChainDataResult
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_sixprotocol_nftmngr_nft_schema_proto_init() }
func file_sixprotocol_nftmngr_nft_schema_proto_init() {
	if File_sixprotocol_nftmngr_nft_schema_proto != nil {
		return
	}
	file_sixprotocol_nftmngr_on_chain_data_proto_init()
	file_sixprotocol_nftmngr_origin_data_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sixprotocol_nftmngr_nft_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sixprotocol_nftmngr_nft_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTSchemaINPUT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sixprotocol_nftmngr_nft_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTSchemaQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sixprotocol_nftmngr_nft_schema_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sixprotocol_nftmngr_nft_schema_proto_goTypes,
		DependencyIndexes: file_sixprotocol_nftmngr_nft_schema_proto_depIdxs,
		MessageInfos:      file_sixprotocol_nftmngr_nft_schema_proto_msgTypes,
	}.Build()
	File_sixprotocol_nftmngr_nft_schema_proto = out.File
	file_sixprotocol_nftmngr_nft_schema_proto_rawDesc = nil
	file_sixprotocol_nftmngr_nft_schema_proto_goTypes = nil
	file_sixprotocol_nftmngr_nft_schema_proto_depIdxs = nil
}
