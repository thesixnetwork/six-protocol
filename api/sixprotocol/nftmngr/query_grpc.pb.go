// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sixprotocol/nftmngr/query.proto

package nftmngr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                   = "/sixprotocol.nftmngr.Query/Params"
	Query_NFTSchema_FullMethodName                = "/sixprotocol.nftmngr.Query/NFTSchema"
	Query_NFTSchemaAll_FullMethodName             = "/sixprotocol.nftmngr.Query/NFTSchemaAll"
	Query_NftData_FullMethodName                  = "/sixprotocol.nftmngr.Query/NftData"
	Query_NftDataAll_FullMethodName               = "/sixprotocol.nftmngr.Query/NftDataAll"
	Query_ActionByRefId_FullMethodName            = "/sixprotocol.nftmngr.Query/ActionByRefId"
	Query_ActionByRefIdAll_FullMethodName         = "/sixprotocol.nftmngr.Query/ActionByRefIdAll"
	Query_Organization_FullMethodName             = "/sixprotocol.nftmngr.Query/Organization"
	Query_OrganizationAll_FullMethodName          = "/sixprotocol.nftmngr.Query/OrganizationAll"
	Query_NftCollection_FullMethodName            = "/sixprotocol.nftmngr.Query/NftCollection"
	Query_NFTSchemaByContract_FullMethodName      = "/sixprotocol.nftmngr.Query/NFTSchemaByContract"
	Query_NFTSchemaByContractAll_FullMethodName   = "/sixprotocol.nftmngr.Query/NFTSchemaByContractAll"
	Query_NFTFeeConfig_FullMethodName             = "/sixprotocol.nftmngr.Query/NFTFeeConfig"
	Query_NFTFeeBalance_FullMethodName            = "/sixprotocol.nftmngr.Query/NFTFeeBalance"
	Query_MetadataCreator_FullMethodName          = "/sixprotocol.nftmngr.Query/MetadataCreator"
	Query_MetadataCreatorAll_FullMethodName       = "/sixprotocol.nftmngr.Query/MetadataCreatorAll"
	Query_ActionExecutor_FullMethodName           = "/sixprotocol.nftmngr.Query/ActionExecutor"
	Query_ActionExecutorAll_FullMethodName        = "/sixprotocol.nftmngr.Query/ActionExecutorAll"
	Query_SchemaAttribute_FullMethodName          = "/sixprotocol.nftmngr.Query/SchemaAttribute"
	Query_SchemaAttributeAll_FullMethodName       = "/sixprotocol.nftmngr.Query/SchemaAttributeAll"
	Query_ListAttributeBySchema_FullMethodName    = "/sixprotocol.nftmngr.Query/ListAttributeBySchema"
	Query_ActionOfSchema_FullMethodName           = "/sixprotocol.nftmngr.Query/ActionOfSchema"
	Query_ActionOfSchemaAll_FullMethodName        = "/sixprotocol.nftmngr.Query/ActionOfSchemaAll"
	Query_ExecutorOfSchema_FullMethodName         = "/sixprotocol.nftmngr.Query/ExecutorOfSchema"
	Query_ExecutorOfSchemaAll_FullMethodName      = "/sixprotocol.nftmngr.Query/ExecutorOfSchemaAll"
	Query_VirtualAction_FullMethodName            = "/sixprotocol.nftmngr.Query/VirtualAction"
	Query_VirtualActionAll_FullMethodName         = "/sixprotocol.nftmngr.Query/VirtualActionAll"
	Query_VirtualSchema_FullMethodName            = "/sixprotocol.nftmngr.Query/VirtualSchema"
	Query_VirtualSchemaAll_FullMethodName         = "/sixprotocol.nftmngr.Query/VirtualSchemaAll"
	Query_VirtualSchemaProposal_FullMethodName    = "/sixprotocol.nftmngr.Query/VirtualSchemaProposal"
	Query_VirtualSchemaProposalAll_FullMethodName = "/sixprotocol.nftmngr.Query/VirtualSchemaProposalAll"
	Query_ListActiveProposal_FullMethodName       = "/sixprotocol.nftmngr.Query/ListActiveProposal"
	Query_LockSchemaFee_FullMethodName            = "/sixprotocol.nftmngr.Query/LockSchemaFee"
	Query_LockSchemaFeeAll_FullMethodName         = "/sixprotocol.nftmngr.Query/LockSchemaFeeAll"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a NFTSchema by index.
	NFTSchema(ctx context.Context, in *QueryGetNFTSchemaRequest, opts ...grpc.CallOption) (*QueryGetNFTSchemaResponse, error)
	// Queries a list of NFTSchema items.
	NFTSchemaAll(ctx context.Context, in *QueryAllNFTSchemaRequest, opts ...grpc.CallOption) (*QueryAllNFTSchemaResponse, error)
	// Queries a NftData by index.
	NftData(ctx context.Context, in *QueryGetNftDataRequest, opts ...grpc.CallOption) (*QueryGetNftDataResponse, error)
	// Queries a list of NftData items.
	NftDataAll(ctx context.Context, in *QueryAllNftDataRequest, opts ...grpc.CallOption) (*QueryAllNftDataResponse, error)
	// Queries a ActionByRefId by index.
	ActionByRefId(ctx context.Context, in *QueryGetActionByRefIdRequest, opts ...grpc.CallOption) (*QueryGetActionByRefIdResponse, error)
	// Queries a list of ActionByRefId items.
	ActionByRefIdAll(ctx context.Context, in *QueryAllActionByRefIdRequest, opts ...grpc.CallOption) (*QueryAllActionByRefIdResponse, error)
	// Queries a Organization by index.
	Organization(ctx context.Context, in *QueryGetOrganizationRequest, opts ...grpc.CallOption) (*QueryGetOrganizationResponse, error)
	// Queries a list of Organization items.
	OrganizationAll(ctx context.Context, in *QueryAllOrganizationRequest, opts ...grpc.CallOption) (*QueryAllOrganizationResponse, error)
	// Queries a NftCollection by index.
	NftCollection(ctx context.Context, in *QueryGetNftCollectionRequest, opts ...grpc.CallOption) (*QueryGetNftCollectionResponse, error)
	// Queries a NFTSchemaByContract by index.
	NFTSchemaByContract(ctx context.Context, in *QueryGetNFTSchemaByContractRequest, opts ...grpc.CallOption) (*QueryGetNFTSchemaByContractResponse, error)
	// Queries a list of NFTSchemaByContract items.
	NFTSchemaByContractAll(ctx context.Context, in *QueryAllNFTSchemaByContractRequest, opts ...grpc.CallOption) (*QueryAllNFTSchemaByContractResponse, error)
	// Queries a NFTFeeConfig by index.
	NFTFeeConfig(ctx context.Context, in *QueryGetNFTFeeConfigRequest, opts ...grpc.CallOption) (*QueryGetNFTFeeConfigResponse, error)
	// Queries a NFTFeeBalance by index.
	NFTFeeBalance(ctx context.Context, in *QueryGetNFTFeeBalanceRequest, opts ...grpc.CallOption) (*QueryGetNFTFeeBalanceResponse, error)
	// Queries a MetadataCreator by index.
	MetadataCreator(ctx context.Context, in *QueryGetMetadataCreatorRequest, opts ...grpc.CallOption) (*QueryGetMetadataCreatorResponse, error)
	// Queries a list of MetadataCreator items.
	MetadataCreatorAll(ctx context.Context, in *QueryAllMetadataCreatorRequest, opts ...grpc.CallOption) (*QueryAllMetadataCreatorResponse, error)
	// Queries a ActionExecutor by index.
	ActionExecutor(ctx context.Context, in *QueryGetActionExecutorRequest, opts ...grpc.CallOption) (*QueryGetActionExecutorResponse, error)
	// Queries a list of ActionExecutor items.
	ActionExecutorAll(ctx context.Context, in *QueryAllActionExecutorRequest, opts ...grpc.CallOption) (*QueryAllActionExecutorResponse, error)
	// Queries a SchemaAttribute by index.
	SchemaAttribute(ctx context.Context, in *QueryGetSchemaAttributeRequest, opts ...grpc.CallOption) (*QueryGetSchemaAttributeResponse, error)
	// Queries a list of SchemaAttribute items.
	SchemaAttributeAll(ctx context.Context, in *QueryAllSchemaAttributeRequest, opts ...grpc.CallOption) (*QueryAllSchemaAttributeResponse, error)
	// Queries a list of ListAttributeBySchema items.
	ListAttributeBySchema(ctx context.Context, in *QueryListAttributeBySchemaRequest, opts ...grpc.CallOption) (*QueryListAttributeBySchemaResponse, error)
	// Queries a ActionOfSchema by index.
	ActionOfSchema(ctx context.Context, in *QueryGetActionOfSchemaRequest, opts ...grpc.CallOption) (*QueryGetActionOfSchemaResponse, error)
	// Queries a list of ActionOfSchema items.
	ActionOfSchemaAll(ctx context.Context, in *QueryAllActionOfSchemaRequest, opts ...grpc.CallOption) (*QueryAllActionOfSchemaResponse, error)
	// Queries a ExecutorOfSchema by index.
	ExecutorOfSchema(ctx context.Context, in *QueryGetExecutorOfSchemaRequest, opts ...grpc.CallOption) (*QueryGetExecutorOfSchemaResponse, error)
	// Queries a list of ExecutorOfSchema items.
	ExecutorOfSchemaAll(ctx context.Context, in *QueryAllExecutorOfSchemaRequest, opts ...grpc.CallOption) (*QueryAllExecutorOfSchemaResponse, error)
	// Queries a Virtual by index
	VirtualAction(ctx context.Context, in *QueryGetVirtualActionRequest, opts ...grpc.CallOption) (*QueryGetVirtualActionResponse, error)
	// Queries a list of Virtual items.
	VirtualActionAll(ctx context.Context, in *QueryAllVirtualActionRequest, opts ...grpc.CallOption) (*QueryAllVirtualActionResponse, error)
	// Queries a VirtualSchema by index.
	VirtualSchema(ctx context.Context, in *QueryGetVirtualSchemaRequest, opts ...grpc.CallOption) (*QueryGetVirtualSchemaResponse, error)
	// Queries a list of VirtualSchema items.
	VirtualSchemaAll(ctx context.Context, in *QueryAllVirtualSchemaRequest, opts ...grpc.CallOption) (*QueryAllVirtualSchemaResponse, error)
	// Queries a VirtualSchemaProposal by index.
	VirtualSchemaProposal(ctx context.Context, in *QueryGetVirtualSchemaProposalRequest, opts ...grpc.CallOption) (*QueryGetVirtualSchemaProposalResponse, error)
	// Queries a list of VirtualSchemaProposal items.
	VirtualSchemaProposalAll(ctx context.Context, in *QueryAllVirtualSchemaProposalRequest, opts ...grpc.CallOption) (*QueryAllVirtualSchemaProposalResponse, error)
	// Queries a list of ListActiveProposal items.
	ListActiveProposal(ctx context.Context, in *QueryListActiveProposalRequest, opts ...grpc.CallOption) (*QueryListActiveProposalResponse, error)
	// Queries a LockSchemaFee by index.
	LockSchemaFee(ctx context.Context, in *QueryGetLockSchemaFeeRequest, opts ...grpc.CallOption) (*QueryGetLockSchemaFeeResponse, error)
	// Queries a list of LockSchemaFee items.
	LockSchemaFeeAll(ctx context.Context, in *QueryAllLockSchemaFeeRequest, opts ...grpc.CallOption) (*QueryAllLockSchemaFeeResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NFTSchema(ctx context.Context, in *QueryGetNFTSchemaRequest, opts ...grpc.CallOption) (*QueryGetNFTSchemaResponse, error) {
	out := new(QueryGetNFTSchemaResponse)
	err := c.cc.Invoke(ctx, Query_NFTSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NFTSchemaAll(ctx context.Context, in *QueryAllNFTSchemaRequest, opts ...grpc.CallOption) (*QueryAllNFTSchemaResponse, error) {
	out := new(QueryAllNFTSchemaResponse)
	err := c.cc.Invoke(ctx, Query_NFTSchemaAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftData(ctx context.Context, in *QueryGetNftDataRequest, opts ...grpc.CallOption) (*QueryGetNftDataResponse, error) {
	out := new(QueryGetNftDataResponse)
	err := c.cc.Invoke(ctx, Query_NftData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftDataAll(ctx context.Context, in *QueryAllNftDataRequest, opts ...grpc.CallOption) (*QueryAllNftDataResponse, error) {
	out := new(QueryAllNftDataResponse)
	err := c.cc.Invoke(ctx, Query_NftDataAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionByRefId(ctx context.Context, in *QueryGetActionByRefIdRequest, opts ...grpc.CallOption) (*QueryGetActionByRefIdResponse, error) {
	out := new(QueryGetActionByRefIdResponse)
	err := c.cc.Invoke(ctx, Query_ActionByRefId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionByRefIdAll(ctx context.Context, in *QueryAllActionByRefIdRequest, opts ...grpc.CallOption) (*QueryAllActionByRefIdResponse, error) {
	out := new(QueryAllActionByRefIdResponse)
	err := c.cc.Invoke(ctx, Query_ActionByRefIdAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Organization(ctx context.Context, in *QueryGetOrganizationRequest, opts ...grpc.CallOption) (*QueryGetOrganizationResponse, error) {
	out := new(QueryGetOrganizationResponse)
	err := c.cc.Invoke(ctx, Query_Organization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrganizationAll(ctx context.Context, in *QueryAllOrganizationRequest, opts ...grpc.CallOption) (*QueryAllOrganizationResponse, error) {
	out := new(QueryAllOrganizationResponse)
	err := c.cc.Invoke(ctx, Query_OrganizationAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftCollection(ctx context.Context, in *QueryGetNftCollectionRequest, opts ...grpc.CallOption) (*QueryGetNftCollectionResponse, error) {
	out := new(QueryGetNftCollectionResponse)
	err := c.cc.Invoke(ctx, Query_NftCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NFTSchemaByContract(ctx context.Context, in *QueryGetNFTSchemaByContractRequest, opts ...grpc.CallOption) (*QueryGetNFTSchemaByContractResponse, error) {
	out := new(QueryGetNFTSchemaByContractResponse)
	err := c.cc.Invoke(ctx, Query_NFTSchemaByContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NFTSchemaByContractAll(ctx context.Context, in *QueryAllNFTSchemaByContractRequest, opts ...grpc.CallOption) (*QueryAllNFTSchemaByContractResponse, error) {
	out := new(QueryAllNFTSchemaByContractResponse)
	err := c.cc.Invoke(ctx, Query_NFTSchemaByContractAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NFTFeeConfig(ctx context.Context, in *QueryGetNFTFeeConfigRequest, opts ...grpc.CallOption) (*QueryGetNFTFeeConfigResponse, error) {
	out := new(QueryGetNFTFeeConfigResponse)
	err := c.cc.Invoke(ctx, Query_NFTFeeConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NFTFeeBalance(ctx context.Context, in *QueryGetNFTFeeBalanceRequest, opts ...grpc.CallOption) (*QueryGetNFTFeeBalanceResponse, error) {
	out := new(QueryGetNFTFeeBalanceResponse)
	err := c.cc.Invoke(ctx, Query_NFTFeeBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MetadataCreator(ctx context.Context, in *QueryGetMetadataCreatorRequest, opts ...grpc.CallOption) (*QueryGetMetadataCreatorResponse, error) {
	out := new(QueryGetMetadataCreatorResponse)
	err := c.cc.Invoke(ctx, Query_MetadataCreator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MetadataCreatorAll(ctx context.Context, in *QueryAllMetadataCreatorRequest, opts ...grpc.CallOption) (*QueryAllMetadataCreatorResponse, error) {
	out := new(QueryAllMetadataCreatorResponse)
	err := c.cc.Invoke(ctx, Query_MetadataCreatorAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionExecutor(ctx context.Context, in *QueryGetActionExecutorRequest, opts ...grpc.CallOption) (*QueryGetActionExecutorResponse, error) {
	out := new(QueryGetActionExecutorResponse)
	err := c.cc.Invoke(ctx, Query_ActionExecutor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionExecutorAll(ctx context.Context, in *QueryAllActionExecutorRequest, opts ...grpc.CallOption) (*QueryAllActionExecutorResponse, error) {
	out := new(QueryAllActionExecutorResponse)
	err := c.cc.Invoke(ctx, Query_ActionExecutorAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SchemaAttribute(ctx context.Context, in *QueryGetSchemaAttributeRequest, opts ...grpc.CallOption) (*QueryGetSchemaAttributeResponse, error) {
	out := new(QueryGetSchemaAttributeResponse)
	err := c.cc.Invoke(ctx, Query_SchemaAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SchemaAttributeAll(ctx context.Context, in *QueryAllSchemaAttributeRequest, opts ...grpc.CallOption) (*QueryAllSchemaAttributeResponse, error) {
	out := new(QueryAllSchemaAttributeResponse)
	err := c.cc.Invoke(ctx, Query_SchemaAttributeAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListAttributeBySchema(ctx context.Context, in *QueryListAttributeBySchemaRequest, opts ...grpc.CallOption) (*QueryListAttributeBySchemaResponse, error) {
	out := new(QueryListAttributeBySchemaResponse)
	err := c.cc.Invoke(ctx, Query_ListAttributeBySchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionOfSchema(ctx context.Context, in *QueryGetActionOfSchemaRequest, opts ...grpc.CallOption) (*QueryGetActionOfSchemaResponse, error) {
	out := new(QueryGetActionOfSchemaResponse)
	err := c.cc.Invoke(ctx, Query_ActionOfSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionOfSchemaAll(ctx context.Context, in *QueryAllActionOfSchemaRequest, opts ...grpc.CallOption) (*QueryAllActionOfSchemaResponse, error) {
	out := new(QueryAllActionOfSchemaResponse)
	err := c.cc.Invoke(ctx, Query_ActionOfSchemaAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecutorOfSchema(ctx context.Context, in *QueryGetExecutorOfSchemaRequest, opts ...grpc.CallOption) (*QueryGetExecutorOfSchemaResponse, error) {
	out := new(QueryGetExecutorOfSchemaResponse)
	err := c.cc.Invoke(ctx, Query_ExecutorOfSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecutorOfSchemaAll(ctx context.Context, in *QueryAllExecutorOfSchemaRequest, opts ...grpc.CallOption) (*QueryAllExecutorOfSchemaResponse, error) {
	out := new(QueryAllExecutorOfSchemaResponse)
	err := c.cc.Invoke(ctx, Query_ExecutorOfSchemaAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VirtualAction(ctx context.Context, in *QueryGetVirtualActionRequest, opts ...grpc.CallOption) (*QueryGetVirtualActionResponse, error) {
	out := new(QueryGetVirtualActionResponse)
	err := c.cc.Invoke(ctx, Query_VirtualAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VirtualActionAll(ctx context.Context, in *QueryAllVirtualActionRequest, opts ...grpc.CallOption) (*QueryAllVirtualActionResponse, error) {
	out := new(QueryAllVirtualActionResponse)
	err := c.cc.Invoke(ctx, Query_VirtualActionAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VirtualSchema(ctx context.Context, in *QueryGetVirtualSchemaRequest, opts ...grpc.CallOption) (*QueryGetVirtualSchemaResponse, error) {
	out := new(QueryGetVirtualSchemaResponse)
	err := c.cc.Invoke(ctx, Query_VirtualSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VirtualSchemaAll(ctx context.Context, in *QueryAllVirtualSchemaRequest, opts ...grpc.CallOption) (*QueryAllVirtualSchemaResponse, error) {
	out := new(QueryAllVirtualSchemaResponse)
	err := c.cc.Invoke(ctx, Query_VirtualSchemaAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VirtualSchemaProposal(ctx context.Context, in *QueryGetVirtualSchemaProposalRequest, opts ...grpc.CallOption) (*QueryGetVirtualSchemaProposalResponse, error) {
	out := new(QueryGetVirtualSchemaProposalResponse)
	err := c.cc.Invoke(ctx, Query_VirtualSchemaProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VirtualSchemaProposalAll(ctx context.Context, in *QueryAllVirtualSchemaProposalRequest, opts ...grpc.CallOption) (*QueryAllVirtualSchemaProposalResponse, error) {
	out := new(QueryAllVirtualSchemaProposalResponse)
	err := c.cc.Invoke(ctx, Query_VirtualSchemaProposalAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListActiveProposal(ctx context.Context, in *QueryListActiveProposalRequest, opts ...grpc.CallOption) (*QueryListActiveProposalResponse, error) {
	out := new(QueryListActiveProposalResponse)
	err := c.cc.Invoke(ctx, Query_ListActiveProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LockSchemaFee(ctx context.Context, in *QueryGetLockSchemaFeeRequest, opts ...grpc.CallOption) (*QueryGetLockSchemaFeeResponse, error) {
	out := new(QueryGetLockSchemaFeeResponse)
	err := c.cc.Invoke(ctx, Query_LockSchemaFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LockSchemaFeeAll(ctx context.Context, in *QueryAllLockSchemaFeeRequest, opts ...grpc.CallOption) (*QueryAllLockSchemaFeeResponse, error) {
	out := new(QueryAllLockSchemaFeeResponse)
	err := c.cc.Invoke(ctx, Query_LockSchemaFeeAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a NFTSchema by index.
	NFTSchema(context.Context, *QueryGetNFTSchemaRequest) (*QueryGetNFTSchemaResponse, error)
	// Queries a list of NFTSchema items.
	NFTSchemaAll(context.Context, *QueryAllNFTSchemaRequest) (*QueryAllNFTSchemaResponse, error)
	// Queries a NftData by index.
	NftData(context.Context, *QueryGetNftDataRequest) (*QueryGetNftDataResponse, error)
	// Queries a list of NftData items.
	NftDataAll(context.Context, *QueryAllNftDataRequest) (*QueryAllNftDataResponse, error)
	// Queries a ActionByRefId by index.
	ActionByRefId(context.Context, *QueryGetActionByRefIdRequest) (*QueryGetActionByRefIdResponse, error)
	// Queries a list of ActionByRefId items.
	ActionByRefIdAll(context.Context, *QueryAllActionByRefIdRequest) (*QueryAllActionByRefIdResponse, error)
	// Queries a Organization by index.
	Organization(context.Context, *QueryGetOrganizationRequest) (*QueryGetOrganizationResponse, error)
	// Queries a list of Organization items.
	OrganizationAll(context.Context, *QueryAllOrganizationRequest) (*QueryAllOrganizationResponse, error)
	// Queries a NftCollection by index.
	NftCollection(context.Context, *QueryGetNftCollectionRequest) (*QueryGetNftCollectionResponse, error)
	// Queries a NFTSchemaByContract by index.
	NFTSchemaByContract(context.Context, *QueryGetNFTSchemaByContractRequest) (*QueryGetNFTSchemaByContractResponse, error)
	// Queries a list of NFTSchemaByContract items.
	NFTSchemaByContractAll(context.Context, *QueryAllNFTSchemaByContractRequest) (*QueryAllNFTSchemaByContractResponse, error)
	// Queries a NFTFeeConfig by index.
	NFTFeeConfig(context.Context, *QueryGetNFTFeeConfigRequest) (*QueryGetNFTFeeConfigResponse, error)
	// Queries a NFTFeeBalance by index.
	NFTFeeBalance(context.Context, *QueryGetNFTFeeBalanceRequest) (*QueryGetNFTFeeBalanceResponse, error)
	// Queries a MetadataCreator by index.
	MetadataCreator(context.Context, *QueryGetMetadataCreatorRequest) (*QueryGetMetadataCreatorResponse, error)
	// Queries a list of MetadataCreator items.
	MetadataCreatorAll(context.Context, *QueryAllMetadataCreatorRequest) (*QueryAllMetadataCreatorResponse, error)
	// Queries a ActionExecutor by index.
	ActionExecutor(context.Context, *QueryGetActionExecutorRequest) (*QueryGetActionExecutorResponse, error)
	// Queries a list of ActionExecutor items.
	ActionExecutorAll(context.Context, *QueryAllActionExecutorRequest) (*QueryAllActionExecutorResponse, error)
	// Queries a SchemaAttribute by index.
	SchemaAttribute(context.Context, *QueryGetSchemaAttributeRequest) (*QueryGetSchemaAttributeResponse, error)
	// Queries a list of SchemaAttribute items.
	SchemaAttributeAll(context.Context, *QueryAllSchemaAttributeRequest) (*QueryAllSchemaAttributeResponse, error)
	// Queries a list of ListAttributeBySchema items.
	ListAttributeBySchema(context.Context, *QueryListAttributeBySchemaRequest) (*QueryListAttributeBySchemaResponse, error)
	// Queries a ActionOfSchema by index.
	ActionOfSchema(context.Context, *QueryGetActionOfSchemaRequest) (*QueryGetActionOfSchemaResponse, error)
	// Queries a list of ActionOfSchema items.
	ActionOfSchemaAll(context.Context, *QueryAllActionOfSchemaRequest) (*QueryAllActionOfSchemaResponse, error)
	// Queries a ExecutorOfSchema by index.
	ExecutorOfSchema(context.Context, *QueryGetExecutorOfSchemaRequest) (*QueryGetExecutorOfSchemaResponse, error)
	// Queries a list of ExecutorOfSchema items.
	ExecutorOfSchemaAll(context.Context, *QueryAllExecutorOfSchemaRequest) (*QueryAllExecutorOfSchemaResponse, error)
	// Queries a Virtual by index
	VirtualAction(context.Context, *QueryGetVirtualActionRequest) (*QueryGetVirtualActionResponse, error)
	// Queries a list of Virtual items.
	VirtualActionAll(context.Context, *QueryAllVirtualActionRequest) (*QueryAllVirtualActionResponse, error)
	// Queries a VirtualSchema by index.
	VirtualSchema(context.Context, *QueryGetVirtualSchemaRequest) (*QueryGetVirtualSchemaResponse, error)
	// Queries a list of VirtualSchema items.
	VirtualSchemaAll(context.Context, *QueryAllVirtualSchemaRequest) (*QueryAllVirtualSchemaResponse, error)
	// Queries a VirtualSchemaProposal by index.
	VirtualSchemaProposal(context.Context, *QueryGetVirtualSchemaProposalRequest) (*QueryGetVirtualSchemaProposalResponse, error)
	// Queries a list of VirtualSchemaProposal items.
	VirtualSchemaProposalAll(context.Context, *QueryAllVirtualSchemaProposalRequest) (*QueryAllVirtualSchemaProposalResponse, error)
	// Queries a list of ListActiveProposal items.
	ListActiveProposal(context.Context, *QueryListActiveProposalRequest) (*QueryListActiveProposalResponse, error)
	// Queries a LockSchemaFee by index.
	LockSchemaFee(context.Context, *QueryGetLockSchemaFeeRequest) (*QueryGetLockSchemaFeeResponse, error)
	// Queries a list of LockSchemaFee items.
	LockSchemaFeeAll(context.Context, *QueryAllLockSchemaFeeRequest) (*QueryAllLockSchemaFeeResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) NFTSchema(context.Context, *QueryGetNFTSchemaRequest) (*QueryGetNFTSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NFTSchema not implemented")
}
func (UnimplementedQueryServer) NFTSchemaAll(context.Context, *QueryAllNFTSchemaRequest) (*QueryAllNFTSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NFTSchemaAll not implemented")
}
func (UnimplementedQueryServer) NftData(context.Context, *QueryGetNftDataRequest) (*QueryGetNftDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftData not implemented")
}
func (UnimplementedQueryServer) NftDataAll(context.Context, *QueryAllNftDataRequest) (*QueryAllNftDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftDataAll not implemented")
}
func (UnimplementedQueryServer) ActionByRefId(context.Context, *QueryGetActionByRefIdRequest) (*QueryGetActionByRefIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionByRefId not implemented")
}
func (UnimplementedQueryServer) ActionByRefIdAll(context.Context, *QueryAllActionByRefIdRequest) (*QueryAllActionByRefIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionByRefIdAll not implemented")
}
func (UnimplementedQueryServer) Organization(context.Context, *QueryGetOrganizationRequest) (*QueryGetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Organization not implemented")
}
func (UnimplementedQueryServer) OrganizationAll(context.Context, *QueryAllOrganizationRequest) (*QueryAllOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrganizationAll not implemented")
}
func (UnimplementedQueryServer) NftCollection(context.Context, *QueryGetNftCollectionRequest) (*QueryGetNftCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftCollection not implemented")
}
func (UnimplementedQueryServer) NFTSchemaByContract(context.Context, *QueryGetNFTSchemaByContractRequest) (*QueryGetNFTSchemaByContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NFTSchemaByContract not implemented")
}
func (UnimplementedQueryServer) NFTSchemaByContractAll(context.Context, *QueryAllNFTSchemaByContractRequest) (*QueryAllNFTSchemaByContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NFTSchemaByContractAll not implemented")
}
func (UnimplementedQueryServer) NFTFeeConfig(context.Context, *QueryGetNFTFeeConfigRequest) (*QueryGetNFTFeeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NFTFeeConfig not implemented")
}
func (UnimplementedQueryServer) NFTFeeBalance(context.Context, *QueryGetNFTFeeBalanceRequest) (*QueryGetNFTFeeBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NFTFeeBalance not implemented")
}
func (UnimplementedQueryServer) MetadataCreator(context.Context, *QueryGetMetadataCreatorRequest) (*QueryGetMetadataCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetadataCreator not implemented")
}
func (UnimplementedQueryServer) MetadataCreatorAll(context.Context, *QueryAllMetadataCreatorRequest) (*QueryAllMetadataCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetadataCreatorAll not implemented")
}
func (UnimplementedQueryServer) ActionExecutor(context.Context, *QueryGetActionExecutorRequest) (*QueryGetActionExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionExecutor not implemented")
}
func (UnimplementedQueryServer) ActionExecutorAll(context.Context, *QueryAllActionExecutorRequest) (*QueryAllActionExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionExecutorAll not implemented")
}
func (UnimplementedQueryServer) SchemaAttribute(context.Context, *QueryGetSchemaAttributeRequest) (*QueryGetSchemaAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchemaAttribute not implemented")
}
func (UnimplementedQueryServer) SchemaAttributeAll(context.Context, *QueryAllSchemaAttributeRequest) (*QueryAllSchemaAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchemaAttributeAll not implemented")
}
func (UnimplementedQueryServer) ListAttributeBySchema(context.Context, *QueryListAttributeBySchemaRequest) (*QueryListAttributeBySchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttributeBySchema not implemented")
}
func (UnimplementedQueryServer) ActionOfSchema(context.Context, *QueryGetActionOfSchemaRequest) (*QueryGetActionOfSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionOfSchema not implemented")
}
func (UnimplementedQueryServer) ActionOfSchemaAll(context.Context, *QueryAllActionOfSchemaRequest) (*QueryAllActionOfSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionOfSchemaAll not implemented")
}
func (UnimplementedQueryServer) ExecutorOfSchema(context.Context, *QueryGetExecutorOfSchemaRequest) (*QueryGetExecutorOfSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutorOfSchema not implemented")
}
func (UnimplementedQueryServer) ExecutorOfSchemaAll(context.Context, *QueryAllExecutorOfSchemaRequest) (*QueryAllExecutorOfSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutorOfSchemaAll not implemented")
}
func (UnimplementedQueryServer) VirtualAction(context.Context, *QueryGetVirtualActionRequest) (*QueryGetVirtualActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualAction not implemented")
}
func (UnimplementedQueryServer) VirtualActionAll(context.Context, *QueryAllVirtualActionRequest) (*QueryAllVirtualActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualActionAll not implemented")
}
func (UnimplementedQueryServer) VirtualSchema(context.Context, *QueryGetVirtualSchemaRequest) (*QueryGetVirtualSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualSchema not implemented")
}
func (UnimplementedQueryServer) VirtualSchemaAll(context.Context, *QueryAllVirtualSchemaRequest) (*QueryAllVirtualSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualSchemaAll not implemented")
}
func (UnimplementedQueryServer) VirtualSchemaProposal(context.Context, *QueryGetVirtualSchemaProposalRequest) (*QueryGetVirtualSchemaProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualSchemaProposal not implemented")
}
func (UnimplementedQueryServer) VirtualSchemaProposalAll(context.Context, *QueryAllVirtualSchemaProposalRequest) (*QueryAllVirtualSchemaProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualSchemaProposalAll not implemented")
}
func (UnimplementedQueryServer) ListActiveProposal(context.Context, *QueryListActiveProposalRequest) (*QueryListActiveProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActiveProposal not implemented")
}
func (UnimplementedQueryServer) LockSchemaFee(context.Context, *QueryGetLockSchemaFeeRequest) (*QueryGetLockSchemaFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockSchemaFee not implemented")
}
func (UnimplementedQueryServer) LockSchemaFeeAll(context.Context, *QueryAllLockSchemaFeeRequest) (*QueryAllLockSchemaFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockSchemaFeeAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NFTSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNFTSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NFTSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NFTSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NFTSchema(ctx, req.(*QueryGetNFTSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NFTSchemaAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNFTSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NFTSchemaAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NFTSchemaAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NFTSchemaAll(ctx, req.(*QueryAllNFTSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NftData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftData(ctx, req.(*QueryGetNftDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftDataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNftDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftDataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NftDataAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftDataAll(ctx, req.(*QueryAllNftDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionByRefId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetActionByRefIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionByRefId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ActionByRefId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionByRefId(ctx, req.(*QueryGetActionByRefIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionByRefIdAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllActionByRefIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionByRefIdAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ActionByRefIdAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionByRefIdAll(ctx, req.(*QueryAllActionByRefIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Organization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Organization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Organization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Organization(ctx, req.(*QueryGetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrganizationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrganizationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OrganizationAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrganizationAll(ctx, req.(*QueryAllOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NftCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftCollection(ctx, req.(*QueryGetNftCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NFTSchemaByContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNFTSchemaByContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NFTSchemaByContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NFTSchemaByContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NFTSchemaByContract(ctx, req.(*QueryGetNFTSchemaByContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NFTSchemaByContractAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNFTSchemaByContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NFTSchemaByContractAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NFTSchemaByContractAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NFTSchemaByContractAll(ctx, req.(*QueryAllNFTSchemaByContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NFTFeeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNFTFeeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NFTFeeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NFTFeeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NFTFeeConfig(ctx, req.(*QueryGetNFTFeeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NFTFeeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNFTFeeBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NFTFeeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NFTFeeBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NFTFeeBalance(ctx, req.(*QueryGetNFTFeeBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MetadataCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMetadataCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MetadataCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MetadataCreator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MetadataCreator(ctx, req.(*QueryGetMetadataCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MetadataCreatorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMetadataCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MetadataCreatorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MetadataCreatorAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MetadataCreatorAll(ctx, req.(*QueryAllMetadataCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetActionExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ActionExecutor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionExecutor(ctx, req.(*QueryGetActionExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionExecutorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllActionExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionExecutorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ActionExecutorAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionExecutorAll(ctx, req.(*QueryAllActionExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SchemaAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSchemaAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SchemaAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SchemaAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SchemaAttribute(ctx, req.(*QueryGetSchemaAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SchemaAttributeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSchemaAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SchemaAttributeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SchemaAttributeAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SchemaAttributeAll(ctx, req.(*QueryAllSchemaAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListAttributeBySchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListAttributeBySchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListAttributeBySchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListAttributeBySchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListAttributeBySchema(ctx, req.(*QueryListAttributeBySchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionOfSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetActionOfSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionOfSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ActionOfSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionOfSchema(ctx, req.(*QueryGetActionOfSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionOfSchemaAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllActionOfSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionOfSchemaAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ActionOfSchemaAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionOfSchemaAll(ctx, req.(*QueryAllActionOfSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecutorOfSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExecutorOfSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExecutorOfSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ExecutorOfSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExecutorOfSchema(ctx, req.(*QueryGetExecutorOfSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecutorOfSchemaAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExecutorOfSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExecutorOfSchemaAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ExecutorOfSchemaAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExecutorOfSchemaAll(ctx, req.(*QueryAllExecutorOfSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VirtualAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVirtualActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VirtualAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_VirtualAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VirtualAction(ctx, req.(*QueryGetVirtualActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VirtualActionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVirtualActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VirtualActionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_VirtualActionAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VirtualActionAll(ctx, req.(*QueryAllVirtualActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VirtualSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVirtualSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VirtualSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_VirtualSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VirtualSchema(ctx, req.(*QueryGetVirtualSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VirtualSchemaAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVirtualSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VirtualSchemaAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_VirtualSchemaAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VirtualSchemaAll(ctx, req.(*QueryAllVirtualSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VirtualSchemaProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVirtualSchemaProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VirtualSchemaProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_VirtualSchemaProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VirtualSchemaProposal(ctx, req.(*QueryGetVirtualSchemaProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VirtualSchemaProposalAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVirtualSchemaProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VirtualSchemaProposalAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_VirtualSchemaProposalAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VirtualSchemaProposalAll(ctx, req.(*QueryAllVirtualSchemaProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListActiveProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListActiveProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListActiveProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListActiveProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListActiveProposal(ctx, req.(*QueryListActiveProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LockSchemaFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLockSchemaFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LockSchemaFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LockSchemaFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LockSchemaFee(ctx, req.(*QueryGetLockSchemaFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LockSchemaFeeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLockSchemaFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LockSchemaFeeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LockSchemaFeeAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LockSchemaFeeAll(ctx, req.(*QueryAllLockSchemaFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sixprotocol.nftmngr.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "NFTSchema",
			Handler:    _Query_NFTSchema_Handler,
		},
		{
			MethodName: "NFTSchemaAll",
			Handler:    _Query_NFTSchemaAll_Handler,
		},
		{
			MethodName: "NftData",
			Handler:    _Query_NftData_Handler,
		},
		{
			MethodName: "NftDataAll",
			Handler:    _Query_NftDataAll_Handler,
		},
		{
			MethodName: "ActionByRefId",
			Handler:    _Query_ActionByRefId_Handler,
		},
		{
			MethodName: "ActionByRefIdAll",
			Handler:    _Query_ActionByRefIdAll_Handler,
		},
		{
			MethodName: "Organization",
			Handler:    _Query_Organization_Handler,
		},
		{
			MethodName: "OrganizationAll",
			Handler:    _Query_OrganizationAll_Handler,
		},
		{
			MethodName: "NftCollection",
			Handler:    _Query_NftCollection_Handler,
		},
		{
			MethodName: "NFTSchemaByContract",
			Handler:    _Query_NFTSchemaByContract_Handler,
		},
		{
			MethodName: "NFTSchemaByContractAll",
			Handler:    _Query_NFTSchemaByContractAll_Handler,
		},
		{
			MethodName: "NFTFeeConfig",
			Handler:    _Query_NFTFeeConfig_Handler,
		},
		{
			MethodName: "NFTFeeBalance",
			Handler:    _Query_NFTFeeBalance_Handler,
		},
		{
			MethodName: "MetadataCreator",
			Handler:    _Query_MetadataCreator_Handler,
		},
		{
			MethodName: "MetadataCreatorAll",
			Handler:    _Query_MetadataCreatorAll_Handler,
		},
		{
			MethodName: "ActionExecutor",
			Handler:    _Query_ActionExecutor_Handler,
		},
		{
			MethodName: "ActionExecutorAll",
			Handler:    _Query_ActionExecutorAll_Handler,
		},
		{
			MethodName: "SchemaAttribute",
			Handler:    _Query_SchemaAttribute_Handler,
		},
		{
			MethodName: "SchemaAttributeAll",
			Handler:    _Query_SchemaAttributeAll_Handler,
		},
		{
			MethodName: "ListAttributeBySchema",
			Handler:    _Query_ListAttributeBySchema_Handler,
		},
		{
			MethodName: "ActionOfSchema",
			Handler:    _Query_ActionOfSchema_Handler,
		},
		{
			MethodName: "ActionOfSchemaAll",
			Handler:    _Query_ActionOfSchemaAll_Handler,
		},
		{
			MethodName: "ExecutorOfSchema",
			Handler:    _Query_ExecutorOfSchema_Handler,
		},
		{
			MethodName: "ExecutorOfSchemaAll",
			Handler:    _Query_ExecutorOfSchemaAll_Handler,
		},
		{
			MethodName: "VirtualAction",
			Handler:    _Query_VirtualAction_Handler,
		},
		{
			MethodName: "VirtualActionAll",
			Handler:    _Query_VirtualActionAll_Handler,
		},
		{
			MethodName: "VirtualSchema",
			Handler:    _Query_VirtualSchema_Handler,
		},
		{
			MethodName: "VirtualSchemaAll",
			Handler:    _Query_VirtualSchemaAll_Handler,
		},
		{
			MethodName: "VirtualSchemaProposal",
			Handler:    _Query_VirtualSchemaProposal_Handler,
		},
		{
			MethodName: "VirtualSchemaProposalAll",
			Handler:    _Query_VirtualSchemaProposalAll_Handler,
		},
		{
			MethodName: "ListActiveProposal",
			Handler:    _Query_ListActiveProposal_Handler,
		},
		{
			MethodName: "LockSchemaFee",
			Handler:    _Query_LockSchemaFee_Handler,
		},
		{
			MethodName: "LockSchemaFeeAll",
			Handler:    _Query_LockSchemaFeeAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sixprotocol/nftmngr/query.proto",
}
