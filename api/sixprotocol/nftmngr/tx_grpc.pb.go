// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sixprotocol/nftmngr/tx.proto

package nftmngr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName              = "/sixprotocol.nftmngr.Msg/UpdateParams"
	Msg_CreateNFTSchema_FullMethodName           = "/sixprotocol.nftmngr.Msg/CreateNFTSchema"
	Msg_CreateMetadata_FullMethodName            = "/sixprotocol.nftmngr.Msg/CreateMetadata"
	Msg_PerformActionByAdmin_FullMethodName      = "/sixprotocol.nftmngr.Msg/PerformActionByAdmin"
	Msg_AddAttribute_FullMethodName              = "/sixprotocol.nftmngr.Msg/AddAttribute"
	Msg_AddAction_FullMethodName                 = "/sixprotocol.nftmngr.Msg/AddAction"
	Msg_SetBaseUri_FullMethodName                = "/sixprotocol.nftmngr.Msg/SetBaseUri"
	Msg_ToggleAction_FullMethodName              = "/sixprotocol.nftmngr.Msg/ToggleAction"
	Msg_ChangeSchemaOwner_FullMethodName         = "/sixprotocol.nftmngr.Msg/ChangeSchemaOwner"
	Msg_ResyncAttributes_FullMethodName          = "/sixprotocol.nftmngr.Msg/ResyncAttributes"
	Msg_ShowAttributes_FullMethodName            = "/sixprotocol.nftmngr.Msg/ShowAttributes"
	Msg_SetFeeConfig_FullMethodName              = "/sixprotocol.nftmngr.Msg/SetFeeConfig"
	Msg_SetMintauth_FullMethodName               = "/sixprotocol.nftmngr.Msg/SetMintauth"
	Msg_ChangeOrgOwner_FullMethodName            = "/sixprotocol.nftmngr.Msg/ChangeOrgOwner"
	Msg_SetUriRetrievalMethod_FullMethodName     = "/sixprotocol.nftmngr.Msg/SetUriRetrievalMethod"
	Msg_SetOriginChain_FullMethodName            = "/sixprotocol.nftmngr.Msg/SetOriginChain"
	Msg_SetOriginContract_FullMethodName         = "/sixprotocol.nftmngr.Msg/SetOriginContract"
	Msg_SetAttributeOveriding_FullMethodName     = "/sixprotocol.nftmngr.Msg/SetAttributeOveriding"
	Msg_SetMetadataFormat_FullMethodName         = "/sixprotocol.nftmngr.Msg/SetMetadataFormat"
	Msg_CreateActionExecutor_FullMethodName      = "/sixprotocol.nftmngr.Msg/CreateActionExecutor"
	Msg_DeleteActionExecutor_FullMethodName      = "/sixprotocol.nftmngr.Msg/DeleteActionExecutor"
	Msg_UpdateSchemaAttribute_FullMethodName     = "/sixprotocol.nftmngr.Msg/UpdateSchemaAttribute"
	Msg_UpdateAction_FullMethodName              = "/sixprotocol.nftmngr.Msg/UpdateAction"
	Msg_ProposalVirtualSchema_FullMethodName     = "/sixprotocol.nftmngr.Msg/ProposalVirtualSchema"
	Msg_PerformVirtualAction_FullMethodName      = "/sixprotocol.nftmngr.Msg/PerformVirtualAction"
	Msg_VoteVirtualSchemaProposal_FullMethodName = "/sixprotocol.nftmngr.Msg/VoteVirtualSchemaProposal"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateNFTSchema(ctx context.Context, in *MsgCreateNFTSchema, opts ...grpc.CallOption) (*MsgCreateNFTSchemaResponse, error)
	CreateMetadata(ctx context.Context, in *MsgCreateMetadata, opts ...grpc.CallOption) (*MsgCreateMetadataResponse, error)
	PerformActionByAdmin(ctx context.Context, in *MsgPerformActionByAdmin, opts ...grpc.CallOption) (*MsgPerformActionByAdminResponse, error)
	AddAttribute(ctx context.Context, in *MsgAddAttribute, opts ...grpc.CallOption) (*MsgAddAttributeResponse, error)
	AddAction(ctx context.Context, in *MsgAddAction, opts ...grpc.CallOption) (*MsgAddActionResponse, error)
	SetBaseUri(ctx context.Context, in *MsgSetBaseUri, opts ...grpc.CallOption) (*MsgSetBaseUriResponse, error)
	ToggleAction(ctx context.Context, in *MsgToggleAction, opts ...grpc.CallOption) (*MsgToggleActionResponse, error)
	ChangeSchemaOwner(ctx context.Context, in *MsgChangeSchemaOwner, opts ...grpc.CallOption) (*MsgChangeSchemaOwnerResponse, error)
	ResyncAttributes(ctx context.Context, in *MsgResyncAttributes, opts ...grpc.CallOption) (*MsgResyncAttributesResponse, error)
	ShowAttributes(ctx context.Context, in *MsgShowAttributes, opts ...grpc.CallOption) (*MsgShowAttributesResponse, error)
	SetFeeConfig(ctx context.Context, in *MsgSetFeeConfig, opts ...grpc.CallOption) (*MsgSetFeeConfigResponse, error)
	SetMintauth(ctx context.Context, in *MsgSetMintauth, opts ...grpc.CallOption) (*MsgSetMintauthResponse, error)
	ChangeOrgOwner(ctx context.Context, in *MsgChangeOrgOwner, opts ...grpc.CallOption) (*MsgChangeOrgOwnerResponse, error)
	SetUriRetrievalMethod(ctx context.Context, in *MsgSetUriRetrievalMethod, opts ...grpc.CallOption) (*MsgSetUriRetrievalMethodResponse, error)
	SetOriginChain(ctx context.Context, in *MsgSetOriginChain, opts ...grpc.CallOption) (*MsgSetOriginChainResponse, error)
	SetOriginContract(ctx context.Context, in *MsgSetOriginContract, opts ...grpc.CallOption) (*MsgSetOriginContractResponse, error)
	SetAttributeOveriding(ctx context.Context, in *MsgSetAttributeOveriding, opts ...grpc.CallOption) (*MsgSetAttributeOveridingResponse, error)
	SetMetadataFormat(ctx context.Context, in *MsgSetMetadataFormat, opts ...grpc.CallOption) (*MsgSetMetadataFormatResponse, error)
	CreateActionExecutor(ctx context.Context, in *MsgCreateActionExecutor, opts ...grpc.CallOption) (*MsgCreateActionExecutorResponse, error)
	DeleteActionExecutor(ctx context.Context, in *MsgDeleteActionExecutor, opts ...grpc.CallOption) (*MsgDeleteActionExecutorResponse, error)
	UpdateSchemaAttribute(ctx context.Context, in *MsgUpdateSchemaAttribute, opts ...grpc.CallOption) (*MsgUpdateSchemaAttributeResponse, error)
	UpdateAction(ctx context.Context, in *MsgUpdateAction, opts ...grpc.CallOption) (*MsgUpdateActionResponse, error)
	ProposalVirtualSchema(ctx context.Context, in *MsgProposalVirtualSchema, opts ...grpc.CallOption) (*MsgProposalVirtualSchemaResponse, error)
	PerformVirtualAction(ctx context.Context, in *MsgPerformVirtualAction, opts ...grpc.CallOption) (*MsgPerformVirtualActionResponse, error)
	VoteVirtualSchemaProposal(ctx context.Context, in *MsgVoteVirtualSchemaProposal, opts ...grpc.CallOption) (*MsgVoteVirtualSchemaProposalResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateNFTSchema(ctx context.Context, in *MsgCreateNFTSchema, opts ...grpc.CallOption) (*MsgCreateNFTSchemaResponse, error) {
	out := new(MsgCreateNFTSchemaResponse)
	err := c.cc.Invoke(ctx, Msg_CreateNFTSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMetadata(ctx context.Context, in *MsgCreateMetadata, opts ...grpc.CallOption) (*MsgCreateMetadataResponse, error) {
	out := new(MsgCreateMetadataResponse)
	err := c.cc.Invoke(ctx, Msg_CreateMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PerformActionByAdmin(ctx context.Context, in *MsgPerformActionByAdmin, opts ...grpc.CallOption) (*MsgPerformActionByAdminResponse, error) {
	out := new(MsgPerformActionByAdminResponse)
	err := c.cc.Invoke(ctx, Msg_PerformActionByAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddAttribute(ctx context.Context, in *MsgAddAttribute, opts ...grpc.CallOption) (*MsgAddAttributeResponse, error) {
	out := new(MsgAddAttributeResponse)
	err := c.cc.Invoke(ctx, Msg_AddAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddAction(ctx context.Context, in *MsgAddAction, opts ...grpc.CallOption) (*MsgAddActionResponse, error) {
	out := new(MsgAddActionResponse)
	err := c.cc.Invoke(ctx, Msg_AddAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetBaseUri(ctx context.Context, in *MsgSetBaseUri, opts ...grpc.CallOption) (*MsgSetBaseUriResponse, error) {
	out := new(MsgSetBaseUriResponse)
	err := c.cc.Invoke(ctx, Msg_SetBaseUri_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ToggleAction(ctx context.Context, in *MsgToggleAction, opts ...grpc.CallOption) (*MsgToggleActionResponse, error) {
	out := new(MsgToggleActionResponse)
	err := c.cc.Invoke(ctx, Msg_ToggleAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeSchemaOwner(ctx context.Context, in *MsgChangeSchemaOwner, opts ...grpc.CallOption) (*MsgChangeSchemaOwnerResponse, error) {
	out := new(MsgChangeSchemaOwnerResponse)
	err := c.cc.Invoke(ctx, Msg_ChangeSchemaOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ResyncAttributes(ctx context.Context, in *MsgResyncAttributes, opts ...grpc.CallOption) (*MsgResyncAttributesResponse, error) {
	out := new(MsgResyncAttributesResponse)
	err := c.cc.Invoke(ctx, Msg_ResyncAttributes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ShowAttributes(ctx context.Context, in *MsgShowAttributes, opts ...grpc.CallOption) (*MsgShowAttributesResponse, error) {
	out := new(MsgShowAttributesResponse)
	err := c.cc.Invoke(ctx, Msg_ShowAttributes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetFeeConfig(ctx context.Context, in *MsgSetFeeConfig, opts ...grpc.CallOption) (*MsgSetFeeConfigResponse, error) {
	out := new(MsgSetFeeConfigResponse)
	err := c.cc.Invoke(ctx, Msg_SetFeeConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMintauth(ctx context.Context, in *MsgSetMintauth, opts ...grpc.CallOption) (*MsgSetMintauthResponse, error) {
	out := new(MsgSetMintauthResponse)
	err := c.cc.Invoke(ctx, Msg_SetMintauth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeOrgOwner(ctx context.Context, in *MsgChangeOrgOwner, opts ...grpc.CallOption) (*MsgChangeOrgOwnerResponse, error) {
	out := new(MsgChangeOrgOwnerResponse)
	err := c.cc.Invoke(ctx, Msg_ChangeOrgOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetUriRetrievalMethod(ctx context.Context, in *MsgSetUriRetrievalMethod, opts ...grpc.CallOption) (*MsgSetUriRetrievalMethodResponse, error) {
	out := new(MsgSetUriRetrievalMethodResponse)
	err := c.cc.Invoke(ctx, Msg_SetUriRetrievalMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetOriginChain(ctx context.Context, in *MsgSetOriginChain, opts ...grpc.CallOption) (*MsgSetOriginChainResponse, error) {
	out := new(MsgSetOriginChainResponse)
	err := c.cc.Invoke(ctx, Msg_SetOriginChain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetOriginContract(ctx context.Context, in *MsgSetOriginContract, opts ...grpc.CallOption) (*MsgSetOriginContractResponse, error) {
	out := new(MsgSetOriginContractResponse)
	err := c.cc.Invoke(ctx, Msg_SetOriginContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetAttributeOveriding(ctx context.Context, in *MsgSetAttributeOveriding, opts ...grpc.CallOption) (*MsgSetAttributeOveridingResponse, error) {
	out := new(MsgSetAttributeOveridingResponse)
	err := c.cc.Invoke(ctx, Msg_SetAttributeOveriding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMetadataFormat(ctx context.Context, in *MsgSetMetadataFormat, opts ...grpc.CallOption) (*MsgSetMetadataFormatResponse, error) {
	out := new(MsgSetMetadataFormatResponse)
	err := c.cc.Invoke(ctx, Msg_SetMetadataFormat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateActionExecutor(ctx context.Context, in *MsgCreateActionExecutor, opts ...grpc.CallOption) (*MsgCreateActionExecutorResponse, error) {
	out := new(MsgCreateActionExecutorResponse)
	err := c.cc.Invoke(ctx, Msg_CreateActionExecutor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteActionExecutor(ctx context.Context, in *MsgDeleteActionExecutor, opts ...grpc.CallOption) (*MsgDeleteActionExecutorResponse, error) {
	out := new(MsgDeleteActionExecutorResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteActionExecutor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSchemaAttribute(ctx context.Context, in *MsgUpdateSchemaAttribute, opts ...grpc.CallOption) (*MsgUpdateSchemaAttributeResponse, error) {
	out := new(MsgUpdateSchemaAttributeResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateSchemaAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAction(ctx context.Context, in *MsgUpdateAction, opts ...grpc.CallOption) (*MsgUpdateActionResponse, error) {
	out := new(MsgUpdateActionResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProposalVirtualSchema(ctx context.Context, in *MsgProposalVirtualSchema, opts ...grpc.CallOption) (*MsgProposalVirtualSchemaResponse, error) {
	out := new(MsgProposalVirtualSchemaResponse)
	err := c.cc.Invoke(ctx, Msg_ProposalVirtualSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PerformVirtualAction(ctx context.Context, in *MsgPerformVirtualAction, opts ...grpc.CallOption) (*MsgPerformVirtualActionResponse, error) {
	out := new(MsgPerformVirtualActionResponse)
	err := c.cc.Invoke(ctx, Msg_PerformVirtualAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteVirtualSchemaProposal(ctx context.Context, in *MsgVoteVirtualSchemaProposal, opts ...grpc.CallOption) (*MsgVoteVirtualSchemaProposalResponse, error) {
	out := new(MsgVoteVirtualSchemaProposalResponse)
	err := c.cc.Invoke(ctx, Msg_VoteVirtualSchemaProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateNFTSchema(context.Context, *MsgCreateNFTSchema) (*MsgCreateNFTSchemaResponse, error)
	CreateMetadata(context.Context, *MsgCreateMetadata) (*MsgCreateMetadataResponse, error)
	PerformActionByAdmin(context.Context, *MsgPerformActionByAdmin) (*MsgPerformActionByAdminResponse, error)
	AddAttribute(context.Context, *MsgAddAttribute) (*MsgAddAttributeResponse, error)
	AddAction(context.Context, *MsgAddAction) (*MsgAddActionResponse, error)
	SetBaseUri(context.Context, *MsgSetBaseUri) (*MsgSetBaseUriResponse, error)
	ToggleAction(context.Context, *MsgToggleAction) (*MsgToggleActionResponse, error)
	ChangeSchemaOwner(context.Context, *MsgChangeSchemaOwner) (*MsgChangeSchemaOwnerResponse, error)
	ResyncAttributes(context.Context, *MsgResyncAttributes) (*MsgResyncAttributesResponse, error)
	ShowAttributes(context.Context, *MsgShowAttributes) (*MsgShowAttributesResponse, error)
	SetFeeConfig(context.Context, *MsgSetFeeConfig) (*MsgSetFeeConfigResponse, error)
	SetMintauth(context.Context, *MsgSetMintauth) (*MsgSetMintauthResponse, error)
	ChangeOrgOwner(context.Context, *MsgChangeOrgOwner) (*MsgChangeOrgOwnerResponse, error)
	SetUriRetrievalMethod(context.Context, *MsgSetUriRetrievalMethod) (*MsgSetUriRetrievalMethodResponse, error)
	SetOriginChain(context.Context, *MsgSetOriginChain) (*MsgSetOriginChainResponse, error)
	SetOriginContract(context.Context, *MsgSetOriginContract) (*MsgSetOriginContractResponse, error)
	SetAttributeOveriding(context.Context, *MsgSetAttributeOveriding) (*MsgSetAttributeOveridingResponse, error)
	SetMetadataFormat(context.Context, *MsgSetMetadataFormat) (*MsgSetMetadataFormatResponse, error)
	CreateActionExecutor(context.Context, *MsgCreateActionExecutor) (*MsgCreateActionExecutorResponse, error)
	DeleteActionExecutor(context.Context, *MsgDeleteActionExecutor) (*MsgDeleteActionExecutorResponse, error)
	UpdateSchemaAttribute(context.Context, *MsgUpdateSchemaAttribute) (*MsgUpdateSchemaAttributeResponse, error)
	UpdateAction(context.Context, *MsgUpdateAction) (*MsgUpdateActionResponse, error)
	ProposalVirtualSchema(context.Context, *MsgProposalVirtualSchema) (*MsgProposalVirtualSchemaResponse, error)
	PerformVirtualAction(context.Context, *MsgPerformVirtualAction) (*MsgPerformVirtualActionResponse, error)
	VoteVirtualSchemaProposal(context.Context, *MsgVoteVirtualSchemaProposal) (*MsgVoteVirtualSchemaProposalResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateNFTSchema(context.Context, *MsgCreateNFTSchema) (*MsgCreateNFTSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNFTSchema not implemented")
}
func (UnimplementedMsgServer) CreateMetadata(context.Context, *MsgCreateMetadata) (*MsgCreateMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetadata not implemented")
}
func (UnimplementedMsgServer) PerformActionByAdmin(context.Context, *MsgPerformActionByAdmin) (*MsgPerformActionByAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformActionByAdmin not implemented")
}
func (UnimplementedMsgServer) AddAttribute(context.Context, *MsgAddAttribute) (*MsgAddAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttribute not implemented")
}
func (UnimplementedMsgServer) AddAction(context.Context, *MsgAddAction) (*MsgAddActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAction not implemented")
}
func (UnimplementedMsgServer) SetBaseUri(context.Context, *MsgSetBaseUri) (*MsgSetBaseUriResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBaseUri not implemented")
}
func (UnimplementedMsgServer) ToggleAction(context.Context, *MsgToggleAction) (*MsgToggleActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleAction not implemented")
}
func (UnimplementedMsgServer) ChangeSchemaOwner(context.Context, *MsgChangeSchemaOwner) (*MsgChangeSchemaOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSchemaOwner not implemented")
}
func (UnimplementedMsgServer) ResyncAttributes(context.Context, *MsgResyncAttributes) (*MsgResyncAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResyncAttributes not implemented")
}
func (UnimplementedMsgServer) ShowAttributes(context.Context, *MsgShowAttributes) (*MsgShowAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAttributes not implemented")
}
func (UnimplementedMsgServer) SetFeeConfig(context.Context, *MsgSetFeeConfig) (*MsgSetFeeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFeeConfig not implemented")
}
func (UnimplementedMsgServer) SetMintauth(context.Context, *MsgSetMintauth) (*MsgSetMintauthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMintauth not implemented")
}
func (UnimplementedMsgServer) ChangeOrgOwner(context.Context, *MsgChangeOrgOwner) (*MsgChangeOrgOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeOrgOwner not implemented")
}
func (UnimplementedMsgServer) SetUriRetrievalMethod(context.Context, *MsgSetUriRetrievalMethod) (*MsgSetUriRetrievalMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUriRetrievalMethod not implemented")
}
func (UnimplementedMsgServer) SetOriginChain(context.Context, *MsgSetOriginChain) (*MsgSetOriginChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOriginChain not implemented")
}
func (UnimplementedMsgServer) SetOriginContract(context.Context, *MsgSetOriginContract) (*MsgSetOriginContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOriginContract not implemented")
}
func (UnimplementedMsgServer) SetAttributeOveriding(context.Context, *MsgSetAttributeOveriding) (*MsgSetAttributeOveridingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAttributeOveriding not implemented")
}
func (UnimplementedMsgServer) SetMetadataFormat(context.Context, *MsgSetMetadataFormat) (*MsgSetMetadataFormatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMetadataFormat not implemented")
}
func (UnimplementedMsgServer) CreateActionExecutor(context.Context, *MsgCreateActionExecutor) (*MsgCreateActionExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActionExecutor not implemented")
}
func (UnimplementedMsgServer) DeleteActionExecutor(context.Context, *MsgDeleteActionExecutor) (*MsgDeleteActionExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActionExecutor not implemented")
}
func (UnimplementedMsgServer) UpdateSchemaAttribute(context.Context, *MsgUpdateSchemaAttribute) (*MsgUpdateSchemaAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchemaAttribute not implemented")
}
func (UnimplementedMsgServer) UpdateAction(context.Context, *MsgUpdateAction) (*MsgUpdateActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAction not implemented")
}
func (UnimplementedMsgServer) ProposalVirtualSchema(context.Context, *MsgProposalVirtualSchema) (*MsgProposalVirtualSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalVirtualSchema not implemented")
}
func (UnimplementedMsgServer) PerformVirtualAction(context.Context, *MsgPerformVirtualAction) (*MsgPerformVirtualActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformVirtualAction not implemented")
}
func (UnimplementedMsgServer) VoteVirtualSchemaProposal(context.Context, *MsgVoteVirtualSchemaProposal) (*MsgVoteVirtualSchemaProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteVirtualSchemaProposal not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateNFTSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateNFTSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateNFTSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateNFTSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateNFTSchema(ctx, req.(*MsgCreateNFTSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMetadata(ctx, req.(*MsgCreateMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PerformActionByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPerformActionByAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PerformActionByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PerformActionByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PerformActionByAdmin(ctx, req.(*MsgPerformActionByAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAttribute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAttribute(ctx, req.(*MsgAddAttribute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAction(ctx, req.(*MsgAddAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetBaseUri_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetBaseUri)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetBaseUri(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetBaseUri_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetBaseUri(ctx, req.(*MsgSetBaseUri))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ToggleAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgToggleAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ToggleAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ToggleAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ToggleAction(ctx, req.(*MsgToggleAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeSchemaOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeSchemaOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeSchemaOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChangeSchemaOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeSchemaOwner(ctx, req.(*MsgChangeSchemaOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ResyncAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgResyncAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ResyncAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ResyncAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ResyncAttributes(ctx, req.(*MsgResyncAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ShowAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgShowAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ShowAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ShowAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ShowAttributes(ctx, req.(*MsgShowAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetFeeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetFeeConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetFeeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetFeeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetFeeConfig(ctx, req.(*MsgSetFeeConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMintauth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMintauth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMintauth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetMintauth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMintauth(ctx, req.(*MsgSetMintauth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeOrgOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeOrgOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeOrgOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChangeOrgOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeOrgOwner(ctx, req.(*MsgChangeOrgOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetUriRetrievalMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetUriRetrievalMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetUriRetrievalMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetUriRetrievalMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetUriRetrievalMethod(ctx, req.(*MsgSetUriRetrievalMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetOriginChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetOriginChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetOriginChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetOriginChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetOriginChain(ctx, req.(*MsgSetOriginChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetOriginContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetOriginContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetOriginContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetOriginContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetOriginContract(ctx, req.(*MsgSetOriginContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetAttributeOveriding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetAttributeOveriding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetAttributeOveriding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetAttributeOveriding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetAttributeOveriding(ctx, req.(*MsgSetAttributeOveriding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMetadataFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMetadataFormat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMetadataFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetMetadataFormat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMetadataFormat(ctx, req.(*MsgSetMetadataFormat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateActionExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateActionExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateActionExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateActionExecutor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateActionExecutor(ctx, req.(*MsgCreateActionExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteActionExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteActionExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteActionExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteActionExecutor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteActionExecutor(ctx, req.(*MsgDeleteActionExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSchemaAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSchemaAttribute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSchemaAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateSchemaAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSchemaAttribute(ctx, req.(*MsgUpdateSchemaAttribute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAction(ctx, req.(*MsgUpdateAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProposalVirtualSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProposalVirtualSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProposalVirtualSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProposalVirtualSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProposalVirtualSchema(ctx, req.(*MsgProposalVirtualSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PerformVirtualAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPerformVirtualAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PerformVirtualAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PerformVirtualAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PerformVirtualAction(ctx, req.(*MsgPerformVirtualAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteVirtualSchemaProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteVirtualSchemaProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteVirtualSchemaProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_VoteVirtualSchemaProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteVirtualSchemaProposal(ctx, req.(*MsgVoteVirtualSchemaProposal))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sixprotocol.nftmngr.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateNFTSchema",
			Handler:    _Msg_CreateNFTSchema_Handler,
		},
		{
			MethodName: "CreateMetadata",
			Handler:    _Msg_CreateMetadata_Handler,
		},
		{
			MethodName: "PerformActionByAdmin",
			Handler:    _Msg_PerformActionByAdmin_Handler,
		},
		{
			MethodName: "AddAttribute",
			Handler:    _Msg_AddAttribute_Handler,
		},
		{
			MethodName: "AddAction",
			Handler:    _Msg_AddAction_Handler,
		},
		{
			MethodName: "SetBaseUri",
			Handler:    _Msg_SetBaseUri_Handler,
		},
		{
			MethodName: "ToggleAction",
			Handler:    _Msg_ToggleAction_Handler,
		},
		{
			MethodName: "ChangeSchemaOwner",
			Handler:    _Msg_ChangeSchemaOwner_Handler,
		},
		{
			MethodName: "ResyncAttributes",
			Handler:    _Msg_ResyncAttributes_Handler,
		},
		{
			MethodName: "ShowAttributes",
			Handler:    _Msg_ShowAttributes_Handler,
		},
		{
			MethodName: "SetFeeConfig",
			Handler:    _Msg_SetFeeConfig_Handler,
		},
		{
			MethodName: "SetMintauth",
			Handler:    _Msg_SetMintauth_Handler,
		},
		{
			MethodName: "ChangeOrgOwner",
			Handler:    _Msg_ChangeOrgOwner_Handler,
		},
		{
			MethodName: "SetUriRetrievalMethod",
			Handler:    _Msg_SetUriRetrievalMethod_Handler,
		},
		{
			MethodName: "SetOriginChain",
			Handler:    _Msg_SetOriginChain_Handler,
		},
		{
			MethodName: "SetOriginContract",
			Handler:    _Msg_SetOriginContract_Handler,
		},
		{
			MethodName: "SetAttributeOveriding",
			Handler:    _Msg_SetAttributeOveriding_Handler,
		},
		{
			MethodName: "SetMetadataFormat",
			Handler:    _Msg_SetMetadataFormat_Handler,
		},
		{
			MethodName: "CreateActionExecutor",
			Handler:    _Msg_CreateActionExecutor_Handler,
		},
		{
			MethodName: "DeleteActionExecutor",
			Handler:    _Msg_DeleteActionExecutor_Handler,
		},
		{
			MethodName: "UpdateSchemaAttribute",
			Handler:    _Msg_UpdateSchemaAttribute_Handler,
		},
		{
			MethodName: "UpdateAction",
			Handler:    _Msg_UpdateAction_Handler,
		},
		{
			MethodName: "ProposalVirtualSchema",
			Handler:    _Msg_ProposalVirtualSchema_Handler,
		},
		{
			MethodName: "PerformVirtualAction",
			Handler:    _Msg_PerformVirtualAction_Handler,
		},
		{
			MethodName: "VoteVirtualSchemaProposal",
			Handler:    _Msg_VoteVirtualSchemaProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sixprotocol/nftmngr/tx.proto",
}
