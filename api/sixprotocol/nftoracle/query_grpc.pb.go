// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sixprotocol/nftoracle/query.proto

package nftoracle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                    = "/sixprotocol.nftoracle.Query/Params"
	Query_MintRequest_FullMethodName               = "/sixprotocol.nftoracle.Query/MintRequest"
	Query_MintRequestAll_FullMethodName            = "/sixprotocol.nftoracle.Query/MintRequestAll"
	Query_ActionOracleRequest_FullMethodName       = "/sixprotocol.nftoracle.Query/ActionOracleRequest"
	Query_ActionRequestAll_FullMethodName          = "/sixprotocol.nftoracle.Query/ActionRequestAll"
	Query_CollectionOwnerRequest_FullMethodName    = "/sixprotocol.nftoracle.Query/CollectionOwnerRequest"
	Query_CollectionOwnerRequestAll_FullMethodName = "/sixprotocol.nftoracle.Query/CollectionOwnerRequestAll"
	Query_OracleConfig_FullMethodName              = "/sixprotocol.nftoracle.Query/OracleConfig"
	Query_ActionSigner_FullMethodName              = "/sixprotocol.nftoracle.Query/ActionSigner"
	Query_ActionSignerAll_FullMethodName           = "/sixprotocol.nftoracle.Query/ActionSignerAll"
	Query_BindedSigner_FullMethodName              = "/sixprotocol.nftoracle.Query/BindedSigner"
	Query_ActionSignerConfig_FullMethodName        = "/sixprotocol.nftoracle.Query/ActionSignerConfig"
	Query_ActionSignerConfigAll_FullMethodName     = "/sixprotocol.nftoracle.Query/ActionSignerConfigAll"
	Query_SyncActionSigner_FullMethodName          = "/sixprotocol.nftoracle.Query/SyncActionSigner"
	Query_SyncActionSignerAll_FullMethodName       = "/sixprotocol.nftoracle.Query/SyncActionSignerAll"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a MintRequest by id.
	MintRequest(ctx context.Context, in *QueryGetMintRequestRequest, opts ...grpc.CallOption) (*QueryGetMintRequestResponse, error)
	// Queries a list of MintRequest items.
	MintRequestAll(ctx context.Context, in *QueryAllMintRequestRequest, opts ...grpc.CallOption) (*QueryAllMintRequestResponse, error)
	// Queries a ActionRequest by id.
	ActionOracleRequest(ctx context.Context, in *QueryGetActionRequestRequest, opts ...grpc.CallOption) (*QueryGetActionRequestResponse, error)
	// Queries a list of ActionRequest items.
	ActionRequestAll(ctx context.Context, in *QueryAllActionRequestRequest, opts ...grpc.CallOption) (*QueryAllActionRequestResponse, error)
	// Queries a CollectionOwnerRequest by id.
	CollectionOwnerRequest(ctx context.Context, in *QueryGetCollectionOwnerRequestRequest, opts ...grpc.CallOption) (*QueryGetCollectionOwnerRequestResponse, error)
	// Queries a list of CollectionOwnerRequest items.
	CollectionOwnerRequestAll(ctx context.Context, in *QueryAllCollectionOwnerRequestRequest, opts ...grpc.CallOption) (*QueryAllCollectionOwnerRequestResponse, error)
	// Queries a OracleConfig by index.
	OracleConfig(ctx context.Context, in *QueryGetOracleConfigRequest, opts ...grpc.CallOption) (*QueryGetOracleConfigResponse, error)
	// Queries a ActionSigner by index.
	ActionSigner(ctx context.Context, in *QueryGetActionSignerRequest, opts ...grpc.CallOption) (*QueryGetActionSignerResponse, error)
	// Queries a list of ActionSigner items.
	ActionSignerAll(ctx context.Context, in *QueryAllActionSignerRequest, opts ...grpc.CallOption) (*QueryAllActionSignerResponse, error)
	// Queries a BindedSigner by index.
	BindedSigner(ctx context.Context, in *QueryGetBindedSignerRequest, opts ...grpc.CallOption) (*QueryGetBindedSignerResponse, error)
	// Queries a ActionSignerConfig by index.
	ActionSignerConfig(ctx context.Context, in *QueryGetActionSignerConfigRequest, opts ...grpc.CallOption) (*QueryGetActionSignerConfigResponse, error)
	// Queries a list of ActionSignerConfig items.
	ActionSignerConfigAll(ctx context.Context, in *QueryAllActionSignerConfigRequest, opts ...grpc.CallOption) (*QueryAllActionSignerConfigResponse, error)
	// Queries a SyncActionSigner by id.
	SyncActionSigner(ctx context.Context, in *QueryGetSyncActionSignerRequest, opts ...grpc.CallOption) (*QueryGetSyncActionSignerResponse, error)
	// Queries a list of SyncActionSigner items.
	SyncActionSignerAll(ctx context.Context, in *QueryAllSyncActionSignerRequest, opts ...grpc.CallOption) (*QueryAllSyncActionSignerResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MintRequest(ctx context.Context, in *QueryGetMintRequestRequest, opts ...grpc.CallOption) (*QueryGetMintRequestResponse, error) {
	out := new(QueryGetMintRequestResponse)
	err := c.cc.Invoke(ctx, Query_MintRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MintRequestAll(ctx context.Context, in *QueryAllMintRequestRequest, opts ...grpc.CallOption) (*QueryAllMintRequestResponse, error) {
	out := new(QueryAllMintRequestResponse)
	err := c.cc.Invoke(ctx, Query_MintRequestAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionOracleRequest(ctx context.Context, in *QueryGetActionRequestRequest, opts ...grpc.CallOption) (*QueryGetActionRequestResponse, error) {
	out := new(QueryGetActionRequestResponse)
	err := c.cc.Invoke(ctx, Query_ActionOracleRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionRequestAll(ctx context.Context, in *QueryAllActionRequestRequest, opts ...grpc.CallOption) (*QueryAllActionRequestResponse, error) {
	out := new(QueryAllActionRequestResponse)
	err := c.cc.Invoke(ctx, Query_ActionRequestAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollectionOwnerRequest(ctx context.Context, in *QueryGetCollectionOwnerRequestRequest, opts ...grpc.CallOption) (*QueryGetCollectionOwnerRequestResponse, error) {
	out := new(QueryGetCollectionOwnerRequestResponse)
	err := c.cc.Invoke(ctx, Query_CollectionOwnerRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollectionOwnerRequestAll(ctx context.Context, in *QueryAllCollectionOwnerRequestRequest, opts ...grpc.CallOption) (*QueryAllCollectionOwnerRequestResponse, error) {
	out := new(QueryAllCollectionOwnerRequestResponse)
	err := c.cc.Invoke(ctx, Query_CollectionOwnerRequestAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleConfig(ctx context.Context, in *QueryGetOracleConfigRequest, opts ...grpc.CallOption) (*QueryGetOracleConfigResponse, error) {
	out := new(QueryGetOracleConfigResponse)
	err := c.cc.Invoke(ctx, Query_OracleConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionSigner(ctx context.Context, in *QueryGetActionSignerRequest, opts ...grpc.CallOption) (*QueryGetActionSignerResponse, error) {
	out := new(QueryGetActionSignerResponse)
	err := c.cc.Invoke(ctx, Query_ActionSigner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionSignerAll(ctx context.Context, in *QueryAllActionSignerRequest, opts ...grpc.CallOption) (*QueryAllActionSignerResponse, error) {
	out := new(QueryAllActionSignerResponse)
	err := c.cc.Invoke(ctx, Query_ActionSignerAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BindedSigner(ctx context.Context, in *QueryGetBindedSignerRequest, opts ...grpc.CallOption) (*QueryGetBindedSignerResponse, error) {
	out := new(QueryGetBindedSignerResponse)
	err := c.cc.Invoke(ctx, Query_BindedSigner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionSignerConfig(ctx context.Context, in *QueryGetActionSignerConfigRequest, opts ...grpc.CallOption) (*QueryGetActionSignerConfigResponse, error) {
	out := new(QueryGetActionSignerConfigResponse)
	err := c.cc.Invoke(ctx, Query_ActionSignerConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionSignerConfigAll(ctx context.Context, in *QueryAllActionSignerConfigRequest, opts ...grpc.CallOption) (*QueryAllActionSignerConfigResponse, error) {
	out := new(QueryAllActionSignerConfigResponse)
	err := c.cc.Invoke(ctx, Query_ActionSignerConfigAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SyncActionSigner(ctx context.Context, in *QueryGetSyncActionSignerRequest, opts ...grpc.CallOption) (*QueryGetSyncActionSignerResponse, error) {
	out := new(QueryGetSyncActionSignerResponse)
	err := c.cc.Invoke(ctx, Query_SyncActionSigner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SyncActionSignerAll(ctx context.Context, in *QueryAllSyncActionSignerRequest, opts ...grpc.CallOption) (*QueryAllSyncActionSignerResponse, error) {
	out := new(QueryAllSyncActionSignerResponse)
	err := c.cc.Invoke(ctx, Query_SyncActionSignerAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a MintRequest by id.
	MintRequest(context.Context, *QueryGetMintRequestRequest) (*QueryGetMintRequestResponse, error)
	// Queries a list of MintRequest items.
	MintRequestAll(context.Context, *QueryAllMintRequestRequest) (*QueryAllMintRequestResponse, error)
	// Queries a ActionRequest by id.
	ActionOracleRequest(context.Context, *QueryGetActionRequestRequest) (*QueryGetActionRequestResponse, error)
	// Queries a list of ActionRequest items.
	ActionRequestAll(context.Context, *QueryAllActionRequestRequest) (*QueryAllActionRequestResponse, error)
	// Queries a CollectionOwnerRequest by id.
	CollectionOwnerRequest(context.Context, *QueryGetCollectionOwnerRequestRequest) (*QueryGetCollectionOwnerRequestResponse, error)
	// Queries a list of CollectionOwnerRequest items.
	CollectionOwnerRequestAll(context.Context, *QueryAllCollectionOwnerRequestRequest) (*QueryAllCollectionOwnerRequestResponse, error)
	// Queries a OracleConfig by index.
	OracleConfig(context.Context, *QueryGetOracleConfigRequest) (*QueryGetOracleConfigResponse, error)
	// Queries a ActionSigner by index.
	ActionSigner(context.Context, *QueryGetActionSignerRequest) (*QueryGetActionSignerResponse, error)
	// Queries a list of ActionSigner items.
	ActionSignerAll(context.Context, *QueryAllActionSignerRequest) (*QueryAllActionSignerResponse, error)
	// Queries a BindedSigner by index.
	BindedSigner(context.Context, *QueryGetBindedSignerRequest) (*QueryGetBindedSignerResponse, error)
	// Queries a ActionSignerConfig by index.
	ActionSignerConfig(context.Context, *QueryGetActionSignerConfigRequest) (*QueryGetActionSignerConfigResponse, error)
	// Queries a list of ActionSignerConfig items.
	ActionSignerConfigAll(context.Context, *QueryAllActionSignerConfigRequest) (*QueryAllActionSignerConfigResponse, error)
	// Queries a SyncActionSigner by id.
	SyncActionSigner(context.Context, *QueryGetSyncActionSignerRequest) (*QueryGetSyncActionSignerResponse, error)
	// Queries a list of SyncActionSigner items.
	SyncActionSignerAll(context.Context, *QueryAllSyncActionSignerRequest) (*QueryAllSyncActionSignerResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) MintRequest(context.Context, *QueryGetMintRequestRequest) (*QueryGetMintRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintRequest not implemented")
}
func (UnimplementedQueryServer) MintRequestAll(context.Context, *QueryAllMintRequestRequest) (*QueryAllMintRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintRequestAll not implemented")
}
func (UnimplementedQueryServer) ActionOracleRequest(context.Context, *QueryGetActionRequestRequest) (*QueryGetActionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionOracleRequest not implemented")
}
func (UnimplementedQueryServer) ActionRequestAll(context.Context, *QueryAllActionRequestRequest) (*QueryAllActionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionRequestAll not implemented")
}
func (UnimplementedQueryServer) CollectionOwnerRequest(context.Context, *QueryGetCollectionOwnerRequestRequest) (*QueryGetCollectionOwnerRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionOwnerRequest not implemented")
}
func (UnimplementedQueryServer) CollectionOwnerRequestAll(context.Context, *QueryAllCollectionOwnerRequestRequest) (*QueryAllCollectionOwnerRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionOwnerRequestAll not implemented")
}
func (UnimplementedQueryServer) OracleConfig(context.Context, *QueryGetOracleConfigRequest) (*QueryGetOracleConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleConfig not implemented")
}
func (UnimplementedQueryServer) ActionSigner(context.Context, *QueryGetActionSignerRequest) (*QueryGetActionSignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionSigner not implemented")
}
func (UnimplementedQueryServer) ActionSignerAll(context.Context, *QueryAllActionSignerRequest) (*QueryAllActionSignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionSignerAll not implemented")
}
func (UnimplementedQueryServer) BindedSigner(context.Context, *QueryGetBindedSignerRequest) (*QueryGetBindedSignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindedSigner not implemented")
}
func (UnimplementedQueryServer) ActionSignerConfig(context.Context, *QueryGetActionSignerConfigRequest) (*QueryGetActionSignerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionSignerConfig not implemented")
}
func (UnimplementedQueryServer) ActionSignerConfigAll(context.Context, *QueryAllActionSignerConfigRequest) (*QueryAllActionSignerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionSignerConfigAll not implemented")
}
func (UnimplementedQueryServer) SyncActionSigner(context.Context, *QueryGetSyncActionSignerRequest) (*QueryGetSyncActionSignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncActionSigner not implemented")
}
func (UnimplementedQueryServer) SyncActionSignerAll(context.Context, *QueryAllSyncActionSignerRequest) (*QueryAllSyncActionSignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncActionSignerAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MintRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMintRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MintRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MintRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MintRequest(ctx, req.(*QueryGetMintRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MintRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMintRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MintRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MintRequestAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MintRequestAll(ctx, req.(*QueryAllMintRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionOracleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetActionRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionOracleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ActionOracleRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionOracleRequest(ctx, req.(*QueryGetActionRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllActionRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ActionRequestAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionRequestAll(ctx, req.(*QueryAllActionRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollectionOwnerRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCollectionOwnerRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollectionOwnerRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CollectionOwnerRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollectionOwnerRequest(ctx, req.(*QueryGetCollectionOwnerRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollectionOwnerRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCollectionOwnerRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollectionOwnerRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CollectionOwnerRequestAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollectionOwnerRequestAll(ctx, req.(*QueryAllCollectionOwnerRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOracleConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OracleConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleConfig(ctx, req.(*QueryGetOracleConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetActionSignerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ActionSigner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionSigner(ctx, req.(*QueryGetActionSignerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionSignerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllActionSignerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionSignerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ActionSignerAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionSignerAll(ctx, req.(*QueryAllActionSignerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BindedSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBindedSignerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BindedSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BindedSigner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BindedSigner(ctx, req.(*QueryGetBindedSignerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionSignerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetActionSignerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionSignerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ActionSignerConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionSignerConfig(ctx, req.(*QueryGetActionSignerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionSignerConfigAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllActionSignerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionSignerConfigAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ActionSignerConfigAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionSignerConfigAll(ctx, req.(*QueryAllActionSignerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SyncActionSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSyncActionSignerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SyncActionSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SyncActionSigner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SyncActionSigner(ctx, req.(*QueryGetSyncActionSignerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SyncActionSignerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSyncActionSignerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SyncActionSignerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SyncActionSignerAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SyncActionSignerAll(ctx, req.(*QueryAllSyncActionSignerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sixprotocol.nftoracle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "MintRequest",
			Handler:    _Query_MintRequest_Handler,
		},
		{
			MethodName: "MintRequestAll",
			Handler:    _Query_MintRequestAll_Handler,
		},
		{
			MethodName: "ActionOracleRequest",
			Handler:    _Query_ActionOracleRequest_Handler,
		},
		{
			MethodName: "ActionRequestAll",
			Handler:    _Query_ActionRequestAll_Handler,
		},
		{
			MethodName: "CollectionOwnerRequest",
			Handler:    _Query_CollectionOwnerRequest_Handler,
		},
		{
			MethodName: "CollectionOwnerRequestAll",
			Handler:    _Query_CollectionOwnerRequestAll_Handler,
		},
		{
			MethodName: "OracleConfig",
			Handler:    _Query_OracleConfig_Handler,
		},
		{
			MethodName: "ActionSigner",
			Handler:    _Query_ActionSigner_Handler,
		},
		{
			MethodName: "ActionSignerAll",
			Handler:    _Query_ActionSignerAll_Handler,
		},
		{
			MethodName: "BindedSigner",
			Handler:    _Query_BindedSigner_Handler,
		},
		{
			MethodName: "ActionSignerConfig",
			Handler:    _Query_ActionSignerConfig_Handler,
		},
		{
			MethodName: "ActionSignerConfigAll",
			Handler:    _Query_ActionSignerConfigAll_Handler,
		},
		{
			MethodName: "SyncActionSigner",
			Handler:    _Query_SyncActionSigner_Handler,
		},
		{
			MethodName: "SyncActionSignerAll",
			Handler:    _Query_SyncActionSignerAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sixprotocol/nftoracle/query.proto",
}
