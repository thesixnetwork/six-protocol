// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sixprotocol/nftoracle/tx.proto

package nftoracle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName                       = "/sixprotocol.nftoracle.Msg/UpdateParams"
	Msg_CreateMintRequest_FullMethodName                  = "/sixprotocol.nftoracle.Msg/CreateMintRequest"
	Msg_SubmitMintResponse_FullMethodName                 = "/sixprotocol.nftoracle.Msg/SubmitMintResponse"
	Msg_CreateActionRequest_FullMethodName                = "/sixprotocol.nftoracle.Msg/CreateActionRequest"
	Msg_SubmitActionResponse_FullMethodName               = "/sixprotocol.nftoracle.Msg/SubmitActionResponse"
	Msg_CreateVerifyCollectionOwnerRequest_FullMethodName = "/sixprotocol.nftoracle.Msg/CreateVerifyCollectionOwnerRequest"
	Msg_SubmitVerifyCollectionOwner_FullMethodName        = "/sixprotocol.nftoracle.Msg/SubmitVerifyCollectionOwner"
	Msg_SetMinimumConfirmation_FullMethodName             = "/sixprotocol.nftoracle.Msg/SetMinimumConfirmation"
	Msg_CreateActionSigner_FullMethodName                 = "/sixprotocol.nftoracle.Msg/CreateActionSigner"
	Msg_UpdateActionSigner_FullMethodName                 = "/sixprotocol.nftoracle.Msg/UpdateActionSigner"
	Msg_DeleteActionSigner_FullMethodName                 = "/sixprotocol.nftoracle.Msg/DeleteActionSigner"
	Msg_CreateActionSignerConfig_FullMethodName           = "/sixprotocol.nftoracle.Msg/CreateActionSignerConfig"
	Msg_UpdateActionSignerConfig_FullMethodName           = "/sixprotocol.nftoracle.Msg/UpdateActionSignerConfig"
	Msg_DeleteActionSignerConfig_FullMethodName           = "/sixprotocol.nftoracle.Msg/DeleteActionSignerConfig"
	Msg_CreateSyncActionSigner_FullMethodName             = "/sixprotocol.nftoracle.Msg/CreateSyncActionSigner"
	Msg_SubmitSyncActionSigner_FullMethodName             = "/sixprotocol.nftoracle.Msg/SubmitSyncActionSigner"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateMintRequest(ctx context.Context, in *MsgCreateMintRequest, opts ...grpc.CallOption) (*MsgCreateMintRequestResponse, error)
	SubmitMintResponse(ctx context.Context, in *MsgSubmitMintResponse, opts ...grpc.CallOption) (*MsgSubmitMintResponseResponse, error)
	CreateActionRequest(ctx context.Context, in *MsgCreateActionRequest, opts ...grpc.CallOption) (*MsgCreateActionRequestResponse, error)
	SubmitActionResponse(ctx context.Context, in *MsgSubmitActionResponse, opts ...grpc.CallOption) (*MsgSubmitActionResponseResponse, error)
	CreateVerifyCollectionOwnerRequest(ctx context.Context, in *MsgCreateVerifyCollectionOwnerRequest, opts ...grpc.CallOption) (*MsgCreateVerifyCollectionOwnerRequestResponse, error)
	SubmitVerifyCollectionOwner(ctx context.Context, in *MsgSubmitVerifyCollectionOwner, opts ...grpc.CallOption) (*MsgSubmitVerifyCollectionOwnerResponse, error)
	SetMinimumConfirmation(ctx context.Context, in *MsgSetMinimumConfirmation, opts ...grpc.CallOption) (*MsgSetMinimumConfirmationResponse, error)
	CreateActionSigner(ctx context.Context, in *MsgCreateActionSigner, opts ...grpc.CallOption) (*MsgCreateActionSignerResponse, error)
	UpdateActionSigner(ctx context.Context, in *MsgUpdateActionSigner, opts ...grpc.CallOption) (*MsgUpdateActionSignerResponse, error)
	DeleteActionSigner(ctx context.Context, in *MsgDeleteActionSigner, opts ...grpc.CallOption) (*MsgDeleteActionSignerResponse, error)
	CreateActionSignerConfig(ctx context.Context, in *MsgCreateActionSignerConfig, opts ...grpc.CallOption) (*MsgCreateActionSignerConfigResponse, error)
	UpdateActionSignerConfig(ctx context.Context, in *MsgUpdateActionSignerConfig, opts ...grpc.CallOption) (*MsgUpdateActionSignerConfigResponse, error)
	DeleteActionSignerConfig(ctx context.Context, in *MsgDeleteActionSignerConfig, opts ...grpc.CallOption) (*MsgDeleteActionSignerConfigResponse, error)
	CreateSyncActionSigner(ctx context.Context, in *MsgCreateSyncActionSigner, opts ...grpc.CallOption) (*MsgCreateSyncActionSignerResponse, error)
	SubmitSyncActionSigner(ctx context.Context, in *MsgSubmitSyncActionSigner, opts ...grpc.CallOption) (*MsgSubmitSyncActionSignerResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMintRequest(ctx context.Context, in *MsgCreateMintRequest, opts ...grpc.CallOption) (*MsgCreateMintRequestResponse, error) {
	out := new(MsgCreateMintRequestResponse)
	err := c.cc.Invoke(ctx, Msg_CreateMintRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitMintResponse(ctx context.Context, in *MsgSubmitMintResponse, opts ...grpc.CallOption) (*MsgSubmitMintResponseResponse, error) {
	out := new(MsgSubmitMintResponseResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitMintResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateActionRequest(ctx context.Context, in *MsgCreateActionRequest, opts ...grpc.CallOption) (*MsgCreateActionRequestResponse, error) {
	out := new(MsgCreateActionRequestResponse)
	err := c.cc.Invoke(ctx, Msg_CreateActionRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitActionResponse(ctx context.Context, in *MsgSubmitActionResponse, opts ...grpc.CallOption) (*MsgSubmitActionResponseResponse, error) {
	out := new(MsgSubmitActionResponseResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitActionResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateVerifyCollectionOwnerRequest(ctx context.Context, in *MsgCreateVerifyCollectionOwnerRequest, opts ...grpc.CallOption) (*MsgCreateVerifyCollectionOwnerRequestResponse, error) {
	out := new(MsgCreateVerifyCollectionOwnerRequestResponse)
	err := c.cc.Invoke(ctx, Msg_CreateVerifyCollectionOwnerRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitVerifyCollectionOwner(ctx context.Context, in *MsgSubmitVerifyCollectionOwner, opts ...grpc.CallOption) (*MsgSubmitVerifyCollectionOwnerResponse, error) {
	out := new(MsgSubmitVerifyCollectionOwnerResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitVerifyCollectionOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMinimumConfirmation(ctx context.Context, in *MsgSetMinimumConfirmation, opts ...grpc.CallOption) (*MsgSetMinimumConfirmationResponse, error) {
	out := new(MsgSetMinimumConfirmationResponse)
	err := c.cc.Invoke(ctx, Msg_SetMinimumConfirmation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateActionSigner(ctx context.Context, in *MsgCreateActionSigner, opts ...grpc.CallOption) (*MsgCreateActionSignerResponse, error) {
	out := new(MsgCreateActionSignerResponse)
	err := c.cc.Invoke(ctx, Msg_CreateActionSigner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateActionSigner(ctx context.Context, in *MsgUpdateActionSigner, opts ...grpc.CallOption) (*MsgUpdateActionSignerResponse, error) {
	out := new(MsgUpdateActionSignerResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateActionSigner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteActionSigner(ctx context.Context, in *MsgDeleteActionSigner, opts ...grpc.CallOption) (*MsgDeleteActionSignerResponse, error) {
	out := new(MsgDeleteActionSignerResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteActionSigner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateActionSignerConfig(ctx context.Context, in *MsgCreateActionSignerConfig, opts ...grpc.CallOption) (*MsgCreateActionSignerConfigResponse, error) {
	out := new(MsgCreateActionSignerConfigResponse)
	err := c.cc.Invoke(ctx, Msg_CreateActionSignerConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateActionSignerConfig(ctx context.Context, in *MsgUpdateActionSignerConfig, opts ...grpc.CallOption) (*MsgUpdateActionSignerConfigResponse, error) {
	out := new(MsgUpdateActionSignerConfigResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateActionSignerConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteActionSignerConfig(ctx context.Context, in *MsgDeleteActionSignerConfig, opts ...grpc.CallOption) (*MsgDeleteActionSignerConfigResponse, error) {
	out := new(MsgDeleteActionSignerConfigResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteActionSignerConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSyncActionSigner(ctx context.Context, in *MsgCreateSyncActionSigner, opts ...grpc.CallOption) (*MsgCreateSyncActionSignerResponse, error) {
	out := new(MsgCreateSyncActionSignerResponse)
	err := c.cc.Invoke(ctx, Msg_CreateSyncActionSigner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitSyncActionSigner(ctx context.Context, in *MsgSubmitSyncActionSigner, opts ...grpc.CallOption) (*MsgSubmitSyncActionSignerResponse, error) {
	out := new(MsgSubmitSyncActionSignerResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitSyncActionSigner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateMintRequest(context.Context, *MsgCreateMintRequest) (*MsgCreateMintRequestResponse, error)
	SubmitMintResponse(context.Context, *MsgSubmitMintResponse) (*MsgSubmitMintResponseResponse, error)
	CreateActionRequest(context.Context, *MsgCreateActionRequest) (*MsgCreateActionRequestResponse, error)
	SubmitActionResponse(context.Context, *MsgSubmitActionResponse) (*MsgSubmitActionResponseResponse, error)
	CreateVerifyCollectionOwnerRequest(context.Context, *MsgCreateVerifyCollectionOwnerRequest) (*MsgCreateVerifyCollectionOwnerRequestResponse, error)
	SubmitVerifyCollectionOwner(context.Context, *MsgSubmitVerifyCollectionOwner) (*MsgSubmitVerifyCollectionOwnerResponse, error)
	SetMinimumConfirmation(context.Context, *MsgSetMinimumConfirmation) (*MsgSetMinimumConfirmationResponse, error)
	CreateActionSigner(context.Context, *MsgCreateActionSigner) (*MsgCreateActionSignerResponse, error)
	UpdateActionSigner(context.Context, *MsgUpdateActionSigner) (*MsgUpdateActionSignerResponse, error)
	DeleteActionSigner(context.Context, *MsgDeleteActionSigner) (*MsgDeleteActionSignerResponse, error)
	CreateActionSignerConfig(context.Context, *MsgCreateActionSignerConfig) (*MsgCreateActionSignerConfigResponse, error)
	UpdateActionSignerConfig(context.Context, *MsgUpdateActionSignerConfig) (*MsgUpdateActionSignerConfigResponse, error)
	DeleteActionSignerConfig(context.Context, *MsgDeleteActionSignerConfig) (*MsgDeleteActionSignerConfigResponse, error)
	CreateSyncActionSigner(context.Context, *MsgCreateSyncActionSigner) (*MsgCreateSyncActionSignerResponse, error)
	SubmitSyncActionSigner(context.Context, *MsgSubmitSyncActionSigner) (*MsgSubmitSyncActionSignerResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateMintRequest(context.Context, *MsgCreateMintRequest) (*MsgCreateMintRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMintRequest not implemented")
}
func (UnimplementedMsgServer) SubmitMintResponse(context.Context, *MsgSubmitMintResponse) (*MsgSubmitMintResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMintResponse not implemented")
}
func (UnimplementedMsgServer) CreateActionRequest(context.Context, *MsgCreateActionRequest) (*MsgCreateActionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActionRequest not implemented")
}
func (UnimplementedMsgServer) SubmitActionResponse(context.Context, *MsgSubmitActionResponse) (*MsgSubmitActionResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitActionResponse not implemented")
}
func (UnimplementedMsgServer) CreateVerifyCollectionOwnerRequest(context.Context, *MsgCreateVerifyCollectionOwnerRequest) (*MsgCreateVerifyCollectionOwnerRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVerifyCollectionOwnerRequest not implemented")
}
func (UnimplementedMsgServer) SubmitVerifyCollectionOwner(context.Context, *MsgSubmitVerifyCollectionOwner) (*MsgSubmitVerifyCollectionOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitVerifyCollectionOwner not implemented")
}
func (UnimplementedMsgServer) SetMinimumConfirmation(context.Context, *MsgSetMinimumConfirmation) (*MsgSetMinimumConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMinimumConfirmation not implemented")
}
func (UnimplementedMsgServer) CreateActionSigner(context.Context, *MsgCreateActionSigner) (*MsgCreateActionSignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActionSigner not implemented")
}
func (UnimplementedMsgServer) UpdateActionSigner(context.Context, *MsgUpdateActionSigner) (*MsgUpdateActionSignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActionSigner not implemented")
}
func (UnimplementedMsgServer) DeleteActionSigner(context.Context, *MsgDeleteActionSigner) (*MsgDeleteActionSignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActionSigner not implemented")
}
func (UnimplementedMsgServer) CreateActionSignerConfig(context.Context, *MsgCreateActionSignerConfig) (*MsgCreateActionSignerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActionSignerConfig not implemented")
}
func (UnimplementedMsgServer) UpdateActionSignerConfig(context.Context, *MsgUpdateActionSignerConfig) (*MsgUpdateActionSignerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActionSignerConfig not implemented")
}
func (UnimplementedMsgServer) DeleteActionSignerConfig(context.Context, *MsgDeleteActionSignerConfig) (*MsgDeleteActionSignerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActionSignerConfig not implemented")
}
func (UnimplementedMsgServer) CreateSyncActionSigner(context.Context, *MsgCreateSyncActionSigner) (*MsgCreateSyncActionSignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSyncActionSigner not implemented")
}
func (UnimplementedMsgServer) SubmitSyncActionSigner(context.Context, *MsgSubmitSyncActionSigner) (*MsgSubmitSyncActionSignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSyncActionSigner not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMintRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMintRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateMintRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMintRequest(ctx, req.(*MsgCreateMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitMintResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitMintResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitMintResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitMintResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitMintResponse(ctx, req.(*MsgSubmitMintResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateActionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateActionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateActionRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateActionRequest(ctx, req.(*MsgCreateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitActionResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitActionResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitActionResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitActionResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitActionResponse(ctx, req.(*MsgSubmitActionResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateVerifyCollectionOwnerRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateVerifyCollectionOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateVerifyCollectionOwnerRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateVerifyCollectionOwnerRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateVerifyCollectionOwnerRequest(ctx, req.(*MsgCreateVerifyCollectionOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitVerifyCollectionOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitVerifyCollectionOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitVerifyCollectionOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitVerifyCollectionOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitVerifyCollectionOwner(ctx, req.(*MsgSubmitVerifyCollectionOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMinimumConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMinimumConfirmation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMinimumConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetMinimumConfirmation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMinimumConfirmation(ctx, req.(*MsgSetMinimumConfirmation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateActionSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateActionSigner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateActionSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateActionSigner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateActionSigner(ctx, req.(*MsgCreateActionSigner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateActionSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateActionSigner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateActionSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateActionSigner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateActionSigner(ctx, req.(*MsgUpdateActionSigner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteActionSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteActionSigner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteActionSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteActionSigner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteActionSigner(ctx, req.(*MsgDeleteActionSigner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateActionSignerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateActionSignerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateActionSignerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateActionSignerConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateActionSignerConfig(ctx, req.(*MsgCreateActionSignerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateActionSignerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateActionSignerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateActionSignerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateActionSignerConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateActionSignerConfig(ctx, req.(*MsgUpdateActionSignerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteActionSignerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteActionSignerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteActionSignerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteActionSignerConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteActionSignerConfig(ctx, req.(*MsgDeleteActionSignerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSyncActionSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSyncActionSigner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSyncActionSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateSyncActionSigner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSyncActionSigner(ctx, req.(*MsgCreateSyncActionSigner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitSyncActionSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitSyncActionSigner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitSyncActionSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitSyncActionSigner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitSyncActionSigner(ctx, req.(*MsgSubmitSyncActionSigner))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sixprotocol.nftoracle.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateMintRequest",
			Handler:    _Msg_CreateMintRequest_Handler,
		},
		{
			MethodName: "SubmitMintResponse",
			Handler:    _Msg_SubmitMintResponse_Handler,
		},
		{
			MethodName: "CreateActionRequest",
			Handler:    _Msg_CreateActionRequest_Handler,
		},
		{
			MethodName: "SubmitActionResponse",
			Handler:    _Msg_SubmitActionResponse_Handler,
		},
		{
			MethodName: "CreateVerifyCollectionOwnerRequest",
			Handler:    _Msg_CreateVerifyCollectionOwnerRequest_Handler,
		},
		{
			MethodName: "SubmitVerifyCollectionOwner",
			Handler:    _Msg_SubmitVerifyCollectionOwner_Handler,
		},
		{
			MethodName: "SetMinimumConfirmation",
			Handler:    _Msg_SetMinimumConfirmation_Handler,
		},
		{
			MethodName: "CreateActionSigner",
			Handler:    _Msg_CreateActionSigner_Handler,
		},
		{
			MethodName: "UpdateActionSigner",
			Handler:    _Msg_UpdateActionSigner_Handler,
		},
		{
			MethodName: "DeleteActionSigner",
			Handler:    _Msg_DeleteActionSigner_Handler,
		},
		{
			MethodName: "CreateActionSignerConfig",
			Handler:    _Msg_CreateActionSignerConfig_Handler,
		},
		{
			MethodName: "UpdateActionSignerConfig",
			Handler:    _Msg_UpdateActionSignerConfig_Handler,
		},
		{
			MethodName: "DeleteActionSignerConfig",
			Handler:    _Msg_DeleteActionSignerConfig_Handler,
		},
		{
			MethodName: "CreateSyncActionSigner",
			Handler:    _Msg_CreateSyncActionSigner_Handler,
		},
		{
			MethodName: "SubmitSyncActionSigner",
			Handler:    _Msg_SubmitSyncActionSigner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sixprotocol/nftoracle/tx.proto",
}
