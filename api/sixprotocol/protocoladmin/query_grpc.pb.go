// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sixprotocol/protocoladmin/query.proto

package protocoladmin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName           = "/sixprotocol.protocoladmin.Query/Params"
	Query_Admin_FullMethodName            = "/sixprotocol.protocoladmin.Query/Admin"
	Query_AdminAll_FullMethodName         = "/sixprotocol.protocoladmin.Query/AdminAll"
	Query_Group_FullMethodName            = "/sixprotocol.protocoladmin.Query/Group"
	Query_GroupAll_FullMethodName         = "/sixprotocol.protocoladmin.Query/GroupAll"
	Query_ListAdminOfGroup_FullMethodName = "/sixprotocol.protocoladmin.Query/ListAdminOfGroup"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Admin items.
	Admin(ctx context.Context, in *QueryGetAdminRequest, opts ...grpc.CallOption) (*QueryGetAdminResponse, error)
	AdminAll(ctx context.Context, in *QueryAllAdminRequest, opts ...grpc.CallOption) (*QueryAllAdminResponse, error)
	// Queries a list of Group items.
	Group(ctx context.Context, in *QueryGetGroupRequest, opts ...grpc.CallOption) (*QueryGetGroupResponse, error)
	GroupAll(ctx context.Context, in *QueryAllGroupRequest, opts ...grpc.CallOption) (*QueryAllGroupResponse, error)
	// Queries a list of ListAdminOfGroup items.
	ListAdminOfGroup(ctx context.Context, in *QueryListAdminOfGroupRequest, opts ...grpc.CallOption) (*QueryListAdminOfGroupResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Admin(ctx context.Context, in *QueryGetAdminRequest, opts ...grpc.CallOption) (*QueryGetAdminResponse, error) {
	out := new(QueryGetAdminResponse)
	err := c.cc.Invoke(ctx, Query_Admin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AdminAll(ctx context.Context, in *QueryAllAdminRequest, opts ...grpc.CallOption) (*QueryAllAdminResponse, error) {
	out := new(QueryAllAdminResponse)
	err := c.cc.Invoke(ctx, Query_AdminAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Group(ctx context.Context, in *QueryGetGroupRequest, opts ...grpc.CallOption) (*QueryGetGroupResponse, error) {
	out := new(QueryGetGroupResponse)
	err := c.cc.Invoke(ctx, Query_Group_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GroupAll(ctx context.Context, in *QueryAllGroupRequest, opts ...grpc.CallOption) (*QueryAllGroupResponse, error) {
	out := new(QueryAllGroupResponse)
	err := c.cc.Invoke(ctx, Query_GroupAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListAdminOfGroup(ctx context.Context, in *QueryListAdminOfGroupRequest, opts ...grpc.CallOption) (*QueryListAdminOfGroupResponse, error) {
	out := new(QueryListAdminOfGroupResponse)
	err := c.cc.Invoke(ctx, Query_ListAdminOfGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Admin items.
	Admin(context.Context, *QueryGetAdminRequest) (*QueryGetAdminResponse, error)
	AdminAll(context.Context, *QueryAllAdminRequest) (*QueryAllAdminResponse, error)
	// Queries a list of Group items.
	Group(context.Context, *QueryGetGroupRequest) (*QueryGetGroupResponse, error)
	GroupAll(context.Context, *QueryAllGroupRequest) (*QueryAllGroupResponse, error)
	// Queries a list of ListAdminOfGroup items.
	ListAdminOfGroup(context.Context, *QueryListAdminOfGroupRequest) (*QueryListAdminOfGroupResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Admin(context.Context, *QueryGetAdminRequest) (*QueryGetAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Admin not implemented")
}
func (UnimplementedQueryServer) AdminAll(context.Context, *QueryAllAdminRequest) (*QueryAllAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAll not implemented")
}
func (UnimplementedQueryServer) Group(context.Context, *QueryGetGroupRequest) (*QueryGetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Group not implemented")
}
func (UnimplementedQueryServer) GroupAll(context.Context, *QueryAllGroupRequest) (*QueryAllGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAll not implemented")
}
func (UnimplementedQueryServer) ListAdminOfGroup(context.Context, *QueryListAdminOfGroupRequest) (*QueryListAdminOfGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdminOfGroup not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Admin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Admin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Admin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Admin(ctx, req.(*QueryGetAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AdminAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AdminAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AdminAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AdminAll(ctx, req.(*QueryAllAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Group_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Group(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Group_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Group(ctx, req.(*QueryGetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GroupAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GroupAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GroupAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GroupAll(ctx, req.(*QueryAllGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListAdminOfGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListAdminOfGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListAdminOfGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListAdminOfGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListAdminOfGroup(ctx, req.(*QueryListAdminOfGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sixprotocol.protocoladmin.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Admin",
			Handler:    _Query_Admin_Handler,
		},
		{
			MethodName: "AdminAll",
			Handler:    _Query_AdminAll_Handler,
		},
		{
			MethodName: "Group",
			Handler:    _Query_Group_Handler,
		},
		{
			MethodName: "GroupAll",
			Handler:    _Query_GroupAll_Handler,
		},
		{
			MethodName: "ListAdminOfGroup",
			Handler:    _Query_ListAdminOfGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sixprotocol/protocoladmin/query.proto",
}
