// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sixprotocol/protocoladmin/tx.proto

package protocoladmin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName         = "/sixprotocol.protocoladmin.Msg/UpdateParams"
	Msg_CreateGroup_FullMethodName          = "/sixprotocol.protocoladmin.Msg/CreateGroup"
	Msg_UpdateGroup_FullMethodName          = "/sixprotocol.protocoladmin.Msg/UpdateGroup"
	Msg_DeleteGroup_FullMethodName          = "/sixprotocol.protocoladmin.Msg/DeleteGroup"
	Msg_AddAdminToGroup_FullMethodName      = "/sixprotocol.protocoladmin.Msg/AddAdminToGroup"
	Msg_RemoveAdminFromGroup_FullMethodName = "/sixprotocol.protocoladmin.Msg/RemoveAdminFromGroup"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateGroup(ctx context.Context, in *MsgCreateGroup, opts ...grpc.CallOption) (*MsgCreateGroupResponse, error)
	UpdateGroup(ctx context.Context, in *MsgUpdateGroup, opts ...grpc.CallOption) (*MsgUpdateGroupResponse, error)
	DeleteGroup(ctx context.Context, in *MsgDeleteGroup, opts ...grpc.CallOption) (*MsgDeleteGroupResponse, error)
	AddAdminToGroup(ctx context.Context, in *MsgAddAdminToGroup, opts ...grpc.CallOption) (*MsgAddAdminToGroupResponse, error)
	RemoveAdminFromGroup(ctx context.Context, in *MsgRemoveAdminFromGroup, opts ...grpc.CallOption) (*MsgRemoveAdminFromGroupResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateGroup(ctx context.Context, in *MsgCreateGroup, opts ...grpc.CallOption) (*MsgCreateGroupResponse, error) {
	out := new(MsgCreateGroupResponse)
	err := c.cc.Invoke(ctx, Msg_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateGroup(ctx context.Context, in *MsgUpdateGroup, opts ...grpc.CallOption) (*MsgUpdateGroupResponse, error) {
	out := new(MsgUpdateGroupResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteGroup(ctx context.Context, in *MsgDeleteGroup, opts ...grpc.CallOption) (*MsgDeleteGroupResponse, error) {
	out := new(MsgDeleteGroupResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddAdminToGroup(ctx context.Context, in *MsgAddAdminToGroup, opts ...grpc.CallOption) (*MsgAddAdminToGroupResponse, error) {
	out := new(MsgAddAdminToGroupResponse)
	err := c.cc.Invoke(ctx, Msg_AddAdminToGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveAdminFromGroup(ctx context.Context, in *MsgRemoveAdminFromGroup, opts ...grpc.CallOption) (*MsgRemoveAdminFromGroupResponse, error) {
	out := new(MsgRemoveAdminFromGroupResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveAdminFromGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateGroup(context.Context, *MsgCreateGroup) (*MsgCreateGroupResponse, error)
	UpdateGroup(context.Context, *MsgUpdateGroup) (*MsgUpdateGroupResponse, error)
	DeleteGroup(context.Context, *MsgDeleteGroup) (*MsgDeleteGroupResponse, error)
	AddAdminToGroup(context.Context, *MsgAddAdminToGroup) (*MsgAddAdminToGroupResponse, error)
	RemoveAdminFromGroup(context.Context, *MsgRemoveAdminFromGroup) (*MsgRemoveAdminFromGroupResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateGroup(context.Context, *MsgCreateGroup) (*MsgCreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedMsgServer) UpdateGroup(context.Context, *MsgUpdateGroup) (*MsgUpdateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedMsgServer) DeleteGroup(context.Context, *MsgDeleteGroup) (*MsgDeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedMsgServer) AddAdminToGroup(context.Context, *MsgAddAdminToGroup) (*MsgAddAdminToGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdminToGroup not implemented")
}
func (UnimplementedMsgServer) RemoveAdminFromGroup(context.Context, *MsgRemoveAdminFromGroup) (*MsgRemoveAdminFromGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAdminFromGroup not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateGroup(ctx, req.(*MsgCreateGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateGroup(ctx, req.(*MsgUpdateGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteGroup(ctx, req.(*MsgDeleteGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddAdminToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAdminToGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAdminToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddAdminToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAdminToGroup(ctx, req.(*MsgAddAdminToGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveAdminFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveAdminFromGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveAdminFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveAdminFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveAdminFromGroup(ctx, req.(*MsgRemoveAdminFromGroup))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sixprotocol.protocoladmin.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Msg_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Msg_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Msg_DeleteGroup_Handler,
		},
		{
			MethodName: "AddAdminToGroup",
			Handler:    _Msg_AddAdminToGroup_Handler,
		},
		{
			MethodName: "RemoveAdminFromGroup",
			Handler:    _Msg_RemoveAdminFromGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sixprotocol/protocoladmin/tx.proto",
}
