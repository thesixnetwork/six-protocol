// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sixprotocol/tokenmngr/query.proto

package tokenmngr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName       = "/sixprotocol.tokenmngr.Query/Params"
	Query_Token_FullMethodName        = "/sixprotocol.tokenmngr.Query/Token"
	Query_TokenAll_FullMethodName     = "/sixprotocol.tokenmngr.Query/TokenAll"
	Query_Mintperm_FullMethodName     = "/sixprotocol.tokenmngr.Query/Mintperm"
	Query_MintpermAll_FullMethodName  = "/sixprotocol.tokenmngr.Query/MintpermAll"
	Query_TokenBurn_FullMethodName    = "/sixprotocol.tokenmngr.Query/TokenBurn"
	Query_TokenBurnAll_FullMethodName = "/sixprotocol.tokenmngr.Query/TokenBurnAll"
	Query_Options_FullMethodName      = "/sixprotocol.tokenmngr.Query/Options"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Token items.
	Token(ctx context.Context, in *QueryGetTokenRequest, opts ...grpc.CallOption) (*QueryGetTokenResponse, error)
	TokenAll(ctx context.Context, in *QueryAllTokenRequest, opts ...grpc.CallOption) (*QueryAllTokenResponse, error)
	// Queries a list of Mintperm items.
	Mintperm(ctx context.Context, in *QueryGetMintpermRequest, opts ...grpc.CallOption) (*QueryGetMintpermResponse, error)
	MintpermAll(ctx context.Context, in *QueryAllMintpermRequest, opts ...grpc.CallOption) (*QueryAllMintpermResponse, error)
	// Queries a list of TokenBurn items.
	TokenBurn(ctx context.Context, in *QueryGetTokenBurnRequest, opts ...grpc.CallOption) (*QueryGetTokenBurnResponse, error)
	TokenBurnAll(ctx context.Context, in *QueryAllTokenBurnRequest, opts ...grpc.CallOption) (*QueryAllTokenBurnResponse, error)
	// Queries a Options by index.
	Options(ctx context.Context, in *QueryGetOptionsRequest, opts ...grpc.CallOption) (*QueryGetOptionsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Token(ctx context.Context, in *QueryGetTokenRequest, opts ...grpc.CallOption) (*QueryGetTokenResponse, error) {
	out := new(QueryGetTokenResponse)
	err := c.cc.Invoke(ctx, Query_Token_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenAll(ctx context.Context, in *QueryAllTokenRequest, opts ...grpc.CallOption) (*QueryAllTokenResponse, error) {
	out := new(QueryAllTokenResponse)
	err := c.cc.Invoke(ctx, Query_TokenAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Mintperm(ctx context.Context, in *QueryGetMintpermRequest, opts ...grpc.CallOption) (*QueryGetMintpermResponse, error) {
	out := new(QueryGetMintpermResponse)
	err := c.cc.Invoke(ctx, Query_Mintperm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MintpermAll(ctx context.Context, in *QueryAllMintpermRequest, opts ...grpc.CallOption) (*QueryAllMintpermResponse, error) {
	out := new(QueryAllMintpermResponse)
	err := c.cc.Invoke(ctx, Query_MintpermAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenBurn(ctx context.Context, in *QueryGetTokenBurnRequest, opts ...grpc.CallOption) (*QueryGetTokenBurnResponse, error) {
	out := new(QueryGetTokenBurnResponse)
	err := c.cc.Invoke(ctx, Query_TokenBurn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenBurnAll(ctx context.Context, in *QueryAllTokenBurnRequest, opts ...grpc.CallOption) (*QueryAllTokenBurnResponse, error) {
	out := new(QueryAllTokenBurnResponse)
	err := c.cc.Invoke(ctx, Query_TokenBurnAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Options(ctx context.Context, in *QueryGetOptionsRequest, opts ...grpc.CallOption) (*QueryGetOptionsResponse, error) {
	out := new(QueryGetOptionsResponse)
	err := c.cc.Invoke(ctx, Query_Options_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Token items.
	Token(context.Context, *QueryGetTokenRequest) (*QueryGetTokenResponse, error)
	TokenAll(context.Context, *QueryAllTokenRequest) (*QueryAllTokenResponse, error)
	// Queries a list of Mintperm items.
	Mintperm(context.Context, *QueryGetMintpermRequest) (*QueryGetMintpermResponse, error)
	MintpermAll(context.Context, *QueryAllMintpermRequest) (*QueryAllMintpermResponse, error)
	// Queries a list of TokenBurn items.
	TokenBurn(context.Context, *QueryGetTokenBurnRequest) (*QueryGetTokenBurnResponse, error)
	TokenBurnAll(context.Context, *QueryAllTokenBurnRequest) (*QueryAllTokenBurnResponse, error)
	// Queries a Options by index.
	Options(context.Context, *QueryGetOptionsRequest) (*QueryGetOptionsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Token(context.Context, *QueryGetTokenRequest) (*QueryGetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (UnimplementedQueryServer) TokenAll(context.Context, *QueryAllTokenRequest) (*QueryAllTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenAll not implemented")
}
func (UnimplementedQueryServer) Mintperm(context.Context, *QueryGetMintpermRequest) (*QueryGetMintpermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mintperm not implemented")
}
func (UnimplementedQueryServer) MintpermAll(context.Context, *QueryAllMintpermRequest) (*QueryAllMintpermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintpermAll not implemented")
}
func (UnimplementedQueryServer) TokenBurn(context.Context, *QueryGetTokenBurnRequest) (*QueryGetTokenBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenBurn not implemented")
}
func (UnimplementedQueryServer) TokenBurnAll(context.Context, *QueryAllTokenBurnRequest) (*QueryAllTokenBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenBurnAll not implemented")
}
func (UnimplementedQueryServer) Options(context.Context, *QueryGetOptionsRequest) (*QueryGetOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Options not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Token_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Token(ctx, req.(*QueryGetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenAll(ctx, req.(*QueryAllTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Mintperm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMintpermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Mintperm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Mintperm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Mintperm(ctx, req.(*QueryGetMintpermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MintpermAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMintpermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MintpermAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MintpermAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MintpermAll(ctx, req.(*QueryAllMintpermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenBurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenBurnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenBurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenBurn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenBurn(ctx, req.(*QueryGetTokenBurnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenBurnAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTokenBurnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenBurnAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenBurnAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenBurnAll(ctx, req.(*QueryAllTokenBurnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Options_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Options(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Options_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Options(ctx, req.(*QueryGetOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sixprotocol.tokenmngr.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Token",
			Handler:    _Query_Token_Handler,
		},
		{
			MethodName: "TokenAll",
			Handler:    _Query_TokenAll_Handler,
		},
		{
			MethodName: "Mintperm",
			Handler:    _Query_Mintperm_Handler,
		},
		{
			MethodName: "MintpermAll",
			Handler:    _Query_MintpermAll_Handler,
		},
		{
			MethodName: "TokenBurn",
			Handler:    _Query_TokenBurn_Handler,
		},
		{
			MethodName: "TokenBurnAll",
			Handler:    _Query_TokenBurnAll_Handler,
		},
		{
			MethodName: "Options",
			Handler:    _Query_Options_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sixprotocol/tokenmngr/query.proto",
}
