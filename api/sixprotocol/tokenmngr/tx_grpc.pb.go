// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sixprotocol/tokenmngr/tx.proto

package tokenmngr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName   = "/sixprotocol.tokenmngr.Msg/UpdateParams"
	Msg_CreateToken_FullMethodName    = "/sixprotocol.tokenmngr.Msg/CreateToken"
	Msg_UpdateToken_FullMethodName    = "/sixprotocol.tokenmngr.Msg/UpdateToken"
	Msg_DeleteToken_FullMethodName    = "/sixprotocol.tokenmngr.Msg/DeleteToken"
	Msg_CreateMintperm_FullMethodName = "/sixprotocol.tokenmngr.Msg/CreateMintperm"
	Msg_UpdateMintperm_FullMethodName = "/sixprotocol.tokenmngr.Msg/UpdateMintperm"
	Msg_DeleteMintperm_FullMethodName = "/sixprotocol.tokenmngr.Msg/DeleteMintperm"
	Msg_CreateOptions_FullMethodName  = "/sixprotocol.tokenmngr.Msg/CreateOptions"
	Msg_UpdateOptions_FullMethodName  = "/sixprotocol.tokenmngr.Msg/UpdateOptions"
	Msg_DeleteOptions_FullMethodName  = "/sixprotocol.tokenmngr.Msg/DeleteOptions"
	Msg_Burn_FullMethodName           = "/sixprotocol.tokenmngr.Msg/Burn"
	Msg_WrapToken_FullMethodName      = "/sixprotocol.tokenmngr.Msg/WrapToken"
	Msg_UnwrapToken_FullMethodName    = "/sixprotocol.tokenmngr.Msg/UnwrapToken"
	Msg_SendWrapToken_FullMethodName  = "/sixprotocol.tokenmngr.Msg/SendWrapToken"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateToken(ctx context.Context, in *MsgCreateToken, opts ...grpc.CallOption) (*MsgCreateTokenResponse, error)
	UpdateToken(ctx context.Context, in *MsgUpdateToken, opts ...grpc.CallOption) (*MsgUpdateTokenResponse, error)
	DeleteToken(ctx context.Context, in *MsgDeleteToken, opts ...grpc.CallOption) (*MsgDeleteTokenResponse, error)
	CreateMintperm(ctx context.Context, in *MsgCreateMintperm, opts ...grpc.CallOption) (*MsgCreateMintpermResponse, error)
	UpdateMintperm(ctx context.Context, in *MsgUpdateMintperm, opts ...grpc.CallOption) (*MsgUpdateMintpermResponse, error)
	DeleteMintperm(ctx context.Context, in *MsgDeleteMintperm, opts ...grpc.CallOption) (*MsgDeleteMintpermResponse, error)
	CreateOptions(ctx context.Context, in *MsgCreateOptions, opts ...grpc.CallOption) (*MsgCreateOptionsResponse, error)
	UpdateOptions(ctx context.Context, in *MsgUpdateOptions, opts ...grpc.CallOption) (*MsgUpdateOptionsResponse, error)
	DeleteOptions(ctx context.Context, in *MsgDeleteOptions, opts ...grpc.CallOption) (*MsgDeleteOptionsResponse, error)
	Burn(ctx context.Context, in *MsgBurn, opts ...grpc.CallOption) (*MsgBurnResponse, error)
	WrapToken(ctx context.Context, in *MsgWrapToken, opts ...grpc.CallOption) (*MsgWrapTokenResponse, error)
	UnwrapToken(ctx context.Context, in *MsgUnwrapToken, opts ...grpc.CallOption) (*MsgUnwrapTokenResponse, error)
	SendWrapToken(ctx context.Context, in *MsgSendWrapToken, opts ...grpc.CallOption) (*MsgSendWrapTokenResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateToken(ctx context.Context, in *MsgCreateToken, opts ...grpc.CallOption) (*MsgCreateTokenResponse, error) {
	out := new(MsgCreateTokenResponse)
	err := c.cc.Invoke(ctx, Msg_CreateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateToken(ctx context.Context, in *MsgUpdateToken, opts ...grpc.CallOption) (*MsgUpdateTokenResponse, error) {
	out := new(MsgUpdateTokenResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteToken(ctx context.Context, in *MsgDeleteToken, opts ...grpc.CallOption) (*MsgDeleteTokenResponse, error) {
	out := new(MsgDeleteTokenResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMintperm(ctx context.Context, in *MsgCreateMintperm, opts ...grpc.CallOption) (*MsgCreateMintpermResponse, error) {
	out := new(MsgCreateMintpermResponse)
	err := c.cc.Invoke(ctx, Msg_CreateMintperm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMintperm(ctx context.Context, in *MsgUpdateMintperm, opts ...grpc.CallOption) (*MsgUpdateMintpermResponse, error) {
	out := new(MsgUpdateMintpermResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateMintperm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteMintperm(ctx context.Context, in *MsgDeleteMintperm, opts ...grpc.CallOption) (*MsgDeleteMintpermResponse, error) {
	out := new(MsgDeleteMintpermResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteMintperm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateOptions(ctx context.Context, in *MsgCreateOptions, opts ...grpc.CallOption) (*MsgCreateOptionsResponse, error) {
	out := new(MsgCreateOptionsResponse)
	err := c.cc.Invoke(ctx, Msg_CreateOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateOptions(ctx context.Context, in *MsgUpdateOptions, opts ...grpc.CallOption) (*MsgUpdateOptionsResponse, error) {
	out := new(MsgUpdateOptionsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteOptions(ctx context.Context, in *MsgDeleteOptions, opts ...grpc.CallOption) (*MsgDeleteOptionsResponse, error) {
	out := new(MsgDeleteOptionsResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Burn(ctx context.Context, in *MsgBurn, opts ...grpc.CallOption) (*MsgBurnResponse, error) {
	out := new(MsgBurnResponse)
	err := c.cc.Invoke(ctx, Msg_Burn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WrapToken(ctx context.Context, in *MsgWrapToken, opts ...grpc.CallOption) (*MsgWrapTokenResponse, error) {
	out := new(MsgWrapTokenResponse)
	err := c.cc.Invoke(ctx, Msg_WrapToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnwrapToken(ctx context.Context, in *MsgUnwrapToken, opts ...grpc.CallOption) (*MsgUnwrapTokenResponse, error) {
	out := new(MsgUnwrapTokenResponse)
	err := c.cc.Invoke(ctx, Msg_UnwrapToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendWrapToken(ctx context.Context, in *MsgSendWrapToken, opts ...grpc.CallOption) (*MsgSendWrapTokenResponse, error) {
	out := new(MsgSendWrapTokenResponse)
	err := c.cc.Invoke(ctx, Msg_SendWrapToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateToken(context.Context, *MsgCreateToken) (*MsgCreateTokenResponse, error)
	UpdateToken(context.Context, *MsgUpdateToken) (*MsgUpdateTokenResponse, error)
	DeleteToken(context.Context, *MsgDeleteToken) (*MsgDeleteTokenResponse, error)
	CreateMintperm(context.Context, *MsgCreateMintperm) (*MsgCreateMintpermResponse, error)
	UpdateMintperm(context.Context, *MsgUpdateMintperm) (*MsgUpdateMintpermResponse, error)
	DeleteMintperm(context.Context, *MsgDeleteMintperm) (*MsgDeleteMintpermResponse, error)
	CreateOptions(context.Context, *MsgCreateOptions) (*MsgCreateOptionsResponse, error)
	UpdateOptions(context.Context, *MsgUpdateOptions) (*MsgUpdateOptionsResponse, error)
	DeleteOptions(context.Context, *MsgDeleteOptions) (*MsgDeleteOptionsResponse, error)
	Burn(context.Context, *MsgBurn) (*MsgBurnResponse, error)
	WrapToken(context.Context, *MsgWrapToken) (*MsgWrapTokenResponse, error)
	UnwrapToken(context.Context, *MsgUnwrapToken) (*MsgUnwrapTokenResponse, error)
	SendWrapToken(context.Context, *MsgSendWrapToken) (*MsgSendWrapTokenResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateToken(context.Context, *MsgCreateToken) (*MsgCreateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedMsgServer) UpdateToken(context.Context, *MsgUpdateToken) (*MsgUpdateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedMsgServer) DeleteToken(context.Context, *MsgDeleteToken) (*MsgDeleteTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (UnimplementedMsgServer) CreateMintperm(context.Context, *MsgCreateMintperm) (*MsgCreateMintpermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMintperm not implemented")
}
func (UnimplementedMsgServer) UpdateMintperm(context.Context, *MsgUpdateMintperm) (*MsgUpdateMintpermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMintperm not implemented")
}
func (UnimplementedMsgServer) DeleteMintperm(context.Context, *MsgDeleteMintperm) (*MsgDeleteMintpermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMintperm not implemented")
}
func (UnimplementedMsgServer) CreateOptions(context.Context, *MsgCreateOptions) (*MsgCreateOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOptions not implemented")
}
func (UnimplementedMsgServer) UpdateOptions(context.Context, *MsgUpdateOptions) (*MsgUpdateOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOptions not implemented")
}
func (UnimplementedMsgServer) DeleteOptions(context.Context, *MsgDeleteOptions) (*MsgDeleteOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOptions not implemented")
}
func (UnimplementedMsgServer) Burn(context.Context, *MsgBurn) (*MsgBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Burn not implemented")
}
func (UnimplementedMsgServer) WrapToken(context.Context, *MsgWrapToken) (*MsgWrapTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapToken not implemented")
}
func (UnimplementedMsgServer) UnwrapToken(context.Context, *MsgUnwrapToken) (*MsgUnwrapTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnwrapToken not implemented")
}
func (UnimplementedMsgServer) SendWrapToken(context.Context, *MsgSendWrapToken) (*MsgSendWrapTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWrapToken not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateToken(ctx, req.(*MsgCreateToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateToken(ctx, req.(*MsgUpdateToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteToken(ctx, req.(*MsgDeleteToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMintperm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMintperm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMintperm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateMintperm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMintperm(ctx, req.(*MsgCreateMintperm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMintperm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMintperm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMintperm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateMintperm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMintperm(ctx, req.(*MsgUpdateMintperm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteMintperm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteMintperm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteMintperm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteMintperm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteMintperm(ctx, req.(*MsgDeleteMintperm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateOptions(ctx, req.(*MsgCreateOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateOptions(ctx, req.(*MsgUpdateOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteOptions(ctx, req.(*MsgDeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Burn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Burn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Burn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Burn(ctx, req.(*MsgBurn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WrapToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWrapToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WrapToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_WrapToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WrapToken(ctx, req.(*MsgWrapToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnwrapToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnwrapToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnwrapToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UnwrapToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnwrapToken(ctx, req.(*MsgUnwrapToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendWrapToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendWrapToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendWrapToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SendWrapToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendWrapToken(ctx, req.(*MsgSendWrapToken))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sixprotocol.tokenmngr.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _Msg_CreateToken_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _Msg_UpdateToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _Msg_DeleteToken_Handler,
		},
		{
			MethodName: "CreateMintperm",
			Handler:    _Msg_CreateMintperm_Handler,
		},
		{
			MethodName: "UpdateMintperm",
			Handler:    _Msg_UpdateMintperm_Handler,
		},
		{
			MethodName: "DeleteMintperm",
			Handler:    _Msg_DeleteMintperm_Handler,
		},
		{
			MethodName: "CreateOptions",
			Handler:    _Msg_CreateOptions_Handler,
		},
		{
			MethodName: "UpdateOptions",
			Handler:    _Msg_UpdateOptions_Handler,
		},
		{
			MethodName: "DeleteOptions",
			Handler:    _Msg_DeleteOptions_Handler,
		},
		{
			MethodName: "Burn",
			Handler:    _Msg_Burn_Handler,
		},
		{
			MethodName: "WrapToken",
			Handler:    _Msg_WrapToken_Handler,
		},
		{
			MethodName: "UnwrapToken",
			Handler:    _Msg_UnwrapToken_Handler,
		},
		{
			MethodName: "SendWrapToken",
			Handler:    _Msg_SendWrapToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sixprotocol/tokenmngr/tx.proto",
}
