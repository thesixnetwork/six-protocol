// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: consume/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f35679059f933d, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f35679059f933d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryConsumeNftsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryConsumeNftsRequest) Reset()         { *m = QueryConsumeNftsRequest{} }
func (m *QueryConsumeNftsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConsumeNftsRequest) ProtoMessage()    {}
func (*QueryConsumeNftsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f35679059f933d, []int{2}
}
func (m *QueryConsumeNftsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumeNftsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumeNftsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumeNftsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumeNftsRequest.Merge(m, src)
}
func (m *QueryConsumeNftsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumeNftsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumeNftsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumeNftsRequest proto.InternalMessageInfo

func (m *QueryConsumeNftsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryConsumeNftsResponse struct {
	UseNft     []*UseNft           `protobuf:"bytes,1,rep,name=UseNft,proto3" json:"UseNft,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryConsumeNftsResponse) Reset()         { *m = QueryConsumeNftsResponse{} }
func (m *QueryConsumeNftsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConsumeNftsResponse) ProtoMessage()    {}
func (*QueryConsumeNftsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f35679059f933d, []int{3}
}
func (m *QueryConsumeNftsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumeNftsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumeNftsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumeNftsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumeNftsResponse.Merge(m, src)
}
func (m *QueryConsumeNftsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumeNftsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumeNftsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumeNftsResponse proto.InternalMessageInfo

func (m *QueryConsumeNftsResponse) GetUseNft() []*UseNft {
	if m != nil {
		return m.UseNft
	}
	return nil
}

func (m *QueryConsumeNftsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetNftUsedRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *QueryGetNftUsedRequest) Reset()         { *m = QueryGetNftUsedRequest{} }
func (m *QueryGetNftUsedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftUsedRequest) ProtoMessage()    {}
func (*QueryGetNftUsedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f35679059f933d, []int{4}
}
func (m *QueryGetNftUsedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftUsedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftUsedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftUsedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftUsedRequest.Merge(m, src)
}
func (m *QueryGetNftUsedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftUsedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftUsedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftUsedRequest proto.InternalMessageInfo

func (m *QueryGetNftUsedRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type QueryGetNftUsedResponse struct {
	NftUsed NftUsed `protobuf:"bytes,1,opt,name=nftUsed,proto3" json:"nftUsed"`
}

func (m *QueryGetNftUsedResponse) Reset()         { *m = QueryGetNftUsedResponse{} }
func (m *QueryGetNftUsedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftUsedResponse) ProtoMessage()    {}
func (*QueryGetNftUsedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f35679059f933d, []int{5}
}
func (m *QueryGetNftUsedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftUsedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftUsedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftUsedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftUsedResponse.Merge(m, src)
}
func (m *QueryGetNftUsedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftUsedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftUsedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftUsedResponse proto.InternalMessageInfo

func (m *QueryGetNftUsedResponse) GetNftUsed() NftUsed {
	if m != nil {
		return m.NftUsed
	}
	return NftUsed{}
}

type QueryAllNftUsedRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNftUsedRequest) Reset()         { *m = QueryAllNftUsedRequest{} }
func (m *QueryAllNftUsedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNftUsedRequest) ProtoMessage()    {}
func (*QueryAllNftUsedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f35679059f933d, []int{6}
}
func (m *QueryAllNftUsedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNftUsedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNftUsedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNftUsedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNftUsedRequest.Merge(m, src)
}
func (m *QueryAllNftUsedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNftUsedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNftUsedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNftUsedRequest proto.InternalMessageInfo

func (m *QueryAllNftUsedRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNftUsedResponse struct {
	NftUsed    []NftUsed           `protobuf:"bytes,1,rep,name=nftUsed,proto3" json:"nftUsed"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNftUsedResponse) Reset()         { *m = QueryAllNftUsedResponse{} }
func (m *QueryAllNftUsedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNftUsedResponse) ProtoMessage()    {}
func (*QueryAllNftUsedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f35679059f933d, []int{7}
}
func (m *QueryAllNftUsedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNftUsedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNftUsedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNftUsedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNftUsedResponse.Merge(m, src)
}
func (m *QueryAllNftUsedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNftUsedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNftUsedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNftUsedResponse proto.InternalMessageInfo

func (m *QueryAllNftUsedResponse) GetNftUsed() []NftUsed {
	if m != nil {
		return m.NftUsed
	}
	return nil
}

func (m *QueryAllNftUsedResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "thesixnetwork.sixprotocol.consume.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "thesixnetwork.sixprotocol.consume.QueryParamsResponse")
	proto.RegisterType((*QueryConsumeNftsRequest)(nil), "thesixnetwork.sixprotocol.consume.QueryConsumeNftsRequest")
	proto.RegisterType((*QueryConsumeNftsResponse)(nil), "thesixnetwork.sixprotocol.consume.QueryConsumeNftsResponse")
	proto.RegisterType((*QueryGetNftUsedRequest)(nil), "thesixnetwork.sixprotocol.consume.QueryGetNftUsedRequest")
	proto.RegisterType((*QueryGetNftUsedResponse)(nil), "thesixnetwork.sixprotocol.consume.QueryGetNftUsedResponse")
	proto.RegisterType((*QueryAllNftUsedRequest)(nil), "thesixnetwork.sixprotocol.consume.QueryAllNftUsedRequest")
	proto.RegisterType((*QueryAllNftUsedResponse)(nil), "thesixnetwork.sixprotocol.consume.QueryAllNftUsedResponse")
}

func init() { proto.RegisterFile("consume/query.proto", fileDescriptor_67f35679059f933d) }

var fileDescriptor_67f35679059f933d = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4f, 0x4f, 0x13, 0x41,
	0x14, 0xef, 0x80, 0x94, 0x38, 0xdc, 0x86, 0x8a, 0x4d, 0x63, 0x56, 0xdc, 0x83, 0x7f, 0x1a, 0x9c,
	0x91, 0x0a, 0x44, 0xd1, 0x4b, 0x31, 0xb1, 0x89, 0x07, 0xc4, 0x26, 0x5c, 0x3c, 0x88, 0xdb, 0x32,
	0x5d, 0x36, 0x6c, 0x67, 0x96, 0xce, 0xac, 0x96, 0x18, 0x2f, 0x7e, 0x02, 0x13, 0xbf, 0x83, 0x17,
	0x13, 0xef, 0x5e, 0x8c, 0x47, 0x8e, 0x24, 0x5e, 0x3c, 0x19, 0xd3, 0xfa, 0x15, 0xbc, 0x9b, 0xce,
	0xbc, 0xd5, 0xae, 0x6b, 0x64, 0x41, 0x4e, 0x6d, 0xdf, 0xbe, 0xdf, 0xbf, 0xf7, 0xfa, 0x16, 0xcf,
	0xb6, 0xa5, 0x50, 0x71, 0x97, 0xb3, 0xbd, 0x98, 0xf7, 0xf6, 0x69, 0xd4, 0x93, 0x5a, 0x92, 0x4b,
	0x7a, 0x87, 0xab, 0xa0, 0x2f, 0xb8, 0x7e, 0x2e, 0x7b, 0xbb, 0x54, 0x05, 0x7d, 0x53, 0x6f, 0xcb,
	0x90, 0x42, 0x7b, 0xa5, 0xe4, 0x4b, 0x5f, 0x9a, 0x2a, 0x1b, 0x7d, 0xb3, 0xc0, 0xca, 0x05, 0x5f,
	0x4a, 0x3f, 0xe4, 0xcc, 0x8b, 0x02, 0xe6, 0x09, 0x21, 0xb5, 0xa7, 0x03, 0x29, 0x14, 0x3c, 0xad,
	0xb6, 0xa5, 0xea, 0x4a, 0xc5, 0x5a, 0x9e, 0x02, 0x3d, 0xf6, 0x6c, 0xb1, 0xc5, 0xb5, 0xb7, 0xc8,
	0x22, 0xcf, 0x0f, 0x84, 0x69, 0x86, 0xde, 0x52, 0xe2, 0x2b, 0xf2, 0x7a, 0x5e, 0x37, 0x61, 0x38,
	0x97, 0x54, 0x63, 0xc5, 0xb7, 0x44, 0x47, 0x43, 0x79, 0x2e, 0x29, 0x8b, 0x8e, 0xde, 0x8a, 0x15,
	0xdf, 0xb6, 0x75, 0xb7, 0x84, 0xc9, 0xa3, 0x91, 0xcc, 0x86, 0xe1, 0x68, 0xf2, 0xbd, 0x98, 0x2b,
	0xed, 0x3e, 0xc1, 0xb3, 0xa9, 0xaa, 0x8a, 0xa4, 0x50, 0x9c, 0x34, 0x70, 0xd1, 0x6a, 0x95, 0xd1,
	0x3c, 0xba, 0x3a, 0x53, 0xbb, 0x46, 0x8f, 0x9c, 0x02, 0xb5, 0x14, 0x6b, 0x67, 0x0e, 0xbe, 0x5e,
	0x2c, 0x34, 0x01, 0xee, 0x7a, 0xf8, 0xbc, 0xe1, 0xbf, 0x67, 0x9b, 0xd6, 0x3b, 0x3a, 0x91, 0x26,
	0xf7, 0x31, 0xfe, 0x9d, 0x14, 0x74, 0x2e, 0x53, 0x3b, 0x16, 0x3a, 0x1a, 0x0b, 0xb5, 0x6b, 0x80,
	0xb1, 0xd0, 0x0d, 0xcf, 0xe7, 0x80, 0x6d, 0x8e, 0x21, 0xdd, 0xb7, 0x08, 0x97, 0xb3, 0x1a, 0x10,
	0xa4, 0x8e, 0x8b, 0x9b, 0x6a, 0x54, 0x2a, 0xa3, 0xf9, 0xc9, 0x9c, 0x41, 0x2c, 0xa0, 0x09, 0x40,
	0xd2, 0x48, 0xf9, 0x9c, 0x30, 0x3e, 0xaf, 0x1c, 0xe9, 0xd3, 0xea, 0xa7, 0x8c, 0x52, 0x3c, 0x67,
	0x7c, 0x36, 0xb8, 0x5e, 0xef, 0xe8, 0x4d, 0xc5, 0xb7, 0x93, 0x51, 0x94, 0xf0, 0x94, 0x96, 0xbb,
	0xdc, 0x4e, 0xe1, 0x6c, 0xd3, 0xfe, 0x70, 0x39, 0xcc, 0x6e, 0xbc, 0x1f, 0x62, 0x3d, 0xc0, 0xd3,
	0xc2, 0x96, 0x60, 0x70, 0xd5, 0x1c, 0xb9, 0x80, 0x04, 0x36, 0x94, 0x10, 0xb8, 0x4f, 0xc1, 0x56,
	0x3d, 0x0c, 0xff, 0xb0, 0x75, 0x5a, 0x1b, 0x7a, 0x8f, 0x20, 0xc9, 0xb8, 0xc4, 0xdf, 0x92, 0x4c,
	0xfe, 0x57, 0x92, 0x53, 0xdb, 0x54, 0xed, 0xc7, 0x14, 0x9e, 0x32, 0x86, 0xc9, 0x3b, 0x84, 0x8b,
	0xf6, 0x8f, 0x4d, 0x96, 0x73, 0x18, 0xcb, 0x5e, 0x58, 0x65, 0xe5, 0xb8, 0x30, 0xeb, 0xc7, 0xad,
	0xbd, 0xfa, 0xfc, 0xfd, 0xcd, 0xc4, 0x02, 0xa9, 0xb2, 0x14, 0x9e, 0xa9, 0xa0, 0x7f, 0x3d, 0x21,
	0x60, 0xe9, 0x17, 0x03, 0xf9, 0x84, 0xf0, 0xcc, 0xd8, 0x15, 0x90, 0xd5, 0xbc, 0xda, 0xd9, 0xf3,
	0xac, 0xdc, 0x39, 0x11, 0x16, 0xcc, 0xdf, 0x32, 0xe6, 0x6b, 0xe4, 0x46, 0x1e, 0xf3, 0xf0, 0x39,
	0x7a, 0x87, 0x29, 0xf2, 0x11, 0xe1, 0x69, 0x58, 0x2f, 0xb9, 0x9d, 0xd7, 0x42, 0xe6, 0xa2, 0x2a,
	0xab, 0x27, 0x81, 0x82, 0xf9, 0xbb, 0xc6, 0xfc, 0x0a, 0x59, 0xca, 0x63, 0x3e, 0x79, 0xcb, 0xb2,
	0x17, 0xe6, 0x68, 0x5f, 0x92, 0x0f, 0x08, 0x63, 0x60, 0xac, 0x87, 0x61, 0xfe, 0x0c, 0x99, 0xf3,
	0xcb, 0x9f, 0x21, 0x7b, 0x56, 0xee, 0x92, 0xc9, 0x40, 0xc9, 0xc2, 0x71, 0x32, 0xac, 0x3d, 0x3c,
	0x18, 0x38, 0xe8, 0x70, 0xe0, 0xa0, 0x6f, 0x03, 0x07, 0xbd, 0x1e, 0x3a, 0x85, 0xc3, 0xa1, 0x53,
	0xf8, 0x32, 0x74, 0x0a, 0x8f, 0x97, 0xfd, 0x40, 0xef, 0xc4, 0x2d, 0xda, 0x96, 0xdd, 0x7f, 0x31,
	0xf6, 0x7f, 0x71, 0xea, 0xfd, 0x88, 0xab, 0x56, 0xd1, 0x3c, 0xb9, 0xf9, 0x33, 0x00, 0x00, 0xff,
	0xff, 0x44, 0x7e, 0x89, 0xe1, 0x5a, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of ConsumeNfts items.
	ConsumeNfts(ctx context.Context, in *QueryConsumeNftsRequest, opts ...grpc.CallOption) (*QueryConsumeNftsResponse, error)
	// Queries a NftUsed by index.
	NftUsed(ctx context.Context, in *QueryGetNftUsedRequest, opts ...grpc.CallOption) (*QueryGetNftUsedResponse, error)
	// Queries a list of NftUsed items.
	NftUsedAll(ctx context.Context, in *QueryAllNftUsedRequest, opts ...grpc.CallOption) (*QueryAllNftUsedResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.consume.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConsumeNfts(ctx context.Context, in *QueryConsumeNftsRequest, opts ...grpc.CallOption) (*QueryConsumeNftsResponse, error) {
	out := new(QueryConsumeNftsResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.consume.Query/ConsumeNfts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftUsed(ctx context.Context, in *QueryGetNftUsedRequest, opts ...grpc.CallOption) (*QueryGetNftUsedResponse, error) {
	out := new(QueryGetNftUsedResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.consume.Query/NftUsed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftUsedAll(ctx context.Context, in *QueryAllNftUsedRequest, opts ...grpc.CallOption) (*QueryAllNftUsedResponse, error) {
	out := new(QueryAllNftUsedResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.consume.Query/NftUsedAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of ConsumeNfts items.
	ConsumeNfts(context.Context, *QueryConsumeNftsRequest) (*QueryConsumeNftsResponse, error)
	// Queries a NftUsed by index.
	NftUsed(context.Context, *QueryGetNftUsedRequest) (*QueryGetNftUsedResponse, error)
	// Queries a list of NftUsed items.
	NftUsedAll(context.Context, *QueryAllNftUsedRequest) (*QueryAllNftUsedResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ConsumeNfts(ctx context.Context, req *QueryConsumeNftsRequest) (*QueryConsumeNftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeNfts not implemented")
}
func (*UnimplementedQueryServer) NftUsed(ctx context.Context, req *QueryGetNftUsedRequest) (*QueryGetNftUsedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftUsed not implemented")
}
func (*UnimplementedQueryServer) NftUsedAll(ctx context.Context, req *QueryAllNftUsedRequest) (*QueryAllNftUsedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftUsedAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.consume.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConsumeNfts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConsumeNftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConsumeNfts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.consume.Query/ConsumeNfts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConsumeNfts(ctx, req.(*QueryConsumeNftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftUsedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.consume.Query/NftUsed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftUsed(ctx, req.(*QueryGetNftUsedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftUsedAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNftUsedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftUsedAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.consume.Query/NftUsedAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftUsedAll(ctx, req.(*QueryAllNftUsedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thesixnetwork.sixprotocol.consume.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ConsumeNfts",
			Handler:    _Query_ConsumeNfts_Handler,
		},
		{
			MethodName: "NftUsed",
			Handler:    _Query_NftUsed_Handler,
		},
		{
			MethodName: "NftUsedAll",
			Handler:    _Query_NftUsedAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consume/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryConsumeNftsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumeNftsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumeNftsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConsumeNftsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumeNftsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumeNftsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UseNft) > 0 {
		for iNdEx := len(m.UseNft) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UseNft[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftUsedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftUsedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftUsedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftUsedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftUsedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftUsedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NftUsed.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllNftUsedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNftUsedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNftUsedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNftUsedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNftUsedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNftUsedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftUsed) > 0 {
		for iNdEx := len(m.NftUsed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NftUsed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryConsumeNftsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryConsumeNftsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UseNft) > 0 {
		for _, e := range m.UseNft {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftUsedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftUsedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NftUsed.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllNftUsedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNftUsedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NftUsed) > 0 {
		for _, e := range m.NftUsed {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumeNftsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumeNftsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumeNftsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumeNftsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumeNftsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumeNftsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseNft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UseNft = append(m.UseNft, &UseNft{})
			if err := m.UseNft[len(m.UseNft)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftUsedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftUsedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftUsedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftUsedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftUsedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftUsedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftUsed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftUsed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNftUsedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNftUsedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNftUsedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNftUsedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNftUsedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNftUsedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftUsed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftUsed = append(m.NftUsed, NftUsed{})
			if err := m.NftUsed[len(m.NftUsed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
