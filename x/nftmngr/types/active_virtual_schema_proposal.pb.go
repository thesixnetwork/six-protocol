// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nftmngr/active_virtual_schema_proposal.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ActiveVirtualSchemaProposal struct {
	Index             string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	VirtualSchemaCode string `protobuf:"bytes,2,opt,name=virtualSchemaCode,proto3" json:"virtualSchemaCode,omitempty"`
	Registry          string `protobuf:"bytes,3,opt,name=registry,proto3" json:"registry,omitempty"`
	Enable            bool   `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (m *ActiveVirtualSchemaProposal) Reset()         { *m = ActiveVirtualSchemaProposal{} }
func (m *ActiveVirtualSchemaProposal) String() string { return proto.CompactTextString(m) }
func (*ActiveVirtualSchemaProposal) ProtoMessage()    {}
func (*ActiveVirtualSchemaProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_77da69296ca3a224, []int{0}
}
func (m *ActiveVirtualSchemaProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveVirtualSchemaProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveVirtualSchemaProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveVirtualSchemaProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveVirtualSchemaProposal.Merge(m, src)
}
func (m *ActiveVirtualSchemaProposal) XXX_Size() int {
	return m.Size()
}
func (m *ActiveVirtualSchemaProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveVirtualSchemaProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveVirtualSchemaProposal proto.InternalMessageInfo

func (m *ActiveVirtualSchemaProposal) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ActiveVirtualSchemaProposal) GetVirtualSchemaCode() string {
	if m != nil {
		return m.VirtualSchemaCode
	}
	return ""
}

func (m *ActiveVirtualSchemaProposal) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *ActiveVirtualSchemaProposal) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func init() {
	proto.RegisterType((*ActiveVirtualSchemaProposal)(nil), "thesixnetwork.sixprotocol.nftmngr.ActiveVirtualSchemaProposal")
}

func init() {
	proto.RegisterFile("nftmngr/active_virtual_schema_proposal.proto", fileDescriptor_77da69296ca3a224)
}

var fileDescriptor_77da69296ca3a224 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xc9, 0x4b, 0x2b, 0xc9,
	0xcd, 0x4b, 0x2f, 0xd2, 0x4f, 0x4c, 0x2e, 0xc9, 0x2c, 0x4b, 0x8d, 0x2f, 0xcb, 0x2c, 0x2a, 0x29,
	0x4d, 0xcc, 0x89, 0x2f, 0x4e, 0xce, 0x48, 0xcd, 0x4d, 0x8c, 0x2f, 0x28, 0xca, 0x2f, 0xc8, 0x2f,
	0x4e, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52, 0x2c, 0xc9, 0x48, 0x2d, 0xce, 0xac,
	0xc8, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x2b, 0xce, 0xac, 0x00, 0x8b, 0x27, 0xe7, 0xe7,
	0xe8, 0x41, 0xcd, 0x51, 0x9a, 0xca, 0xc8, 0x25, 0xed, 0x08, 0x36, 0x2b, 0x0c, 0x62, 0x54, 0x30,
	0xd8, 0xa4, 0x00, 0xa8, 0x41, 0x42, 0x22, 0x5c, 0xac, 0x99, 0x79, 0x29, 0xa9, 0x15, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x10, 0x8e, 0x90, 0x0e, 0x97, 0x60, 0x19, 0xb2, 0x72, 0xe7, 0xfc,
	0x94, 0x54, 0x09, 0x26, 0xb0, 0x0a, 0x4c, 0x09, 0x21, 0x29, 0x2e, 0x8e, 0xa2, 0xd4, 0xf4, 0xcc,
	0xe2, 0x92, 0xa2, 0x4a, 0x09, 0x66, 0xb0, 0x22, 0x38, 0x5f, 0x48, 0x8c, 0x8b, 0x2d, 0x35, 0x2f,
	0x31, 0x29, 0x27, 0x55, 0x82, 0x45, 0x81, 0x51, 0x83, 0x23, 0x08, 0xca, 0x73, 0xf2, 0x3f, 0xf1,
	0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8,
	0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xd3, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24,
	0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0x14, 0xff, 0xe9, 0x17, 0x67, 0x56, 0xe8, 0xc2, 0x3c, 0xa8, 0x5f,
	0xa1, 0x0f, 0x0b, 0xaa, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0x8c, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0xbb, 0xf1, 0xdb, 0xd2, 0x42, 0x01, 0x00, 0x00,
}

func (m *ActiveVirtualSchemaProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveVirtualSchemaProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveVirtualSchemaProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Registry) > 0 {
		i -= len(m.Registry)
		copy(dAtA[i:], m.Registry)
		i = encodeVarintActiveVirtualSchemaProposal(dAtA, i, uint64(len(m.Registry)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VirtualSchemaCode) > 0 {
		i -= len(m.VirtualSchemaCode)
		copy(dAtA[i:], m.VirtualSchemaCode)
		i = encodeVarintActiveVirtualSchemaProposal(dAtA, i, uint64(len(m.VirtualSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintActiveVirtualSchemaProposal(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintActiveVirtualSchemaProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovActiveVirtualSchemaProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActiveVirtualSchemaProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovActiveVirtualSchemaProposal(uint64(l))
	}
	l = len(m.VirtualSchemaCode)
	if l > 0 {
		n += 1 + l + sovActiveVirtualSchemaProposal(uint64(l))
	}
	l = len(m.Registry)
	if l > 0 {
		n += 1 + l + sovActiveVirtualSchemaProposal(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	return n
}

func sovActiveVirtualSchemaProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActiveVirtualSchemaProposal(x uint64) (n int) {
	return sovActiveVirtualSchemaProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActiveVirtualSchemaProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveVirtualSchemaProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveVirtualSchemaProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveVirtualSchemaProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveVirtualSchemaProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveVirtualSchemaProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveVirtualSchemaProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveVirtualSchemaProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveVirtualSchemaProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveVirtualSchemaProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveVirtualSchemaProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveVirtualSchemaProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveVirtualSchemaProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveVirtualSchemaProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipActiveVirtualSchemaProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActiveVirtualSchemaProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActiveVirtualSchemaProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActiveVirtualSchemaProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActiveVirtualSchemaProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActiveVirtualSchemaProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActiveVirtualSchemaProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActiveVirtualSchemaProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActiveVirtualSchemaProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActiveVirtualSchemaProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActiveVirtualSchemaProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActiveVirtualSchemaProposal = fmt.Errorf("proto: unexpected end of group")
)
