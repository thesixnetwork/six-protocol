// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nftmngr/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetNFTSchemaRequest struct {
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *QueryGetNFTSchemaRequest) Reset()         { *m = QueryGetNFTSchemaRequest{} }
func (m *QueryGetNFTSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNFTSchemaRequest) ProtoMessage()    {}
func (*QueryGetNFTSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{2}
}
func (m *QueryGetNFTSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNFTSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNFTSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNFTSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNFTSchemaRequest.Merge(m, src)
}
func (m *QueryGetNFTSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNFTSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNFTSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNFTSchemaRequest proto.InternalMessageInfo

func (m *QueryGetNFTSchemaRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type QueryGetNFTSchemaResponse struct {
	NFTSchema NFTSchema `protobuf:"bytes,1,opt,name=nFTSchema,proto3" json:"nFTSchema"`
}

func (m *QueryGetNFTSchemaResponse) Reset()         { *m = QueryGetNFTSchemaResponse{} }
func (m *QueryGetNFTSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNFTSchemaResponse) ProtoMessage()    {}
func (*QueryGetNFTSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{3}
}
func (m *QueryGetNFTSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNFTSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNFTSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNFTSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNFTSchemaResponse.Merge(m, src)
}
func (m *QueryGetNFTSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNFTSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNFTSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNFTSchemaResponse proto.InternalMessageInfo

func (m *QueryGetNFTSchemaResponse) GetNFTSchema() NFTSchema {
	if m != nil {
		return m.NFTSchema
	}
	return NFTSchema{}
}

type QueryAllNFTSchemaRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNFTSchemaRequest) Reset()         { *m = QueryAllNFTSchemaRequest{} }
func (m *QueryAllNFTSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNFTSchemaRequest) ProtoMessage()    {}
func (*QueryAllNFTSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{4}
}
func (m *QueryAllNFTSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNFTSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNFTSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNFTSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNFTSchemaRequest.Merge(m, src)
}
func (m *QueryAllNFTSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNFTSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNFTSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNFTSchemaRequest proto.InternalMessageInfo

func (m *QueryAllNFTSchemaRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNFTSchemaResponse struct {
	NFTSchema  []NFTSchema         `protobuf:"bytes,1,rep,name=nFTSchema,proto3" json:"nFTSchema"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNFTSchemaResponse) Reset()         { *m = QueryAllNFTSchemaResponse{} }
func (m *QueryAllNFTSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNFTSchemaResponse) ProtoMessage()    {}
func (*QueryAllNFTSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{5}
}
func (m *QueryAllNFTSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNFTSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNFTSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNFTSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNFTSchemaResponse.Merge(m, src)
}
func (m *QueryAllNFTSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNFTSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNFTSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNFTSchemaResponse proto.InternalMessageInfo

func (m *QueryAllNFTSchemaResponse) GetNFTSchema() []NFTSchema {
	if m != nil {
		return m.NFTSchema
	}
	return nil
}

func (m *QueryAllNFTSchemaResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetNftDataRequest struct {
	NftSchemaCode string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	TokenId       string `protobuf:"bytes,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	WithGlobal    bool   `protobuf:"varint,3,opt,name=withGlobal,proto3" json:"withGlobal,omitempty"`
}

func (m *QueryGetNftDataRequest) Reset()         { *m = QueryGetNftDataRequest{} }
func (m *QueryGetNftDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftDataRequest) ProtoMessage()    {}
func (*QueryGetNftDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{6}
}
func (m *QueryGetNftDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftDataRequest.Merge(m, src)
}
func (m *QueryGetNftDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftDataRequest proto.InternalMessageInfo

func (m *QueryGetNftDataRequest) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *QueryGetNftDataRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *QueryGetNftDataRequest) GetWithGlobal() bool {
	if m != nil {
		return m.WithGlobal
	}
	return false
}

type QueryGetNftDataResponse struct {
	NftData NftData `protobuf:"bytes,1,opt,name=nftData,proto3" json:"nftData"`
}

func (m *QueryGetNftDataResponse) Reset()         { *m = QueryGetNftDataResponse{} }
func (m *QueryGetNftDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftDataResponse) ProtoMessage()    {}
func (*QueryGetNftDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{7}
}
func (m *QueryGetNftDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftDataResponse.Merge(m, src)
}
func (m *QueryGetNftDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftDataResponse proto.InternalMessageInfo

func (m *QueryGetNftDataResponse) GetNftData() NftData {
	if m != nil {
		return m.NftData
	}
	return NftData{}
}

type QueryAllNftDataRequest struct {
	WithGlobal bool               `protobuf:"varint,1,opt,name=withGlobal,proto3" json:"withGlobal,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNftDataRequest) Reset()         { *m = QueryAllNftDataRequest{} }
func (m *QueryAllNftDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNftDataRequest) ProtoMessage()    {}
func (*QueryAllNftDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{8}
}
func (m *QueryAllNftDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNftDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNftDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNftDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNftDataRequest.Merge(m, src)
}
func (m *QueryAllNftDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNftDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNftDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNftDataRequest proto.InternalMessageInfo

func (m *QueryAllNftDataRequest) GetWithGlobal() bool {
	if m != nil {
		return m.WithGlobal
	}
	return false
}

func (m *QueryAllNftDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNftDataResponse struct {
	NftData    []NftData           `protobuf:"bytes,1,rep,name=nftData,proto3" json:"nftData"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNftDataResponse) Reset()         { *m = QueryAllNftDataResponse{} }
func (m *QueryAllNftDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNftDataResponse) ProtoMessage()    {}
func (*QueryAllNftDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{9}
}
func (m *QueryAllNftDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNftDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNftDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNftDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNftDataResponse.Merge(m, src)
}
func (m *QueryAllNftDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNftDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNftDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNftDataResponse proto.InternalMessageInfo

func (m *QueryAllNftDataResponse) GetNftData() []NftData {
	if m != nil {
		return m.NftData
	}
	return nil
}

func (m *QueryAllNftDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetActionByRefIdRequest struct {
	RefId string `protobuf:"bytes,1,opt,name=refId,proto3" json:"refId,omitempty"`
}

func (m *QueryGetActionByRefIdRequest) Reset()         { *m = QueryGetActionByRefIdRequest{} }
func (m *QueryGetActionByRefIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetActionByRefIdRequest) ProtoMessage()    {}
func (*QueryGetActionByRefIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{10}
}
func (m *QueryGetActionByRefIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActionByRefIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActionByRefIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActionByRefIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActionByRefIdRequest.Merge(m, src)
}
func (m *QueryGetActionByRefIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActionByRefIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActionByRefIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActionByRefIdRequest proto.InternalMessageInfo

func (m *QueryGetActionByRefIdRequest) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

type QueryGetActionByRefIdResponse struct {
	ActionByRefId ActionByRefId `protobuf:"bytes,1,opt,name=actionByRefId,proto3" json:"actionByRefId"`
}

func (m *QueryGetActionByRefIdResponse) Reset()         { *m = QueryGetActionByRefIdResponse{} }
func (m *QueryGetActionByRefIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetActionByRefIdResponse) ProtoMessage()    {}
func (*QueryGetActionByRefIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{11}
}
func (m *QueryGetActionByRefIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActionByRefIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActionByRefIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActionByRefIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActionByRefIdResponse.Merge(m, src)
}
func (m *QueryGetActionByRefIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActionByRefIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActionByRefIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActionByRefIdResponse proto.InternalMessageInfo

func (m *QueryGetActionByRefIdResponse) GetActionByRefId() ActionByRefId {
	if m != nil {
		return m.ActionByRefId
	}
	return ActionByRefId{}
}

type QueryAllActionByRefIdRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActionByRefIdRequest) Reset()         { *m = QueryAllActionByRefIdRequest{} }
func (m *QueryAllActionByRefIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllActionByRefIdRequest) ProtoMessage()    {}
func (*QueryAllActionByRefIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{12}
}
func (m *QueryAllActionByRefIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActionByRefIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActionByRefIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActionByRefIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActionByRefIdRequest.Merge(m, src)
}
func (m *QueryAllActionByRefIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActionByRefIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActionByRefIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActionByRefIdRequest proto.InternalMessageInfo

func (m *QueryAllActionByRefIdRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllActionByRefIdResponse struct {
	ActionByRefId []ActionByRefId     `protobuf:"bytes,1,rep,name=actionByRefId,proto3" json:"actionByRefId"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActionByRefIdResponse) Reset()         { *m = QueryAllActionByRefIdResponse{} }
func (m *QueryAllActionByRefIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllActionByRefIdResponse) ProtoMessage()    {}
func (*QueryAllActionByRefIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{13}
}
func (m *QueryAllActionByRefIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActionByRefIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActionByRefIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActionByRefIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActionByRefIdResponse.Merge(m, src)
}
func (m *QueryAllActionByRefIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActionByRefIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActionByRefIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActionByRefIdResponse proto.InternalMessageInfo

func (m *QueryAllActionByRefIdResponse) GetActionByRefId() []ActionByRefId {
	if m != nil {
		return m.ActionByRefId
	}
	return nil
}

func (m *QueryAllActionByRefIdResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetOrganizationRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryGetOrganizationRequest) Reset()         { *m = QueryGetOrganizationRequest{} }
func (m *QueryGetOrganizationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrganizationRequest) ProtoMessage()    {}
func (*QueryGetOrganizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{14}
}
func (m *QueryGetOrganizationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrganizationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrganizationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrganizationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrganizationRequest.Merge(m, src)
}
func (m *QueryGetOrganizationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrganizationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrganizationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrganizationRequest proto.InternalMessageInfo

func (m *QueryGetOrganizationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryGetOrganizationResponse struct {
	Organization Organization `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization"`
}

func (m *QueryGetOrganizationResponse) Reset()         { *m = QueryGetOrganizationResponse{} }
func (m *QueryGetOrganizationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrganizationResponse) ProtoMessage()    {}
func (*QueryGetOrganizationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{15}
}
func (m *QueryGetOrganizationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrganizationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrganizationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrganizationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrganizationResponse.Merge(m, src)
}
func (m *QueryGetOrganizationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrganizationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrganizationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrganizationResponse proto.InternalMessageInfo

func (m *QueryGetOrganizationResponse) GetOrganization() Organization {
	if m != nil {
		return m.Organization
	}
	return Organization{}
}

type QueryAllOrganizationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOrganizationRequest) Reset()         { *m = QueryAllOrganizationRequest{} }
func (m *QueryAllOrganizationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrganizationRequest) ProtoMessage()    {}
func (*QueryAllOrganizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{16}
}
func (m *QueryAllOrganizationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrganizationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrganizationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrganizationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrganizationRequest.Merge(m, src)
}
func (m *QueryAllOrganizationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrganizationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrganizationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrganizationRequest proto.InternalMessageInfo

func (m *QueryAllOrganizationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOrganizationResponse struct {
	Organization []Organization      `protobuf:"bytes,1,rep,name=organization,proto3" json:"organization"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOrganizationResponse) Reset()         { *m = QueryAllOrganizationResponse{} }
func (m *QueryAllOrganizationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrganizationResponse) ProtoMessage()    {}
func (*QueryAllOrganizationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{17}
}
func (m *QueryAllOrganizationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrganizationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrganizationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrganizationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrganizationResponse.Merge(m, src)
}
func (m *QueryAllOrganizationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrganizationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrganizationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrganizationResponse proto.InternalMessageInfo

func (m *QueryAllOrganizationResponse) GetOrganization() []Organization {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *QueryAllOrganizationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetNftCollectionRequest struct {
	NftSchemaCode string             `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetNftCollectionRequest) Reset()         { *m = QueryGetNftCollectionRequest{} }
func (m *QueryGetNftCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftCollectionRequest) ProtoMessage()    {}
func (*QueryGetNftCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{18}
}
func (m *QueryGetNftCollectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftCollectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftCollectionRequest.Merge(m, src)
}
func (m *QueryGetNftCollectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftCollectionRequest proto.InternalMessageInfo

func (m *QueryGetNftCollectionRequest) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *QueryGetNftCollectionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetNftCollectionResponse struct {
	NftCollection []*NftData          `protobuf:"bytes,1,rep,name=nftCollection,proto3" json:"nftCollection,omitempty"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetNftCollectionResponse) Reset()         { *m = QueryGetNftCollectionResponse{} }
func (m *QueryGetNftCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftCollectionResponse) ProtoMessage()    {}
func (*QueryGetNftCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{19}
}
func (m *QueryGetNftCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftCollectionResponse.Merge(m, src)
}
func (m *QueryGetNftCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftCollectionResponse proto.InternalMessageInfo

func (m *QueryGetNftCollectionResponse) GetNftCollection() []*NftData {
	if m != nil {
		return m.NftCollection
	}
	return nil
}

func (m *QueryGetNftCollectionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetNFTSchemaByContractRequest struct {
	OriginContractAddress string `protobuf:"bytes,1,opt,name=originContractAddress,proto3" json:"originContractAddress,omitempty"`
}

func (m *QueryGetNFTSchemaByContractRequest) Reset()         { *m = QueryGetNFTSchemaByContractRequest{} }
func (m *QueryGetNFTSchemaByContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNFTSchemaByContractRequest) ProtoMessage()    {}
func (*QueryGetNFTSchemaByContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{20}
}
func (m *QueryGetNFTSchemaByContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNFTSchemaByContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNFTSchemaByContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNFTSchemaByContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNFTSchemaByContractRequest.Merge(m, src)
}
func (m *QueryGetNFTSchemaByContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNFTSchemaByContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNFTSchemaByContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNFTSchemaByContractRequest proto.InternalMessageInfo

func (m *QueryGetNFTSchemaByContractRequest) GetOriginContractAddress() string {
	if m != nil {
		return m.OriginContractAddress
	}
	return ""
}

type QueryGetNFTSchemaByContractResponse struct {
	NFTSchemaByContract NFTSchemaByContract `protobuf:"bytes,1,opt,name=nFTSchemaByContract,proto3" json:"nFTSchemaByContract"`
}

func (m *QueryGetNFTSchemaByContractResponse) Reset()         { *m = QueryGetNFTSchemaByContractResponse{} }
func (m *QueryGetNFTSchemaByContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNFTSchemaByContractResponse) ProtoMessage()    {}
func (*QueryGetNFTSchemaByContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{21}
}
func (m *QueryGetNFTSchemaByContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNFTSchemaByContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNFTSchemaByContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNFTSchemaByContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNFTSchemaByContractResponse.Merge(m, src)
}
func (m *QueryGetNFTSchemaByContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNFTSchemaByContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNFTSchemaByContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNFTSchemaByContractResponse proto.InternalMessageInfo

func (m *QueryGetNFTSchemaByContractResponse) GetNFTSchemaByContract() NFTSchemaByContract {
	if m != nil {
		return m.NFTSchemaByContract
	}
	return NFTSchemaByContract{}
}

type QueryAllNFTSchemaByContractRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNFTSchemaByContractRequest) Reset()         { *m = QueryAllNFTSchemaByContractRequest{} }
func (m *QueryAllNFTSchemaByContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNFTSchemaByContractRequest) ProtoMessage()    {}
func (*QueryAllNFTSchemaByContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{22}
}
func (m *QueryAllNFTSchemaByContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNFTSchemaByContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNFTSchemaByContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNFTSchemaByContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNFTSchemaByContractRequest.Merge(m, src)
}
func (m *QueryAllNFTSchemaByContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNFTSchemaByContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNFTSchemaByContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNFTSchemaByContractRequest proto.InternalMessageInfo

func (m *QueryAllNFTSchemaByContractRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNFTSchemaByContractResponse struct {
	NFTSchemaByContract []NFTSchemaByContract `protobuf:"bytes,1,rep,name=nFTSchemaByContract,proto3" json:"nFTSchemaByContract"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNFTSchemaByContractResponse) Reset()         { *m = QueryAllNFTSchemaByContractResponse{} }
func (m *QueryAllNFTSchemaByContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNFTSchemaByContractResponse) ProtoMessage()    {}
func (*QueryAllNFTSchemaByContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{23}
}
func (m *QueryAllNFTSchemaByContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNFTSchemaByContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNFTSchemaByContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNFTSchemaByContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNFTSchemaByContractResponse.Merge(m, src)
}
func (m *QueryAllNFTSchemaByContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNFTSchemaByContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNFTSchemaByContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNFTSchemaByContractResponse proto.InternalMessageInfo

func (m *QueryAllNFTSchemaByContractResponse) GetNFTSchemaByContract() []NFTSchemaByContract {
	if m != nil {
		return m.NFTSchemaByContract
	}
	return nil
}

func (m *QueryAllNFTSchemaByContractResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetNFTFeeConfigRequest struct {
}

func (m *QueryGetNFTFeeConfigRequest) Reset()         { *m = QueryGetNFTFeeConfigRequest{} }
func (m *QueryGetNFTFeeConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNFTFeeConfigRequest) ProtoMessage()    {}
func (*QueryGetNFTFeeConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{24}
}
func (m *QueryGetNFTFeeConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNFTFeeConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNFTFeeConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNFTFeeConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNFTFeeConfigRequest.Merge(m, src)
}
func (m *QueryGetNFTFeeConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNFTFeeConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNFTFeeConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNFTFeeConfigRequest proto.InternalMessageInfo

type QueryGetNFTFeeConfigResponse struct {
	NFTFeeConfig NFTFeeConfig `protobuf:"bytes,1,opt,name=NFTFeeConfig,proto3" json:"NFTFeeConfig"`
}

func (m *QueryGetNFTFeeConfigResponse) Reset()         { *m = QueryGetNFTFeeConfigResponse{} }
func (m *QueryGetNFTFeeConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNFTFeeConfigResponse) ProtoMessage()    {}
func (*QueryGetNFTFeeConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{25}
}
func (m *QueryGetNFTFeeConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNFTFeeConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNFTFeeConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNFTFeeConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNFTFeeConfigResponse.Merge(m, src)
}
func (m *QueryGetNFTFeeConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNFTFeeConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNFTFeeConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNFTFeeConfigResponse proto.InternalMessageInfo

func (m *QueryGetNFTFeeConfigResponse) GetNFTFeeConfig() NFTFeeConfig {
	if m != nil {
		return m.NFTFeeConfig
	}
	return NFTFeeConfig{}
}

type QueryGetNFTFeeBalanceRequest struct {
}

func (m *QueryGetNFTFeeBalanceRequest) Reset()         { *m = QueryGetNFTFeeBalanceRequest{} }
func (m *QueryGetNFTFeeBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNFTFeeBalanceRequest) ProtoMessage()    {}
func (*QueryGetNFTFeeBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{26}
}
func (m *QueryGetNFTFeeBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNFTFeeBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNFTFeeBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNFTFeeBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNFTFeeBalanceRequest.Merge(m, src)
}
func (m *QueryGetNFTFeeBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNFTFeeBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNFTFeeBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNFTFeeBalanceRequest proto.InternalMessageInfo

type QueryGetNFTFeeBalanceResponse struct {
	NFTFeeBalance NFTFeeBalance `protobuf:"bytes,1,opt,name=NFTFeeBalance,proto3" json:"NFTFeeBalance"`
}

func (m *QueryGetNFTFeeBalanceResponse) Reset()         { *m = QueryGetNFTFeeBalanceResponse{} }
func (m *QueryGetNFTFeeBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNFTFeeBalanceResponse) ProtoMessage()    {}
func (*QueryGetNFTFeeBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{27}
}
func (m *QueryGetNFTFeeBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNFTFeeBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNFTFeeBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNFTFeeBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNFTFeeBalanceResponse.Merge(m, src)
}
func (m *QueryGetNFTFeeBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNFTFeeBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNFTFeeBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNFTFeeBalanceResponse proto.InternalMessageInfo

func (m *QueryGetNFTFeeBalanceResponse) GetNFTFeeBalance() NFTFeeBalance {
	if m != nil {
		return m.NFTFeeBalance
	}
	return NFTFeeBalance{}
}

type QueryGetMetadataCreatorRequest struct {
	NftSchemaCode string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
}

func (m *QueryGetMetadataCreatorRequest) Reset()         { *m = QueryGetMetadataCreatorRequest{} }
func (m *QueryGetMetadataCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMetadataCreatorRequest) ProtoMessage()    {}
func (*QueryGetMetadataCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{28}
}
func (m *QueryGetMetadataCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMetadataCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMetadataCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMetadataCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMetadataCreatorRequest.Merge(m, src)
}
func (m *QueryGetMetadataCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMetadataCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMetadataCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMetadataCreatorRequest proto.InternalMessageInfo

func (m *QueryGetMetadataCreatorRequest) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

type QueryGetMetadataCreatorResponse struct {
	MetadataCreator MetadataCreator `protobuf:"bytes,1,opt,name=metadataCreator,proto3" json:"metadataCreator"`
}

func (m *QueryGetMetadataCreatorResponse) Reset()         { *m = QueryGetMetadataCreatorResponse{} }
func (m *QueryGetMetadataCreatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMetadataCreatorResponse) ProtoMessage()    {}
func (*QueryGetMetadataCreatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{29}
}
func (m *QueryGetMetadataCreatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMetadataCreatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMetadataCreatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMetadataCreatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMetadataCreatorResponse.Merge(m, src)
}
func (m *QueryGetMetadataCreatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMetadataCreatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMetadataCreatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMetadataCreatorResponse proto.InternalMessageInfo

func (m *QueryGetMetadataCreatorResponse) GetMetadataCreator() MetadataCreator {
	if m != nil {
		return m.MetadataCreator
	}
	return MetadataCreator{}
}

type QueryAllMetadataCreatorRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMetadataCreatorRequest) Reset()         { *m = QueryAllMetadataCreatorRequest{} }
func (m *QueryAllMetadataCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMetadataCreatorRequest) ProtoMessage()    {}
func (*QueryAllMetadataCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{30}
}
func (m *QueryAllMetadataCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMetadataCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMetadataCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMetadataCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMetadataCreatorRequest.Merge(m, src)
}
func (m *QueryAllMetadataCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMetadataCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMetadataCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMetadataCreatorRequest proto.InternalMessageInfo

func (m *QueryAllMetadataCreatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMetadataCreatorResponse struct {
	MetadataCreator []MetadataCreator   `protobuf:"bytes,1,rep,name=metadataCreator,proto3" json:"metadataCreator"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMetadataCreatorResponse) Reset()         { *m = QueryAllMetadataCreatorResponse{} }
func (m *QueryAllMetadataCreatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMetadataCreatorResponse) ProtoMessage()    {}
func (*QueryAllMetadataCreatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{31}
}
func (m *QueryAllMetadataCreatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMetadataCreatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMetadataCreatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMetadataCreatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMetadataCreatorResponse.Merge(m, src)
}
func (m *QueryAllMetadataCreatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMetadataCreatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMetadataCreatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMetadataCreatorResponse proto.InternalMessageInfo

func (m *QueryAllMetadataCreatorResponse) GetMetadataCreator() []MetadataCreator {
	if m != nil {
		return m.MetadataCreator
	}
	return nil
}

func (m *QueryAllMetadataCreatorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetActionExecutorRequest struct {
	NftSchemaCode   string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	ExecutorAddress string `protobuf:"bytes,2,opt,name=executorAddress,proto3" json:"executorAddress,omitempty"`
}

func (m *QueryGetActionExecutorRequest) Reset()         { *m = QueryGetActionExecutorRequest{} }
func (m *QueryGetActionExecutorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetActionExecutorRequest) ProtoMessage()    {}
func (*QueryGetActionExecutorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{32}
}
func (m *QueryGetActionExecutorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActionExecutorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActionExecutorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActionExecutorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActionExecutorRequest.Merge(m, src)
}
func (m *QueryGetActionExecutorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActionExecutorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActionExecutorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActionExecutorRequest proto.InternalMessageInfo

func (m *QueryGetActionExecutorRequest) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *QueryGetActionExecutorRequest) GetExecutorAddress() string {
	if m != nil {
		return m.ExecutorAddress
	}
	return ""
}

type QueryGetActionExecutorResponse struct {
	ActionExecutor ActionExecutor `protobuf:"bytes,1,opt,name=actionExecutor,proto3" json:"actionExecutor"`
}

func (m *QueryGetActionExecutorResponse) Reset()         { *m = QueryGetActionExecutorResponse{} }
func (m *QueryGetActionExecutorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetActionExecutorResponse) ProtoMessage()    {}
func (*QueryGetActionExecutorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{33}
}
func (m *QueryGetActionExecutorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActionExecutorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActionExecutorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActionExecutorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActionExecutorResponse.Merge(m, src)
}
func (m *QueryGetActionExecutorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActionExecutorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActionExecutorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActionExecutorResponse proto.InternalMessageInfo

func (m *QueryGetActionExecutorResponse) GetActionExecutor() ActionExecutor {
	if m != nil {
		return m.ActionExecutor
	}
	return ActionExecutor{}
}

type QueryAllActionExecutorRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActionExecutorRequest) Reset()         { *m = QueryAllActionExecutorRequest{} }
func (m *QueryAllActionExecutorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllActionExecutorRequest) ProtoMessage()    {}
func (*QueryAllActionExecutorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{34}
}
func (m *QueryAllActionExecutorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActionExecutorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActionExecutorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActionExecutorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActionExecutorRequest.Merge(m, src)
}
func (m *QueryAllActionExecutorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActionExecutorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActionExecutorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActionExecutorRequest proto.InternalMessageInfo

func (m *QueryAllActionExecutorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllActionExecutorResponse struct {
	ActionExecutor []ActionExecutor    `protobuf:"bytes,1,rep,name=actionExecutor,proto3" json:"actionExecutor"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActionExecutorResponse) Reset()         { *m = QueryAllActionExecutorResponse{} }
func (m *QueryAllActionExecutorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllActionExecutorResponse) ProtoMessage()    {}
func (*QueryAllActionExecutorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{35}
}
func (m *QueryAllActionExecutorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActionExecutorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActionExecutorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActionExecutorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActionExecutorResponse.Merge(m, src)
}
func (m *QueryAllActionExecutorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActionExecutorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActionExecutorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActionExecutorResponse proto.InternalMessageInfo

func (m *QueryAllActionExecutorResponse) GetActionExecutor() []ActionExecutor {
	if m != nil {
		return m.ActionExecutor
	}
	return nil
}

func (m *QueryAllActionExecutorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSchemaAttributeRequest struct {
	NftSchemaCode string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryGetSchemaAttributeRequest) Reset()         { *m = QueryGetSchemaAttributeRequest{} }
func (m *QueryGetSchemaAttributeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSchemaAttributeRequest) ProtoMessage()    {}
func (*QueryGetSchemaAttributeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{36}
}
func (m *QueryGetSchemaAttributeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSchemaAttributeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSchemaAttributeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSchemaAttributeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSchemaAttributeRequest.Merge(m, src)
}
func (m *QueryGetSchemaAttributeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSchemaAttributeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSchemaAttributeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSchemaAttributeRequest proto.InternalMessageInfo

func (m *QueryGetSchemaAttributeRequest) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *QueryGetSchemaAttributeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryGetSchemaAttributeResponse struct {
	SchemaAttribute SchemaAttribute `protobuf:"bytes,1,opt,name=schemaAttribute,proto3" json:"schemaAttribute"`
}

func (m *QueryGetSchemaAttributeResponse) Reset()         { *m = QueryGetSchemaAttributeResponse{} }
func (m *QueryGetSchemaAttributeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSchemaAttributeResponse) ProtoMessage()    {}
func (*QueryGetSchemaAttributeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{37}
}
func (m *QueryGetSchemaAttributeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSchemaAttributeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSchemaAttributeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSchemaAttributeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSchemaAttributeResponse.Merge(m, src)
}
func (m *QueryGetSchemaAttributeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSchemaAttributeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSchemaAttributeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSchemaAttributeResponse proto.InternalMessageInfo

func (m *QueryGetSchemaAttributeResponse) GetSchemaAttribute() SchemaAttribute {
	if m != nil {
		return m.SchemaAttribute
	}
	return SchemaAttribute{}
}

type QueryAllSchemaAttributeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSchemaAttributeRequest) Reset()         { *m = QueryAllSchemaAttributeRequest{} }
func (m *QueryAllSchemaAttributeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSchemaAttributeRequest) ProtoMessage()    {}
func (*QueryAllSchemaAttributeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{38}
}
func (m *QueryAllSchemaAttributeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSchemaAttributeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSchemaAttributeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSchemaAttributeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSchemaAttributeRequest.Merge(m, src)
}
func (m *QueryAllSchemaAttributeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSchemaAttributeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSchemaAttributeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSchemaAttributeRequest proto.InternalMessageInfo

func (m *QueryAllSchemaAttributeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSchemaAttributeResponse struct {
	SchemaAttribute []SchemaAttribute   `protobuf:"bytes,1,rep,name=schemaAttribute,proto3" json:"schemaAttribute"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSchemaAttributeResponse) Reset()         { *m = QueryAllSchemaAttributeResponse{} }
func (m *QueryAllSchemaAttributeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSchemaAttributeResponse) ProtoMessage()    {}
func (*QueryAllSchemaAttributeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{39}
}
func (m *QueryAllSchemaAttributeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSchemaAttributeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSchemaAttributeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSchemaAttributeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSchemaAttributeResponse.Merge(m, src)
}
func (m *QueryAllSchemaAttributeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSchemaAttributeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSchemaAttributeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSchemaAttributeResponse proto.InternalMessageInfo

func (m *QueryAllSchemaAttributeResponse) GetSchemaAttribute() []SchemaAttribute {
	if m != nil {
		return m.SchemaAttribute
	}
	return nil
}

func (m *QueryAllSchemaAttributeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListAttributeBySchemaRequest struct {
	NftSchemaCode string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
}

func (m *QueryListAttributeBySchemaRequest) Reset()         { *m = QueryListAttributeBySchemaRequest{} }
func (m *QueryListAttributeBySchemaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListAttributeBySchemaRequest) ProtoMessage()    {}
func (*QueryListAttributeBySchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{40}
}
func (m *QueryListAttributeBySchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListAttributeBySchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListAttributeBySchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListAttributeBySchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListAttributeBySchemaRequest.Merge(m, src)
}
func (m *QueryListAttributeBySchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListAttributeBySchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListAttributeBySchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListAttributeBySchemaRequest proto.InternalMessageInfo

func (m *QueryListAttributeBySchemaRequest) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

type QueryListAttributeBySchemaResponse struct {
	SchemaAttribute []SchemaAttribute `protobuf:"bytes,1,rep,name=schemaAttribute,proto3" json:"schemaAttribute"`
}

func (m *QueryListAttributeBySchemaResponse) Reset()         { *m = QueryListAttributeBySchemaResponse{} }
func (m *QueryListAttributeBySchemaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListAttributeBySchemaResponse) ProtoMessage()    {}
func (*QueryListAttributeBySchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{41}
}
func (m *QueryListAttributeBySchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListAttributeBySchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListAttributeBySchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListAttributeBySchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListAttributeBySchemaResponse.Merge(m, src)
}
func (m *QueryListAttributeBySchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListAttributeBySchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListAttributeBySchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListAttributeBySchemaResponse proto.InternalMessageInfo

func (m *QueryListAttributeBySchemaResponse) GetSchemaAttribute() []SchemaAttribute {
	if m != nil {
		return m.SchemaAttribute
	}
	return nil
}

type QueryGetActionOfSchemaRequest struct {
	NftSchemaCode string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryGetActionOfSchemaRequest) Reset()         { *m = QueryGetActionOfSchemaRequest{} }
func (m *QueryGetActionOfSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetActionOfSchemaRequest) ProtoMessage()    {}
func (*QueryGetActionOfSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{42}
}
func (m *QueryGetActionOfSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActionOfSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActionOfSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActionOfSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActionOfSchemaRequest.Merge(m, src)
}
func (m *QueryGetActionOfSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActionOfSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActionOfSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActionOfSchemaRequest proto.InternalMessageInfo

func (m *QueryGetActionOfSchemaRequest) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *QueryGetActionOfSchemaRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryGetActionOfSchemaResponse struct {
	ActionOfSchema ActionOfSchema `protobuf:"bytes,1,opt,name=actionOfSchema,proto3" json:"actionOfSchema"`
}

func (m *QueryGetActionOfSchemaResponse) Reset()         { *m = QueryGetActionOfSchemaResponse{} }
func (m *QueryGetActionOfSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetActionOfSchemaResponse) ProtoMessage()    {}
func (*QueryGetActionOfSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{43}
}
func (m *QueryGetActionOfSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActionOfSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActionOfSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActionOfSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActionOfSchemaResponse.Merge(m, src)
}
func (m *QueryGetActionOfSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActionOfSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActionOfSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActionOfSchemaResponse proto.InternalMessageInfo

func (m *QueryGetActionOfSchemaResponse) GetActionOfSchema() ActionOfSchema {
	if m != nil {
		return m.ActionOfSchema
	}
	return ActionOfSchema{}
}

type QueryAllActionOfSchemaRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActionOfSchemaRequest) Reset()         { *m = QueryAllActionOfSchemaRequest{} }
func (m *QueryAllActionOfSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllActionOfSchemaRequest) ProtoMessage()    {}
func (*QueryAllActionOfSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{44}
}
func (m *QueryAllActionOfSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActionOfSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActionOfSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActionOfSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActionOfSchemaRequest.Merge(m, src)
}
func (m *QueryAllActionOfSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActionOfSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActionOfSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActionOfSchemaRequest proto.InternalMessageInfo

func (m *QueryAllActionOfSchemaRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllActionOfSchemaResponse struct {
	ActionOfSchema []ActionOfSchema    `protobuf:"bytes,1,rep,name=actionOfSchema,proto3" json:"actionOfSchema"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActionOfSchemaResponse) Reset()         { *m = QueryAllActionOfSchemaResponse{} }
func (m *QueryAllActionOfSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllActionOfSchemaResponse) ProtoMessage()    {}
func (*QueryAllActionOfSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{45}
}
func (m *QueryAllActionOfSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActionOfSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActionOfSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActionOfSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActionOfSchemaResponse.Merge(m, src)
}
func (m *QueryAllActionOfSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActionOfSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActionOfSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActionOfSchemaResponse proto.InternalMessageInfo

func (m *QueryAllActionOfSchemaResponse) GetActionOfSchema() []ActionOfSchema {
	if m != nil {
		return m.ActionOfSchema
	}
	return nil
}

func (m *QueryAllActionOfSchemaResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetExecutorOfSchemaRequest struct {
	NftSchemaCode string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
}

func (m *QueryGetExecutorOfSchemaRequest) Reset()         { *m = QueryGetExecutorOfSchemaRequest{} }
func (m *QueryGetExecutorOfSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetExecutorOfSchemaRequest) ProtoMessage()    {}
func (*QueryGetExecutorOfSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{46}
}
func (m *QueryGetExecutorOfSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExecutorOfSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExecutorOfSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExecutorOfSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExecutorOfSchemaRequest.Merge(m, src)
}
func (m *QueryGetExecutorOfSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExecutorOfSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExecutorOfSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExecutorOfSchemaRequest proto.InternalMessageInfo

func (m *QueryGetExecutorOfSchemaRequest) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

type QueryGetExecutorOfSchemaResponse struct {
	ExecutorOfSchema ExecutorOfSchema `protobuf:"bytes,1,opt,name=executorOfSchema,proto3" json:"executorOfSchema"`
}

func (m *QueryGetExecutorOfSchemaResponse) Reset()         { *m = QueryGetExecutorOfSchemaResponse{} }
func (m *QueryGetExecutorOfSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetExecutorOfSchemaResponse) ProtoMessage()    {}
func (*QueryGetExecutorOfSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{47}
}
func (m *QueryGetExecutorOfSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExecutorOfSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExecutorOfSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExecutorOfSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExecutorOfSchemaResponse.Merge(m, src)
}
func (m *QueryGetExecutorOfSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExecutorOfSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExecutorOfSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExecutorOfSchemaResponse proto.InternalMessageInfo

func (m *QueryGetExecutorOfSchemaResponse) GetExecutorOfSchema() ExecutorOfSchema {
	if m != nil {
		return m.ExecutorOfSchema
	}
	return ExecutorOfSchema{}
}

type QueryAllExecutorOfSchemaRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExecutorOfSchemaRequest) Reset()         { *m = QueryAllExecutorOfSchemaRequest{} }
func (m *QueryAllExecutorOfSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllExecutorOfSchemaRequest) ProtoMessage()    {}
func (*QueryAllExecutorOfSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{48}
}
func (m *QueryAllExecutorOfSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExecutorOfSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExecutorOfSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExecutorOfSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExecutorOfSchemaRequest.Merge(m, src)
}
func (m *QueryAllExecutorOfSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExecutorOfSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExecutorOfSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExecutorOfSchemaRequest proto.InternalMessageInfo

func (m *QueryAllExecutorOfSchemaRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllExecutorOfSchemaResponse struct {
	ExecutorOfSchema []ExecutorOfSchema  `protobuf:"bytes,1,rep,name=executorOfSchema,proto3" json:"executorOfSchema"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExecutorOfSchemaResponse) Reset()         { *m = QueryAllExecutorOfSchemaResponse{} }
func (m *QueryAllExecutorOfSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllExecutorOfSchemaResponse) ProtoMessage()    {}
func (*QueryAllExecutorOfSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{49}
}
func (m *QueryAllExecutorOfSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExecutorOfSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExecutorOfSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExecutorOfSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExecutorOfSchemaResponse.Merge(m, src)
}
func (m *QueryAllExecutorOfSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExecutorOfSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExecutorOfSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExecutorOfSchemaResponse proto.InternalMessageInfo

func (m *QueryAllExecutorOfSchemaResponse) GetExecutorOfSchema() []ExecutorOfSchema {
	if m != nil {
		return m.ExecutorOfSchema
	}
	return nil
}

func (m *QueryAllExecutorOfSchemaResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetVirtualActionRequest struct {
	NftSchemaCode string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryGetVirtualActionRequest) Reset()         { *m = QueryGetVirtualActionRequest{} }
func (m *QueryGetVirtualActionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVirtualActionRequest) ProtoMessage()    {}
func (*QueryGetVirtualActionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{50}
}
func (m *QueryGetVirtualActionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVirtualActionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVirtualActionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVirtualActionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVirtualActionRequest.Merge(m, src)
}
func (m *QueryGetVirtualActionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVirtualActionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVirtualActionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVirtualActionRequest proto.InternalMessageInfo

func (m *QueryGetVirtualActionRequest) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *QueryGetVirtualActionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryGetVirtualActionResponse struct {
	VirtualAction VirtualAction `protobuf:"bytes,1,opt,name=virtualAction,proto3" json:"virtualAction"`
}

func (m *QueryGetVirtualActionResponse) Reset()         { *m = QueryGetVirtualActionResponse{} }
func (m *QueryGetVirtualActionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVirtualActionResponse) ProtoMessage()    {}
func (*QueryGetVirtualActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{51}
}
func (m *QueryGetVirtualActionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVirtualActionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVirtualActionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVirtualActionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVirtualActionResponse.Merge(m, src)
}
func (m *QueryGetVirtualActionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVirtualActionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVirtualActionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVirtualActionResponse proto.InternalMessageInfo

func (m *QueryGetVirtualActionResponse) GetVirtualAction() VirtualAction {
	if m != nil {
		return m.VirtualAction
	}
	return VirtualAction{}
}

type QueryAllVirtualActionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVirtualActionRequest) Reset()         { *m = QueryAllVirtualActionRequest{} }
func (m *QueryAllVirtualActionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVirtualActionRequest) ProtoMessage()    {}
func (*QueryAllVirtualActionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{52}
}
func (m *QueryAllVirtualActionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVirtualActionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVirtualActionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVirtualActionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVirtualActionRequest.Merge(m, src)
}
func (m *QueryAllVirtualActionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVirtualActionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVirtualActionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVirtualActionRequest proto.InternalMessageInfo

func (m *QueryAllVirtualActionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVirtualActionResponse struct {
	VirtualAction []VirtualAction     `protobuf:"bytes,1,rep,name=virtualAction,proto3" json:"virtualAction"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVirtualActionResponse) Reset()         { *m = QueryAllVirtualActionResponse{} }
func (m *QueryAllVirtualActionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVirtualActionResponse) ProtoMessage()    {}
func (*QueryAllVirtualActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{53}
}
func (m *QueryAllVirtualActionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVirtualActionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVirtualActionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVirtualActionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVirtualActionResponse.Merge(m, src)
}
func (m *QueryAllVirtualActionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVirtualActionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVirtualActionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVirtualActionResponse proto.InternalMessageInfo

func (m *QueryAllVirtualActionResponse) GetVirtualAction() []VirtualAction {
	if m != nil {
		return m.VirtualAction
	}
	return nil
}

func (m *QueryAllVirtualActionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetVirtualSchemaRequest struct {
	NftSchemaCode string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
}

func (m *QueryGetVirtualSchemaRequest) Reset()         { *m = QueryGetVirtualSchemaRequest{} }
func (m *QueryGetVirtualSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVirtualSchemaRequest) ProtoMessage()    {}
func (*QueryGetVirtualSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{54}
}
func (m *QueryGetVirtualSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVirtualSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVirtualSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVirtualSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVirtualSchemaRequest.Merge(m, src)
}
func (m *QueryGetVirtualSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVirtualSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVirtualSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVirtualSchemaRequest proto.InternalMessageInfo

func (m *QueryGetVirtualSchemaRequest) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

type QueryGetVirtualSchemaResponse struct {
	VirtualSchema VirtualSchema `protobuf:"bytes,1,opt,name=virtualSchema,proto3" json:"virtualSchema"`
}

func (m *QueryGetVirtualSchemaResponse) Reset()         { *m = QueryGetVirtualSchemaResponse{} }
func (m *QueryGetVirtualSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVirtualSchemaResponse) ProtoMessage()    {}
func (*QueryGetVirtualSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{55}
}
func (m *QueryGetVirtualSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVirtualSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVirtualSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVirtualSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVirtualSchemaResponse.Merge(m, src)
}
func (m *QueryGetVirtualSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVirtualSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVirtualSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVirtualSchemaResponse proto.InternalMessageInfo

func (m *QueryGetVirtualSchemaResponse) GetVirtualSchema() VirtualSchema {
	if m != nil {
		return m.VirtualSchema
	}
	return VirtualSchema{}
}

type QueryAllVirtualSchemaRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVirtualSchemaRequest) Reset()         { *m = QueryAllVirtualSchemaRequest{} }
func (m *QueryAllVirtualSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVirtualSchemaRequest) ProtoMessage()    {}
func (*QueryAllVirtualSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{56}
}
func (m *QueryAllVirtualSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVirtualSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVirtualSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVirtualSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVirtualSchemaRequest.Merge(m, src)
}
func (m *QueryAllVirtualSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVirtualSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVirtualSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVirtualSchemaRequest proto.InternalMessageInfo

func (m *QueryAllVirtualSchemaRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVirtualSchemaResponse struct {
	VirtualSchema []VirtualSchema     `protobuf:"bytes,1,rep,name=virtualSchema,proto3" json:"virtualSchema"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVirtualSchemaResponse) Reset()         { *m = QueryAllVirtualSchemaResponse{} }
func (m *QueryAllVirtualSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVirtualSchemaResponse) ProtoMessage()    {}
func (*QueryAllVirtualSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{57}
}
func (m *QueryAllVirtualSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVirtualSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVirtualSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVirtualSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVirtualSchemaResponse.Merge(m, src)
}
func (m *QueryAllVirtualSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVirtualSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVirtualSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVirtualSchemaResponse proto.InternalMessageInfo

func (m *QueryAllVirtualSchemaResponse) GetVirtualSchema() []VirtualSchema {
	if m != nil {
		return m.VirtualSchema
	}
	return nil
}

func (m *QueryAllVirtualSchemaResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDisableVirtualSchemaProposalRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetDisableVirtualSchemaProposalRequest) Reset() {
	*m = QueryGetDisableVirtualSchemaProposalRequest{}
}
func (m *QueryGetDisableVirtualSchemaProposalRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetDisableVirtualSchemaProposalRequest) ProtoMessage() {}
func (*QueryGetDisableVirtualSchemaProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{58}
}
func (m *QueryGetDisableVirtualSchemaProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDisableVirtualSchemaProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDisableVirtualSchemaProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDisableVirtualSchemaProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDisableVirtualSchemaProposalRequest.Merge(m, src)
}
func (m *QueryGetDisableVirtualSchemaProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDisableVirtualSchemaProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDisableVirtualSchemaProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDisableVirtualSchemaProposalRequest proto.InternalMessageInfo

func (m *QueryGetDisableVirtualSchemaProposalRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetDisableVirtualSchemaProposalResponse struct {
	DisableVirtualSchemaProposal DisableVirtualSchemaProposal `protobuf:"bytes,1,opt,name=disableVirtualSchemaProposal,proto3" json:"disableVirtualSchemaProposal"`
}

func (m *QueryGetDisableVirtualSchemaProposalResponse) Reset() {
	*m = QueryGetDisableVirtualSchemaProposalResponse{}
}
func (m *QueryGetDisableVirtualSchemaProposalResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetDisableVirtualSchemaProposalResponse) ProtoMessage() {}
func (*QueryGetDisableVirtualSchemaProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{59}
}
func (m *QueryGetDisableVirtualSchemaProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDisableVirtualSchemaProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDisableVirtualSchemaProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDisableVirtualSchemaProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDisableVirtualSchemaProposalResponse.Merge(m, src)
}
func (m *QueryGetDisableVirtualSchemaProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDisableVirtualSchemaProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDisableVirtualSchemaProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDisableVirtualSchemaProposalResponse proto.InternalMessageInfo

func (m *QueryGetDisableVirtualSchemaProposalResponse) GetDisableVirtualSchemaProposal() DisableVirtualSchemaProposal {
	if m != nil {
		return m.DisableVirtualSchemaProposal
	}
	return DisableVirtualSchemaProposal{}
}

type QueryAllDisableVirtualSchemaProposalRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDisableVirtualSchemaProposalRequest) Reset() {
	*m = QueryAllDisableVirtualSchemaProposalRequest{}
}
func (m *QueryAllDisableVirtualSchemaProposalRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllDisableVirtualSchemaProposalRequest) ProtoMessage() {}
func (*QueryAllDisableVirtualSchemaProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{60}
}
func (m *QueryAllDisableVirtualSchemaProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDisableVirtualSchemaProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDisableVirtualSchemaProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDisableVirtualSchemaProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDisableVirtualSchemaProposalRequest.Merge(m, src)
}
func (m *QueryAllDisableVirtualSchemaProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDisableVirtualSchemaProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDisableVirtualSchemaProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDisableVirtualSchemaProposalRequest proto.InternalMessageInfo

func (m *QueryAllDisableVirtualSchemaProposalRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDisableVirtualSchemaProposalResponse struct {
	DisableVirtualSchemaProposal []DisableVirtualSchemaProposal `protobuf:"bytes,1,rep,name=disableVirtualSchemaProposal,proto3" json:"disableVirtualSchemaProposal"`
	Pagination                   *query.PageResponse            `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDisableVirtualSchemaProposalResponse) Reset() {
	*m = QueryAllDisableVirtualSchemaProposalResponse{}
}
func (m *QueryAllDisableVirtualSchemaProposalResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllDisableVirtualSchemaProposalResponse) ProtoMessage() {}
func (*QueryAllDisableVirtualSchemaProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{61}
}
func (m *QueryAllDisableVirtualSchemaProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDisableVirtualSchemaProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDisableVirtualSchemaProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDisableVirtualSchemaProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDisableVirtualSchemaProposalResponse.Merge(m, src)
}
func (m *QueryAllDisableVirtualSchemaProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDisableVirtualSchemaProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDisableVirtualSchemaProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDisableVirtualSchemaProposalResponse proto.InternalMessageInfo

func (m *QueryAllDisableVirtualSchemaProposalResponse) GetDisableVirtualSchemaProposal() []DisableVirtualSchemaProposal {
	if m != nil {
		return m.DisableVirtualSchemaProposal
	}
	return nil
}

func (m *QueryAllDisableVirtualSchemaProposalResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetVirtualSchemaProposalRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetVirtualSchemaProposalRequest) Reset()         { *m = QueryGetVirtualSchemaProposalRequest{} }
func (m *QueryGetVirtualSchemaProposalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVirtualSchemaProposalRequest) ProtoMessage()    {}
func (*QueryGetVirtualSchemaProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{62}
}
func (m *QueryGetVirtualSchemaProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVirtualSchemaProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVirtualSchemaProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVirtualSchemaProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVirtualSchemaProposalRequest.Merge(m, src)
}
func (m *QueryGetVirtualSchemaProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVirtualSchemaProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVirtualSchemaProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVirtualSchemaProposalRequest proto.InternalMessageInfo

func (m *QueryGetVirtualSchemaProposalRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetVirtualSchemaProposalResponse struct {
	VirtualSchemaProposal VirtualSchemaProposal `protobuf:"bytes,1,opt,name=virtualSchemaProposal,proto3" json:"virtualSchemaProposal"`
}

func (m *QueryGetVirtualSchemaProposalResponse) Reset()         { *m = QueryGetVirtualSchemaProposalResponse{} }
func (m *QueryGetVirtualSchemaProposalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVirtualSchemaProposalResponse) ProtoMessage()    {}
func (*QueryGetVirtualSchemaProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{63}
}
func (m *QueryGetVirtualSchemaProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVirtualSchemaProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVirtualSchemaProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVirtualSchemaProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVirtualSchemaProposalResponse.Merge(m, src)
}
func (m *QueryGetVirtualSchemaProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVirtualSchemaProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVirtualSchemaProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVirtualSchemaProposalResponse proto.InternalMessageInfo

func (m *QueryGetVirtualSchemaProposalResponse) GetVirtualSchemaProposal() VirtualSchemaProposal {
	if m != nil {
		return m.VirtualSchemaProposal
	}
	return VirtualSchemaProposal{}
}

type QueryAllVirtualSchemaProposalRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVirtualSchemaProposalRequest) Reset()         { *m = QueryAllVirtualSchemaProposalRequest{} }
func (m *QueryAllVirtualSchemaProposalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVirtualSchemaProposalRequest) ProtoMessage()    {}
func (*QueryAllVirtualSchemaProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{64}
}
func (m *QueryAllVirtualSchemaProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVirtualSchemaProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVirtualSchemaProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVirtualSchemaProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVirtualSchemaProposalRequest.Merge(m, src)
}
func (m *QueryAllVirtualSchemaProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVirtualSchemaProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVirtualSchemaProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVirtualSchemaProposalRequest proto.InternalMessageInfo

func (m *QueryAllVirtualSchemaProposalRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVirtualSchemaProposalResponse struct {
	VirtualSchemaProposal []VirtualSchemaProposal `protobuf:"bytes,1,rep,name=virtualSchemaProposal,proto3" json:"virtualSchemaProposal"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVirtualSchemaProposalResponse) Reset()         { *m = QueryAllVirtualSchemaProposalResponse{} }
func (m *QueryAllVirtualSchemaProposalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVirtualSchemaProposalResponse) ProtoMessage()    {}
func (*QueryAllVirtualSchemaProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{65}
}
func (m *QueryAllVirtualSchemaProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVirtualSchemaProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVirtualSchemaProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVirtualSchemaProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVirtualSchemaProposalResponse.Merge(m, src)
}
func (m *QueryAllVirtualSchemaProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVirtualSchemaProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVirtualSchemaProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVirtualSchemaProposalResponse proto.InternalMessageInfo

func (m *QueryAllVirtualSchemaProposalResponse) GetVirtualSchemaProposal() []VirtualSchemaProposal {
	if m != nil {
		return m.VirtualSchemaProposal
	}
	return nil
}

func (m *QueryAllVirtualSchemaProposalResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetActiveVirtualSchemaProposalRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetActiveVirtualSchemaProposalRequest) Reset() {
	*m = QueryGetActiveVirtualSchemaProposalRequest{}
}
func (m *QueryGetActiveVirtualSchemaProposalRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetActiveVirtualSchemaProposalRequest) ProtoMessage() {}
func (*QueryGetActiveVirtualSchemaProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{66}
}
func (m *QueryGetActiveVirtualSchemaProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActiveVirtualSchemaProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActiveVirtualSchemaProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActiveVirtualSchemaProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActiveVirtualSchemaProposalRequest.Merge(m, src)
}
func (m *QueryGetActiveVirtualSchemaProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActiveVirtualSchemaProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActiveVirtualSchemaProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActiveVirtualSchemaProposalRequest proto.InternalMessageInfo

func (m *QueryGetActiveVirtualSchemaProposalRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetActiveVirtualSchemaProposalResponse struct {
	ActiveVirtualSchemaProposal ActiveVirtualSchemaProposal `protobuf:"bytes,1,opt,name=activeVirtualSchemaProposal,proto3" json:"activeVirtualSchemaProposal"`
}

func (m *QueryGetActiveVirtualSchemaProposalResponse) Reset() {
	*m = QueryGetActiveVirtualSchemaProposalResponse{}
}
func (m *QueryGetActiveVirtualSchemaProposalResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetActiveVirtualSchemaProposalResponse) ProtoMessage() {}
func (*QueryGetActiveVirtualSchemaProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{67}
}
func (m *QueryGetActiveVirtualSchemaProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActiveVirtualSchemaProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActiveVirtualSchemaProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActiveVirtualSchemaProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActiveVirtualSchemaProposalResponse.Merge(m, src)
}
func (m *QueryGetActiveVirtualSchemaProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActiveVirtualSchemaProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActiveVirtualSchemaProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActiveVirtualSchemaProposalResponse proto.InternalMessageInfo

func (m *QueryGetActiveVirtualSchemaProposalResponse) GetActiveVirtualSchemaProposal() ActiveVirtualSchemaProposal {
	if m != nil {
		return m.ActiveVirtualSchemaProposal
	}
	return ActiveVirtualSchemaProposal{}
}

type QueryAllActiveVirtualSchemaProposalRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActiveVirtualSchemaProposalRequest) Reset() {
	*m = QueryAllActiveVirtualSchemaProposalRequest{}
}
func (m *QueryAllActiveVirtualSchemaProposalRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllActiveVirtualSchemaProposalRequest) ProtoMessage() {}
func (*QueryAllActiveVirtualSchemaProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{68}
}
func (m *QueryAllActiveVirtualSchemaProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActiveVirtualSchemaProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActiveVirtualSchemaProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActiveVirtualSchemaProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActiveVirtualSchemaProposalRequest.Merge(m, src)
}
func (m *QueryAllActiveVirtualSchemaProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActiveVirtualSchemaProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActiveVirtualSchemaProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActiveVirtualSchemaProposalRequest proto.InternalMessageInfo

func (m *QueryAllActiveVirtualSchemaProposalRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllActiveVirtualSchemaProposalResponse struct {
	ActiveVirtualSchemaProposal []ActiveVirtualSchemaProposal `protobuf:"bytes,1,rep,name=activeVirtualSchemaProposal,proto3" json:"activeVirtualSchemaProposal"`
	Pagination                  *query.PageResponse           `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActiveVirtualSchemaProposalResponse) Reset() {
	*m = QueryAllActiveVirtualSchemaProposalResponse{}
}
func (m *QueryAllActiveVirtualSchemaProposalResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllActiveVirtualSchemaProposalResponse) ProtoMessage() {}
func (*QueryAllActiveVirtualSchemaProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{69}
}
func (m *QueryAllActiveVirtualSchemaProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActiveVirtualSchemaProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActiveVirtualSchemaProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActiveVirtualSchemaProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActiveVirtualSchemaProposalResponse.Merge(m, src)
}
func (m *QueryAllActiveVirtualSchemaProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActiveVirtualSchemaProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActiveVirtualSchemaProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActiveVirtualSchemaProposalResponse proto.InternalMessageInfo

func (m *QueryAllActiveVirtualSchemaProposalResponse) GetActiveVirtualSchemaProposal() []ActiveVirtualSchemaProposal {
	if m != nil {
		return m.ActiveVirtualSchemaProposal
	}
	return nil
}

func (m *QueryAllActiveVirtualSchemaProposalResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetInactiveVirtualSchemaProposalRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetInactiveVirtualSchemaProposalRequest) Reset() {
	*m = QueryGetInactiveVirtualSchemaProposalRequest{}
}
func (m *QueryGetInactiveVirtualSchemaProposalRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetInactiveVirtualSchemaProposalRequest) ProtoMessage() {}
func (*QueryGetInactiveVirtualSchemaProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{70}
}
func (m *QueryGetInactiveVirtualSchemaProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInactiveVirtualSchemaProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInactiveVirtualSchemaProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInactiveVirtualSchemaProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInactiveVirtualSchemaProposalRequest.Merge(m, src)
}
func (m *QueryGetInactiveVirtualSchemaProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInactiveVirtualSchemaProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInactiveVirtualSchemaProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInactiveVirtualSchemaProposalRequest proto.InternalMessageInfo

func (m *QueryGetInactiveVirtualSchemaProposalRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetInactiveVirtualSchemaProposalResponse struct {
	InactiveVirtualSchemaProposal InactiveVirtualSchemaProposal `protobuf:"bytes,1,opt,name=inactiveVirtualSchemaProposal,proto3" json:"inactiveVirtualSchemaProposal"`
}

func (m *QueryGetInactiveVirtualSchemaProposalResponse) Reset() {
	*m = QueryGetInactiveVirtualSchemaProposalResponse{}
}
func (m *QueryGetInactiveVirtualSchemaProposalResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetInactiveVirtualSchemaProposalResponse) ProtoMessage() {}
func (*QueryGetInactiveVirtualSchemaProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{71}
}
func (m *QueryGetInactiveVirtualSchemaProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInactiveVirtualSchemaProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInactiveVirtualSchemaProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInactiveVirtualSchemaProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInactiveVirtualSchemaProposalResponse.Merge(m, src)
}
func (m *QueryGetInactiveVirtualSchemaProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInactiveVirtualSchemaProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInactiveVirtualSchemaProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInactiveVirtualSchemaProposalResponse proto.InternalMessageInfo

func (m *QueryGetInactiveVirtualSchemaProposalResponse) GetInactiveVirtualSchemaProposal() InactiveVirtualSchemaProposal {
	if m != nil {
		return m.InactiveVirtualSchemaProposal
	}
	return InactiveVirtualSchemaProposal{}
}

type QueryAllInactiveVirtualSchemaProposalRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInactiveVirtualSchemaProposalRequest) Reset() {
	*m = QueryAllInactiveVirtualSchemaProposalRequest{}
}
func (m *QueryAllInactiveVirtualSchemaProposalRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllInactiveVirtualSchemaProposalRequest) ProtoMessage() {}
func (*QueryAllInactiveVirtualSchemaProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{72}
}
func (m *QueryAllInactiveVirtualSchemaProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInactiveVirtualSchemaProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInactiveVirtualSchemaProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInactiveVirtualSchemaProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInactiveVirtualSchemaProposalRequest.Merge(m, src)
}
func (m *QueryAllInactiveVirtualSchemaProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInactiveVirtualSchemaProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInactiveVirtualSchemaProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInactiveVirtualSchemaProposalRequest proto.InternalMessageInfo

func (m *QueryAllInactiveVirtualSchemaProposalRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInactiveVirtualSchemaProposalResponse struct {
	InactiveVirtualSchemaProposal []InactiveVirtualSchemaProposal `protobuf:"bytes,1,rep,name=inactiveVirtualSchemaProposal,proto3" json:"inactiveVirtualSchemaProposal"`
	Pagination                    *query.PageResponse             `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInactiveVirtualSchemaProposalResponse) Reset() {
	*m = QueryAllInactiveVirtualSchemaProposalResponse{}
}
func (m *QueryAllInactiveVirtualSchemaProposalResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllInactiveVirtualSchemaProposalResponse) ProtoMessage() {}
func (*QueryAllInactiveVirtualSchemaProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{73}
}
func (m *QueryAllInactiveVirtualSchemaProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInactiveVirtualSchemaProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInactiveVirtualSchemaProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInactiveVirtualSchemaProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInactiveVirtualSchemaProposalResponse.Merge(m, src)
}
func (m *QueryAllInactiveVirtualSchemaProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInactiveVirtualSchemaProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInactiveVirtualSchemaProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInactiveVirtualSchemaProposalResponse proto.InternalMessageInfo

func (m *QueryAllInactiveVirtualSchemaProposalResponse) GetInactiveVirtualSchemaProposal() []InactiveVirtualSchemaProposal {
	if m != nil {
		return m.InactiveVirtualSchemaProposal
	}
	return nil
}

func (m *QueryAllInactiveVirtualSchemaProposalResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetActiveDislabeVirtualSchemaProposalRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetActiveDislabeVirtualSchemaProposalRequest) Reset() {
	*m = QueryGetActiveDislabeVirtualSchemaProposalRequest{}
}
func (m *QueryGetActiveDislabeVirtualSchemaProposalRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetActiveDislabeVirtualSchemaProposalRequest) ProtoMessage() {}
func (*QueryGetActiveDislabeVirtualSchemaProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{74}
}
func (m *QueryGetActiveDislabeVirtualSchemaProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActiveDislabeVirtualSchemaProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActiveDislabeVirtualSchemaProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActiveDislabeVirtualSchemaProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActiveDislabeVirtualSchemaProposalRequest.Merge(m, src)
}
func (m *QueryGetActiveDislabeVirtualSchemaProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActiveDislabeVirtualSchemaProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActiveDislabeVirtualSchemaProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActiveDislabeVirtualSchemaProposalRequest proto.InternalMessageInfo

func (m *QueryGetActiveDislabeVirtualSchemaProposalRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetActiveDislabeVirtualSchemaProposalResponse struct {
	ActiveDislabeVirtualSchemaProposal ActiveDislabeVirtualSchemaProposal `protobuf:"bytes,1,opt,name=activeDislabeVirtualSchemaProposal,proto3" json:"activeDislabeVirtualSchemaProposal"`
}

func (m *QueryGetActiveDislabeVirtualSchemaProposalResponse) Reset() {
	*m = QueryGetActiveDislabeVirtualSchemaProposalResponse{}
}
func (m *QueryGetActiveDislabeVirtualSchemaProposalResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetActiveDislabeVirtualSchemaProposalResponse) ProtoMessage() {}
func (*QueryGetActiveDislabeVirtualSchemaProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{75}
}
func (m *QueryGetActiveDislabeVirtualSchemaProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActiveDislabeVirtualSchemaProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActiveDislabeVirtualSchemaProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActiveDislabeVirtualSchemaProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActiveDislabeVirtualSchemaProposalResponse.Merge(m, src)
}
func (m *QueryGetActiveDislabeVirtualSchemaProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActiveDislabeVirtualSchemaProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActiveDislabeVirtualSchemaProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActiveDislabeVirtualSchemaProposalResponse proto.InternalMessageInfo

func (m *QueryGetActiveDislabeVirtualSchemaProposalResponse) GetActiveDislabeVirtualSchemaProposal() ActiveDislabeVirtualSchemaProposal {
	if m != nil {
		return m.ActiveDislabeVirtualSchemaProposal
	}
	return ActiveDislabeVirtualSchemaProposal{}
}

type QueryAllActiveDislabeVirtualSchemaProposalRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActiveDislabeVirtualSchemaProposalRequest) Reset() {
	*m = QueryAllActiveDislabeVirtualSchemaProposalRequest{}
}
func (m *QueryAllActiveDislabeVirtualSchemaProposalRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllActiveDislabeVirtualSchemaProposalRequest) ProtoMessage() {}
func (*QueryAllActiveDislabeVirtualSchemaProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{76}
}
func (m *QueryAllActiveDislabeVirtualSchemaProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActiveDislabeVirtualSchemaProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActiveDislabeVirtualSchemaProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActiveDislabeVirtualSchemaProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActiveDislabeVirtualSchemaProposalRequest.Merge(m, src)
}
func (m *QueryAllActiveDislabeVirtualSchemaProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActiveDislabeVirtualSchemaProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActiveDislabeVirtualSchemaProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActiveDislabeVirtualSchemaProposalRequest proto.InternalMessageInfo

func (m *QueryAllActiveDislabeVirtualSchemaProposalRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllActiveDislabeVirtualSchemaProposalResponse struct {
	ActiveDislabeVirtualSchemaProposal []ActiveDislabeVirtualSchemaProposal `protobuf:"bytes,1,rep,name=activeDislabeVirtualSchemaProposal,proto3" json:"activeDislabeVirtualSchemaProposal"`
	Pagination                         *query.PageResponse                  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActiveDislabeVirtualSchemaProposalResponse) Reset() {
	*m = QueryAllActiveDislabeVirtualSchemaProposalResponse{}
}
func (m *QueryAllActiveDislabeVirtualSchemaProposalResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllActiveDislabeVirtualSchemaProposalResponse) ProtoMessage() {}
func (*QueryAllActiveDislabeVirtualSchemaProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406c74dd8ff3e6a, []int{77}
}
func (m *QueryAllActiveDislabeVirtualSchemaProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActiveDislabeVirtualSchemaProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActiveDislabeVirtualSchemaProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActiveDislabeVirtualSchemaProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActiveDislabeVirtualSchemaProposalResponse.Merge(m, src)
}
func (m *QueryAllActiveDislabeVirtualSchemaProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActiveDislabeVirtualSchemaProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActiveDislabeVirtualSchemaProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActiveDislabeVirtualSchemaProposalResponse proto.InternalMessageInfo

func (m *QueryAllActiveDislabeVirtualSchemaProposalResponse) GetActiveDislabeVirtualSchemaProposal() []ActiveDislabeVirtualSchemaProposal {
	if m != nil {
		return m.ActiveDislabeVirtualSchemaProposal
	}
	return nil
}

func (m *QueryAllActiveDislabeVirtualSchemaProposalResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryParamsResponse")
	proto.RegisterType((*QueryGetNFTSchemaRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetNFTSchemaRequest")
	proto.RegisterType((*QueryGetNFTSchemaResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetNFTSchemaResponse")
	proto.RegisterType((*QueryAllNFTSchemaRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllNFTSchemaRequest")
	proto.RegisterType((*QueryAllNFTSchemaResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllNFTSchemaResponse")
	proto.RegisterType((*QueryGetNftDataRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetNftDataRequest")
	proto.RegisterType((*QueryGetNftDataResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetNftDataResponse")
	proto.RegisterType((*QueryAllNftDataRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllNftDataRequest")
	proto.RegisterType((*QueryAllNftDataResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllNftDataResponse")
	proto.RegisterType((*QueryGetActionByRefIdRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetActionByRefIdRequest")
	proto.RegisterType((*QueryGetActionByRefIdResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetActionByRefIdResponse")
	proto.RegisterType((*QueryAllActionByRefIdRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllActionByRefIdRequest")
	proto.RegisterType((*QueryAllActionByRefIdResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllActionByRefIdResponse")
	proto.RegisterType((*QueryGetOrganizationRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetOrganizationRequest")
	proto.RegisterType((*QueryGetOrganizationResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetOrganizationResponse")
	proto.RegisterType((*QueryAllOrganizationRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllOrganizationRequest")
	proto.RegisterType((*QueryAllOrganizationResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllOrganizationResponse")
	proto.RegisterType((*QueryGetNftCollectionRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetNftCollectionRequest")
	proto.RegisterType((*QueryGetNftCollectionResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetNftCollectionResponse")
	proto.RegisterType((*QueryGetNFTSchemaByContractRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetNFTSchemaByContractRequest")
	proto.RegisterType((*QueryGetNFTSchemaByContractResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetNFTSchemaByContractResponse")
	proto.RegisterType((*QueryAllNFTSchemaByContractRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllNFTSchemaByContractRequest")
	proto.RegisterType((*QueryAllNFTSchemaByContractResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllNFTSchemaByContractResponse")
	proto.RegisterType((*QueryGetNFTFeeConfigRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetNFTFeeConfigRequest")
	proto.RegisterType((*QueryGetNFTFeeConfigResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetNFTFeeConfigResponse")
	proto.RegisterType((*QueryGetNFTFeeBalanceRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetNFTFeeBalanceRequest")
	proto.RegisterType((*QueryGetNFTFeeBalanceResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetNFTFeeBalanceResponse")
	proto.RegisterType((*QueryGetMetadataCreatorRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetMetadataCreatorRequest")
	proto.RegisterType((*QueryGetMetadataCreatorResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetMetadataCreatorResponse")
	proto.RegisterType((*QueryAllMetadataCreatorRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllMetadataCreatorRequest")
	proto.RegisterType((*QueryAllMetadataCreatorResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllMetadataCreatorResponse")
	proto.RegisterType((*QueryGetActionExecutorRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetActionExecutorRequest")
	proto.RegisterType((*QueryGetActionExecutorResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetActionExecutorResponse")
	proto.RegisterType((*QueryAllActionExecutorRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllActionExecutorRequest")
	proto.RegisterType((*QueryAllActionExecutorResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllActionExecutorResponse")
	proto.RegisterType((*QueryGetSchemaAttributeRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetSchemaAttributeRequest")
	proto.RegisterType((*QueryGetSchemaAttributeResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetSchemaAttributeResponse")
	proto.RegisterType((*QueryAllSchemaAttributeRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllSchemaAttributeRequest")
	proto.RegisterType((*QueryAllSchemaAttributeResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllSchemaAttributeResponse")
	proto.RegisterType((*QueryListAttributeBySchemaRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryListAttributeBySchemaRequest")
	proto.RegisterType((*QueryListAttributeBySchemaResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryListAttributeBySchemaResponse")
	proto.RegisterType((*QueryGetActionOfSchemaRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetActionOfSchemaRequest")
	proto.RegisterType((*QueryGetActionOfSchemaResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetActionOfSchemaResponse")
	proto.RegisterType((*QueryAllActionOfSchemaRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllActionOfSchemaRequest")
	proto.RegisterType((*QueryAllActionOfSchemaResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllActionOfSchemaResponse")
	proto.RegisterType((*QueryGetExecutorOfSchemaRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetExecutorOfSchemaRequest")
	proto.RegisterType((*QueryGetExecutorOfSchemaResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetExecutorOfSchemaResponse")
	proto.RegisterType((*QueryAllExecutorOfSchemaRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllExecutorOfSchemaRequest")
	proto.RegisterType((*QueryAllExecutorOfSchemaResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllExecutorOfSchemaResponse")
	proto.RegisterType((*QueryGetVirtualActionRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetVirtualActionRequest")
	proto.RegisterType((*QueryGetVirtualActionResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetVirtualActionResponse")
	proto.RegisterType((*QueryAllVirtualActionRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllVirtualActionRequest")
	proto.RegisterType((*QueryAllVirtualActionResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllVirtualActionResponse")
	proto.RegisterType((*QueryGetVirtualSchemaRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetVirtualSchemaRequest")
	proto.RegisterType((*QueryGetVirtualSchemaResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetVirtualSchemaResponse")
	proto.RegisterType((*QueryAllVirtualSchemaRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllVirtualSchemaRequest")
	proto.RegisterType((*QueryAllVirtualSchemaResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllVirtualSchemaResponse")
	proto.RegisterType((*QueryGetDisableVirtualSchemaProposalRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetDisableVirtualSchemaProposalRequest")
	proto.RegisterType((*QueryGetDisableVirtualSchemaProposalResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetDisableVirtualSchemaProposalResponse")
	proto.RegisterType((*QueryAllDisableVirtualSchemaProposalRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllDisableVirtualSchemaProposalRequest")
	proto.RegisterType((*QueryAllDisableVirtualSchemaProposalResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllDisableVirtualSchemaProposalResponse")
	proto.RegisterType((*QueryGetVirtualSchemaProposalRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetVirtualSchemaProposalRequest")
	proto.RegisterType((*QueryGetVirtualSchemaProposalResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetVirtualSchemaProposalResponse")
	proto.RegisterType((*QueryAllVirtualSchemaProposalRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllVirtualSchemaProposalRequest")
	proto.RegisterType((*QueryAllVirtualSchemaProposalResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllVirtualSchemaProposalResponse")
	proto.RegisterType((*QueryGetActiveVirtualSchemaProposalRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetActiveVirtualSchemaProposalRequest")
	proto.RegisterType((*QueryGetActiveVirtualSchemaProposalResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetActiveVirtualSchemaProposalResponse")
	proto.RegisterType((*QueryAllActiveVirtualSchemaProposalRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllActiveVirtualSchemaProposalRequest")
	proto.RegisterType((*QueryAllActiveVirtualSchemaProposalResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllActiveVirtualSchemaProposalResponse")
	proto.RegisterType((*QueryGetInactiveVirtualSchemaProposalRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetInactiveVirtualSchemaProposalRequest")
	proto.RegisterType((*QueryGetInactiveVirtualSchemaProposalResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetInactiveVirtualSchemaProposalResponse")
	proto.RegisterType((*QueryAllInactiveVirtualSchemaProposalRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllInactiveVirtualSchemaProposalRequest")
	proto.RegisterType((*QueryAllInactiveVirtualSchemaProposalResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllInactiveVirtualSchemaProposalResponse")
	proto.RegisterType((*QueryGetActiveDislabeVirtualSchemaProposalRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetActiveDislabeVirtualSchemaProposalRequest")
	proto.RegisterType((*QueryGetActiveDislabeVirtualSchemaProposalResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryGetActiveDislabeVirtualSchemaProposalResponse")
	proto.RegisterType((*QueryAllActiveDislabeVirtualSchemaProposalRequest)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllActiveDislabeVirtualSchemaProposalRequest")
	proto.RegisterType((*QueryAllActiveDislabeVirtualSchemaProposalResponse)(nil), "thesixnetwork.sixprotocol.nftmngr.QueryAllActiveDislabeVirtualSchemaProposalResponse")
}

func init() { proto.RegisterFile("nftmngr/query.proto", fileDescriptor_1406c74dd8ff3e6a) }

var fileDescriptor_1406c74dd8ff3e6a = []byte{
	// 2778 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5c, 0x4d, 0x8c, 0x1c, 0x47,
	0x15, 0x76, 0xcd, 0x24, 0x36, 0x2e, 0xe2, 0xd8, 0x94, 0x7f, 0x58, 0x26, 0xf6, 0xda, 0x29, 0x1c,
	0x63, 0x8c, 0x3d, 0xe3, 0x5d, 0xff, 0xc4, 0x06, 0x7b, 0xed, 0xd9, 0x5f, 0x3b, 0x72, 0xd6, 0xce,
	0xb2, 0x04, 0x62, 0x21, 0x46, 0x3d, 0x33, 0x3d, 0xe3, 0x51, 0x7a, 0xbb, 0x37, 0x33, 0xbd, 0x9b,
	0x5d, 0x56, 0x2b, 0x05, 0x50, 0x80, 0x48, 0x3e, 0x20, 0x21, 0x4e, 0x11, 0x47, 0x24, 0x2e, 0x70,
	0x41, 0xca, 0x01, 0x24, 0x40, 0x48, 0x44, 0x21, 0x08, 0xb0, 0x9c, 0x8b, 0x4f, 0x51, 0x64, 0x07,
	0xb8, 0x20, 0x24, 0x24, 0x4e, 0x5c, 0x40, 0x5d, 0xfd, 0x7a, 0xba, 0xab, 0xfa, 0x67, 0xaa, 0x7a,
	0x6a, 0xcd, 0x6d, 0xa7, 0xab, 0xeb, 0xbd, 0xf7, 0x7d, 0xef, 0xa7, 0xaa, 0xba, 0x5f, 0x2f, 0xde,
	0x6b, 0xb7, 0xdc, 0x25, 0xbb, 0xdd, 0xad, 0xbc, 0xb6, 0x62, 0x76, 0xd7, 0xcb, 0xcb, 0x5d, 0xc7,
	0x75, 0xc8, 0xb3, 0xee, 0x1d, 0xb3, 0xd7, 0x59, 0xb3, 0x4d, 0xf7, 0x75, 0xa7, 0xfb, 0x6a, 0xb9,
	0xd7, 0x59, 0x63, 0xd7, 0x1b, 0x8e, 0x55, 0x86, 0xdb, 0x4b, 0xfb, 0xda, 0x4e, 0xdb, 0x61, 0x57,
	0x2b, 0xde, 0x5f, 0xfe, 0xc4, 0xd2, 0xc1, 0xb6, 0xe3, 0xb4, 0x2d, 0xb3, 0x62, 0x2c, 0x77, 0x2a,
	0x86, 0x6d, 0x3b, 0xae, 0xe1, 0x76, 0x1c, 0xbb, 0x07, 0xa3, 0x27, 0x1a, 0x4e, 0x6f, 0xc9, 0xe9,
	0x55, 0xea, 0x46, 0xcf, 0xf4, 0xf5, 0x55, 0x56, 0xc7, 0xea, 0xa6, 0x6b, 0x8c, 0x55, 0x96, 0x8d,
	0x76, 0xc7, 0x66, 0x37, 0xc3, 0xbd, 0xfb, 0x02, 0xbb, 0x96, 0x8d, 0xae, 0xb1, 0x14, 0x48, 0x18,
	0x09, 0xae, 0xda, 0x2d, 0xb7, 0xd6, 0x6b, 0xdc, 0x31, 0x97, 0x0c, 0x18, 0x19, 0x0d, 0x46, 0x8c,
	0x86, 0x27, 0xa5, 0x56, 0x5f, 0xaf, 0x75, 0xcd, 0x56, 0xad, 0xd3, 0x84, 0xf1, 0x52, 0x30, 0xee,
	0x74, 0xdb, 0x86, 0xdd, 0xf9, 0x66, 0x54, 0xd7, 0xc1, 0xa8, 0xd4, 0x86, 0x63, 0x59, 0x66, 0x23,
	0x32, 0x7a, 0x34, 0xae, 0xd3, 0x93, 0xde, 0x70, 0x6c, 0xb7, 0x6b, 0x34, 0xdc, 0x24, 0x19, 0x2d,
	0xd3, 0xf4, 0xc6, 0x5b, 0x9d, 0x36, 0x8c, 0x1e, 0x12, 0x47, 0xeb, 0x86, 0x65, 0xd8, 0x0d, 0x53,
	0x34, 0x7e, 0xc9, 0x74, 0x8d, 0xa6, 0xe1, 0x1a, 0xb5, 0x46, 0xd7, 0x34, 0x5c, 0xa7, 0x2b, 0x4e,
	0x07, 0x70, 0xe6, 0x9a, 0xd9, 0x58, 0x09, 0x87, 0xfb, 0xd3, 0xc1, 0x3a, 0xc3, 0x75, 0xbb, 0x9d,
	0xfa, 0x8a, 0x6b, 0xa6, 0x70, 0xe3, 0xb4, 0x78, 0xee, 0x8e, 0x04, 0xe3, 0x81, 0xdc, 0xd8, 0x1d,
	0x7d, 0x74, 0xab, 0x9d, 0xae, 0xbb, 0x62, 0x58, 0x35, 0x23, 0xca, 0xd0, 0x81, 0x28, 0x3a, 0xcf,
	0xfc, 0xb4, 0x59, 0x9c, 0xcc, 0x3e, 0xaf, 0xcd, 0x4e, 0xcf, 0xa8, 0x5b, 0x66, 0x2d, 0xe9, 0x2e,
	0xba, 0x0f, 0x93, 0x97, 0xbc, 0x48, 0xb9, 0xc5, 0xc2, 0x60, 0xc1, 0x7c, 0x6d, 0xc5, 0xec, 0xb9,
	0xf4, 0x1b, 0x78, 0x2f, 0x77, 0xb5, 0xb7, 0xec, 0xd8, 0x3d, 0x93, 0xcc, 0xe1, 0xed, 0x7e, 0xb8,
	0x8c, 0xa0, 0x23, 0xe8, 0xf8, 0x27, 0xc7, 0x3f, 0x5f, 0x1e, 0x18, 0xc8, 0x65, 0x5f, 0xc4, 0xe4,
	0x13, 0xef, 0x7d, 0x78, 0x78, 0xdb, 0x02, 0x4c, 0xa7, 0x65, 0x3c, 0xc2, 0xe4, 0xcf, 0x99, 0xee,
	0xfc, 0xec, 0xe2, 0x97, 0x99, 0x41, 0xa0, 0x9b, 0x10, 0xfc, 0x44, 0xc3, 0x69, 0x9a, 0x4c, 0xc5,
	0xce, 0x05, 0xf6, 0x37, 0x5d, 0xc2, 0x9f, 0x49, 0xb8, 0x1f, 0xac, 0xba, 0x85, 0x77, 0xda, 0xc1,
	0x45, 0x30, 0xec, 0xa4, 0x84, 0x61, 0x7d, 0x41, 0x60, 0x5b, 0x28, 0x84, 0xd6, 0xc1, 0xbc, 0xaa,
	0x65, 0xc5, 0xcc, 0x9b, 0xc5, 0x38, 0x4c, 0x26, 0x50, 0x77, 0xac, 0xec, 0x67, 0x5e, 0xd9, 0xcb,
	0xbc, 0xb2, 0x9f, 0xe9, 0x90, 0x79, 0xe5, 0x5b, 0x46, 0xdb, 0x84, 0xb9, 0x0b, 0x91, 0x99, 0xf4,
	0x1d, 0x04, 0x98, 0x78, 0x25, 0xc9, 0x98, 0x8a, 0x43, 0x63, 0x22, 0x73, 0x9c, 0xdd, 0x05, 0x66,
	0xf7, 0xe7, 0x06, 0xda, 0xed, 0x9b, 0xc3, 0x19, 0xbe, 0x86, 0x0f, 0xf4, 0x7d, 0xd1, 0x72, 0xa7,
	0x0d, 0xb7, 0x4f, 0xcd, 0x51, 0xbc, 0xcb, 0x6e, 0xb9, 0xbe, 0xbe, 0xa9, 0xd0, 0x85, 0xfc, 0x45,
	0x32, 0x82, 0x77, 0xb8, 0xce, 0xab, 0xa6, 0x7d, 0xbd, 0xc9, 0xac, 0xd8, 0xb9, 0x10, 0xfc, 0x24,
	0xa3, 0x18, 0xbf, 0xde, 0x71, 0xef, 0xcc, 0x59, 0x4e, 0xdd, 0xb0, 0x46, 0x8a, 0x47, 0xd0, 0xf1,
	0x4f, 0x2c, 0x44, 0xae, 0x50, 0x13, 0x7f, 0x3a, 0xa6, 0x19, 0xf8, 0x7a, 0x01, 0xef, 0xb0, 0xfd,
	0x4b, 0xe0, 0x92, 0x13, 0x32, 0x6c, 0xf9, 0x33, 0x80, 0xab, 0x40, 0x00, 0x7d, 0x03, 0x01, 0x42,
	0xcf, 0x33, 0x3c, 0x42, 0xde, 0x42, 0x24, 0x5a, 0x28, 0x04, 0x47, 0x21, 0x77, 0x70, 0xfc, 0x1c,
	0x01, 0xd4, 0xa8, 0x09, 0x49, 0x50, 0x8b, 0x43, 0x41, 0xd5, 0x17, 0x14, 0x67, 0xf1, 0xc1, 0xc0,
	0x35, 0x55, 0x56, 0xba, 0x26, 0xd7, 0x17, 0xcc, 0xd6, 0xf5, 0x66, 0x40, 0xdc, 0x3e, 0xfc, 0x64,
	0xd7, 0xfb, 0x0d, 0x21, 0xe1, 0xff, 0xa0, 0x9b, 0xf8, 0x50, 0xca, 0x2c, 0xc0, 0xfa, 0x75, 0xbc,
	0xcb, 0x88, 0x0e, 0x80, 0x73, 0x4f, 0x4b, 0x20, 0xe6, 0x04, 0x02, 0x6e, 0x5e, 0x18, 0x6d, 0x81,
	0xd1, 0x55, 0xcb, 0x4a, 0x34, 0x5a, 0x57, 0xaa, 0xbf, 0x8b, 0x00, 0x67, 0x5c, 0x51, 0x3a, 0xce,
	0xa2, 0x36, 0x9c, 0xfa, 0xbc, 0x3c, 0x86, 0x9f, 0x09, 0xfc, 0x75, 0x33, 0xb2, 0xcc, 0x47, 0x2a,
	0xb7, 0x6d, 0x2c, 0xf5, 0x2b, 0xb7, 0xf7, 0x37, 0x5d, 0x0f, 0x03, 0x83, 0x9f, 0x02, 0xc8, 0x5f,
	0xc1, 0x4f, 0x45, 0x77, 0x0c, 0xc0, 0x72, 0x45, 0x02, 0x78, 0x54, 0x1c, 0xe0, 0xe6, 0x44, 0x51,
	0x13, 0xac, 0xad, 0x5a, 0x56, 0x92, 0xb5, 0xba, 0xbc, 0xfb, 0x3b, 0x14, 0x86, 0x91, 0x24, 0xc4,
	0xa2, 0x26, 0x88, 0xfa, 0x3c, 0x7b, 0x17, 0x85, 0x7e, 0x9a, 0x6f, 0xb9, 0x53, 0xfd, 0x4d, 0x9a,
	0x5a, 0x6d, 0xd7, 0x55, 0xff, 0x7e, 0x8b, 0xc2, 0xca, 0x20, 0x98, 0x03, 0xa4, 0xbe, 0xcc, 0xec,
	0x09, 0x07, 0x72, 0xd6, 0x42, 0xb4, 0xc0, 0x8b, 0xd1, 0xc7, 0xe8, 0x6d, 0x4c, 0x63, 0x5b, 0x96,
	0xc9, 0xf5, 0x29, 0xd8, 0xd5, 0x06, 0xb4, 0x9e, 0xc5, 0xfb, 0x9d, 0x6e, 0xa7, 0xdd, 0xb1, 0x83,
	0x81, 0x6a, 0xb3, 0xd9, 0x35, 0x7b, 0x3d, 0xa0, 0x37, 0x79, 0x90, 0xfe, 0x08, 0xe1, 0xcf, 0x66,
	0x0a, 0x07, 0x92, 0x6c, 0xbc, 0xd7, 0x8e, 0x0f, 0x43, 0xac, 0x9f, 0x57, 0xda, 0x4f, 0xf4, 0x67,
	0x43, 0x1c, 0x26, 0x09, 0xa6, 0x16, 0x60, 0x8e, 0x6e, 0x69, 0xe2, 0x98, 0x75, 0x25, 0xde, 0x87,
	0x01, 0x0b, 0x69, 0xea, 0x06, 0xb1, 0x50, 0xdc, 0x12, 0x16, 0xf4, 0x85, 0xd0, 0xa1, 0xb0, 0xdc,
	0xce, 0xcf, 0x2e, 0xce, 0x9a, 0xe6, 0x14, 0x3b, 0xf3, 0x04, 0x9b, 0xf4, 0x48, 0x69, 0xe5, 0x87,
	0xc3, 0xba, 0x13, 0xbd, 0xae, 0x50, 0x5a, 0xa3, 0xd3, 0x82, 0xba, 0x13, 0xbd, 0x46, 0x47, 0x45,
	0xd5, 0x93, 0xfe, 0x79, 0x2b, 0x30, 0x2d, 0xb2, 0xb0, 0x0b, 0xe3, 0xe1, 0x82, 0xc7, 0x0d, 0x28,
	0x2c, 0xec, 0xdc, 0xbc, 0x60, 0xc1, 0xe3, 0x2e, 0xd2, 0x59, 0x3c, 0x1a, 0xa8, 0x7f, 0x11, 0x4e,
	0x7c, 0x53, 0xfe, 0x81, 0x4f, 0xa9, 0x9c, 0xd1, 0x37, 0x11, 0x3e, 0x9c, 0x2a, 0x08, 0x90, 0xd4,
	0xf1, 0xee, 0x25, 0x7e, 0x08, 0xb0, 0x8c, 0x4b, 0x60, 0x11, 0x84, 0x02, 0x1a, 0x51, 0x20, 0xbd,
	0x03, 0x78, 0xaa, 0x96, 0x95, 0x82, 0x47, 0x57, 0x4e, 0xfd, 0x39, 0x40, 0x9c, 0xa4, 0x2a, 0x0b,
	0x71, 0x51, 0x2b, 0x62, 0x7d, 0x39, 0xe4, 0x88, 0x5b, 0xcc, 0x19, 0x38, 0x83, 0xab, 0x2d, 0x6c,
	0xc7, 0xf1, 0xee, 0xe0, 0xf0, 0x1e, 0x54, 0x68, 0xff, 0xf0, 0x22, 0x5e, 0xa6, 0xdf, 0x42, 0x61,
	0xf0, 0x89, 0x1a, 0x81, 0xc0, 0x1a, 0x7e, 0xda, 0xe0, 0x46, 0xc0, 0x61, 0x63, 0xd2, 0xdb, 0xbd,
	0x60, 0x22, 0xd0, 0x27, 0x88, 0xa3, 0x6d, 0x71, 0xbf, 0x29, 0x82, 0xd6, 0x15, 0x2e, 0xef, 0xa3,
	0x30, 0x32, 0x15, 0xc0, 0x16, 0x35, 0x82, 0xd5, 0xb9, 0x62, 0xf7, 0x1d, 0xe7, 0x7b, 0xbe, 0x1a,
	0x3c, 0xe7, 0x51, 0x8b, 0x95, 0x60, 0x1b, 0x5c, 0x88, 0x6c, 0x83, 0xa3, 0x95, 0x24, 0x26, 0x3c,
	0xcc, 0xab, 0x1e, 0x3f, 0xa4, 0x50, 0x49, 0x04, 0xa1, 0x41, 0x5e, 0x09, 0x02, 0xa3, 0x95, 0x24,
	0x05, 0xe3, 0x56, 0x54, 0x12, 0x25, 0xc4, 0x45, 0xad, 0x88, 0xf5, 0x85, 0xc7, 0x75, 0xfc, 0x2c,
	0xc3, 0x73, 0xa3, 0xd3, 0x73, 0x43, 0xad, 0xeb, 0xfc, 0xd3, 0x21, 0xb9, 0x75, 0xe5, 0xfb, 0x08,
	0x36, 0x4a, 0x29, 0xb2, 0x1e, 0x1f, 0x3d, 0xf4, 0x15, 0xb1, 0x3e, 0xde, 0x6c, 0xe5, 0x40, 0x94,
	0x18, 0xf3, 0xf1, 0x4a, 0x18, 0xca, 0x16, 0x8b, 0x43, 0x30, 0xa2, 0x5c, 0x09, 0x83, 0x89, 0x7c,
	0x71, 0x08, 0xae, 0xc6, 0x2b, 0xa1, 0x08, 0x6f, 0xeb, 0x2a, 0xa1, 0x14, 0xd8, 0xa2, 0x46, 0xb0,
	0xfa, 0x42, 0x7d, 0x2e, 0x2c, 0x56, 0x41, 0x99, 0xcd, 0x15, 0x16, 0xf4, 0x2d, 0x84, 0x8f, 0xa4,
	0x4b, 0x02, 0x5e, 0x4c, 0xbc, 0xc7, 0x14, 0xc6, 0xc0, 0x11, 0x67, 0x24, 0x98, 0x11, 0xc5, 0x02,
	0x37, 0x31, 0x91, 0xb4, 0x13, 0xd6, 0xa3, 0x34, 0x50, 0xba, 0x82, 0xe1, 0x7e, 0x00, 0x3b, 0x51,
	0x57, 0x26, 0xec, 0xa2, 0x66, 0xd8, 0xfa, 0x82, 0xe2, 0x6b, 0xe1, 0x9e, 0xff, 0x65, 0xff, 0x4d,
	0x42, 0x35, 0xc7, 0x13, 0x82, 0xa4, 0x42, 0x11, 0x39, 0x2d, 0x08, 0x92, 0xc3, 0xd3, 0xc2, 0x6a,
	0x74, 0x40, 0xe1, 0xb4, 0xc0, 0x09, 0x0c, 0x4e, 0x0b, 0x9c, 0xb0, 0xe8, 0x63, 0xc0, 0x44, 0x60,
	0x5b, 0xf1, 0x18, 0x50, 0x1a, 0x67, 0x51, 0x1b, 0x4e, 0x7d, 0x91, 0x30, 0x1d, 0x8b, 0x84, 0x3c,
	0xb5, 0x21, 0xee, 0x75, 0x21, 0x41, 0x42, 0x36, 0xb8, 0xa2, 0xa0, 0xc0, 0x06, 0x97, 0x1a, 0xbc,
	0xb0, 0x04, 0xaf, 0x6f, 0x4d, 0x2d, 0x48, 0xf0, 0xfa, 0x60, 0x9c, 0x45, 0x6d, 0x38, 0xf5, 0x79,
	0x7d, 0x0a, 0x7f, 0x21, 0xf0, 0xd7, 0xb4, 0xff, 0x46, 0x91, 0xd3, 0x7e, 0xab, 0xeb, 0x2c, 0x3b,
	0x3d, 0xc3, 0x8a, 0x3c, 0xf1, 0xef, 0xd8, 0x4d, 0x73, 0x2d, 0x78, 0xe2, 0xcf, 0x7e, 0xd0, 0x5f,
	0x22, 0x7c, 0x52, 0x4e, 0x0a, 0x90, 0xf3, 0x16, 0xc2, 0x07, 0x9b, 0x19, 0x37, 0x82, 0x67, 0xae,
	0x48, 0x90, 0x95, 0xa5, 0x0f, 0xb8, 0xcb, 0x54, 0x45, 0x57, 0x80, 0x81, 0xaa, 0x65, 0xc9, 0x30,
	0xa0, 0x2b, 0x82, 0xbe, 0x53, 0x00, 0xce, 0x06, 0xea, 0x95, 0xe7, 0xac, 0xf8, 0x98, 0x38, 0xd3,
	0x17, 0x7e, 0x97, 0xf0, 0xd1, 0xc4, 0x72, 0x21, 0x17, 0x77, 0x3f, 0x46, 0xf8, 0xb9, 0x01, 0xd3,
	0x81, 0x3c, 0x17, 0xef, 0x5f, 0xcd, 0x08, 0xb4, 0x0b, 0xaa, 0x59, 0x29, 0xb0, 0x95, 0x2c, 0x9c,
	0xda, 0x80, 0x4e, 0x2c, 0x12, 0x5b, 0x15, 0x53, 0x7f, 0x0b, 0xf8, 0x48, 0x57, 0x38, 0x98, 0x8f,
	0xe2, 0x96, 0xf1, 0xa1, 0x2f, 0x6c, 0x26, 0xf1, 0x89, 0xe8, 0x19, 0x64, 0x35, 0x4f, 0xd1, 0x7a,
	0x07, 0x85, 0xa5, 0x2f, 0x53, 0x08, 0x50, 0xf6, 0x5d, 0x84, 0x9f, 0x31, 0xd2, 0xef, 0x03, 0xb7,
	0x4d, 0x48, 0x6e, 0xfb, 0x57, 0x33, 0xb3, 0x2f, 0x4b, 0x11, 0x75, 0x01, 0x3c, 0x9c, 0x49, 0x56,
	0x1f, 0x4f, 0xbd, 0xfa, 0x2f, 0x0a, 0xeb, 0xa4, 0x1e, 0xba, 0x8a, 0x8f, 0x85, 0x2e, 0x9d, 0x1b,
	0xa4, 0xfe, 0x22, 0x77, 0xdd, 0x36, 0xf2, 0x86, 0xdd, 0xaf, 0x11, 0x3e, 0x25, 0x29, 0x06, 0x98,
	0xbc, 0x8b, 0xf0, 0xa1, 0x8e, 0x3d, 0x38, 0xf4, 0xae, 0x4a, 0x70, 0x99, 0xa9, 0x11, 0xd8, 0xcc,
	0x56, 0x46, 0x57, 0xc3, 0x75, 0x4b, 0x8a, 0x06, 0x5d, 0x01, 0xf8, 0xbd, 0x02, 0x10, 0x37, 0x58,
	0xb1, 0x02, 0x71, 0xc5, 0xc7, 0x46, 0x9c, 0xce, 0x67, 0x56, 0x63, 0x7c, 0xe1, 0x9a, 0xee, 0xf4,
	0x2c, 0xa3, 0x9e, 0x27, 0x1a, 0xef, 0x23, 0x3c, 0xae, 0x22, 0x0b, 0x98, 0x7d, 0x1b, 0x61, 0x6a,
	0x0c, 0xbc, 0x1d, 0x9c, 0x3d, 0x23, 0x9d, 0xe3, 0x59, 0xc2, 0x80, 0x63, 0x09, 0xb5, 0x74, 0x03,
	0xf8, 0xe9, 0x57, 0x2a, 0x19, 0x7e, 0x74, 0x85, 0xe9, 0xdb, 0x05, 0x60, 0x54, 0x52, 0xbb, 0x2a,
	0xa3, 0xc5, 0xff, 0x03, 0xa3, 0xda, 0x42, 0x77, 0xfc, 0xee, 0x65, 0xfc, 0x24, 0x63, 0x87, 0xfc,
	0x04, 0xe1, 0xed, 0x7e, 0x17, 0x21, 0x39, 0x27, 0x01, 0x27, 0xde, 0xce, 0x58, 0x3a, 0xaf, 0x3a,
	0xcd, 0xb7, 0x87, 0x9e, 0xfc, 0xf6, 0x07, 0x1f, 0xff, 0xb0, 0x70, 0x8c, 0x1c, 0xad, 0x70, 0xf3,
	0x2b, 0xde, 0x9f, 0x2d, 0xb7, 0xc2, 0xb7, 0xd0, 0x92, 0xdf, 0x20, 0xbc, 0xb3, 0xff, 0xaa, 0x98,
	0x7c, 0x49, 0x56, 0x67, 0x42, 0x0f, 0x64, 0xe9, 0x52, 0xbe, 0xc9, 0x60, 0xf6, 0xf3, 0xcc, 0xec,
	0x31, 0x52, 0xc9, 0x36, 0x3b, 0xec, 0xb7, 0xad, 0x6c, 0x34, 0x9c, 0xa6, 0xb9, 0x49, 0x7e, 0x85,
	0xd8, 0x2b, 0x63, 0x78, 0x74, 0x6c, 0x59, 0xf2, 0x20, 0x12, 0x3a, 0x25, 0xe5, 0x41, 0x24, 0x75,
	0x40, 0xd2, 0xd3, 0x0c, 0xc4, 0x09, 0x72, 0x5c, 0x16, 0x04, 0x79, 0x1f, 0xe1, 0x1d, 0xd0, 0xdb,
	0x41, 0x2e, 0xaa, 0x10, 0xc8, 0xf5, 0xf8, 0x95, 0xbe, 0x98, 0x67, 0x2a, 0x18, 0x7d, 0x8d, 0x19,
	0x3d, 0x49, 0xae, 0x0e, 0x36, 0xba, 0x69, 0xb8, 0x46, 0x65, 0x83, 0x7b, 0x24, 0xb2, 0x59, 0xd9,
	0x80, 0x56, 0xc8, 0x4d, 0xf2, 0x0b, 0x84, 0x31, 0x48, 0xf7, 0x1c, 0x71, 0x51, 0x85, 0xcb, 0x9c,
	0x78, 0xe2, 0xbd, 0x86, 0xb4, 0xcc, 0xf0, 0x1c, 0x27, 0xc7, 0xe4, 0xf0, 0x90, 0xfb, 0x08, 0xef,
	0xe2, 0x1a, 0xd2, 0xc8, 0x15, 0x05, 0x36, 0x93, 0x9a, 0xf0, 0x4a, 0x57, 0xf3, 0x0b, 0x00, 0x10,
	0x13, 0x0c, 0xc4, 0x05, 0x72, 0x3e, 0x1b, 0x84, 0xd8, 0xd8, 0x5e, 0xd9, 0x60, 0x4d, 0x8a, 0x9b,
	0xe4, 0x4f, 0x08, 0xef, 0xe1, 0x24, 0x7b, 0x0e, 0xb9, 0xa2, 0xc0, 0xea, 0x70, 0xb8, 0xd2, 0x9a,
	0x06, 0xe9, 0x79, 0x86, 0xeb, 0x34, 0x29, 0xab, 0xe1, 0xf2, 0xf2, 0xe4, 0xa9, 0x68, 0x67, 0x19,
	0x99, 0x50, 0xa0, 0x38, 0xa1, 0x93, 0xae, 0x74, 0x25, 0xf7, 0x7c, 0x40, 0x72, 0x91, 0x21, 0x39,
	0x43, 0xc6, 0xb2, 0x91, 0x44, 0x5b, 0xdf, 0x2a, 0x1b, 0xb6, 0xb1, 0x64, 0x6e, 0x92, 0x77, 0x11,
	0xde, 0x1d, 0x95, 0xe9, 0xf9, 0x66, 0x42, 0x81, 0xda, 0xa1, 0xf0, 0xa4, 0x74, 0xfc, 0xd1, 0x71,
	0x86, 0xe7, 0x24, 0x39, 0x21, 0x8f, 0x87, 0x3c, 0x40, 0x78, 0x17, 0xd7, 0xea, 0xa6, 0x94, 0x3a,
	0x49, 0x3d, 0x7b, 0x4a, 0xa9, 0x93, 0xd8, 0x65, 0x47, 0xa7, 0x19, 0x90, 0x09, 0x72, 0x69, 0x70,
	0xfe, 0x87, 0xdf, 0x75, 0x88, 0x55, 0x8d, 0xfc, 0x07, 0xe1, 0xbd, 0x09, 0x3d, 0x54, 0x64, 0x26,
	0xcf, 0x2a, 0x17, 0xeb, 0x27, 0x2b, 0xcd, 0x0e, 0x2b, 0x06, 0xc0, 0x2e, 0x32, 0xb0, 0xf3, 0xe4,
	0x86, 0xec, 0x8a, 0x13, 0xfd, 0x4c, 0xa5, 0xb2, 0x91, 0xd8, 0xaa, 0xb7, 0x49, 0xfe, 0x8a, 0xf0,
	0x81, 0x04, 0xad, 0x5e, 0x9c, 0xce, 0xe4, 0x59, 0x20, 0x87, 0xc0, 0x9f, 0xdd, 0x27, 0x47, 0x2f,
	0x31, 0xfc, 0xe7, 0xc9, 0xd9, 0x3c, 0xf8, 0xc9, 0xef, 0x11, 0xdf, 0x6e, 0xa6, 0x54, 0x55, 0x12,
	0xda, 0xdb, 0x94, 0xaa, 0x4a, 0x52, 0xff, 0x1b, 0x3d, 0xcb, 0xf0, 0x94, 0xc9, 0xc9, 0xc1, 0x78,
	0xc2, 0x0f, 0x8a, 0xc8, 0x1f, 0x90, 0xd0, 0x9a, 0x46, 0xd4, 0x0d, 0xe1, 0xbb, 0xe1, 0xd4, 0xf2,
	0x30, 0xa9, 0x5d, 0x8e, 0x9e, 0x63, 0x50, 0x2a, 0xe4, 0x94, 0x1c, 0x14, 0xf8, 0xfa, 0x89, 0x7c,
	0x84, 0xf0, 0x6e, 0xa1, 0xe1, 0x8a, 0x54, 0x15, 0x8c, 0x49, 0x6e, 0x36, 0x2b, 0x4d, 0x0e, 0x23,
	0x02, 0x10, 0xcd, 0x32, 0x44, 0x57, 0xc9, 0x44, 0x36, 0x22, 0xf1, 0x83, 0xad, 0x58, 0x6d, 0xf9,
	0x00, 0x61, 0x22, 0xe8, 0xf0, 0x52, 0xab, 0xaa, 0x90, 0x13, 0xc3, 0xa2, 0x4c, 0x6f, 0x95, 0x93,
	0x5d, 0xa2, 0x45, 0x94, 0xe4, 0x9f, 0x08, 0x3f, 0xcd, 0x37, 0x3f, 0x11, 0xf5, 0x7d, 0x90, 0xd0,
	0xf4, 0x55, 0xaa, 0x0e, 0x21, 0x01, 0xf0, 0x7c, 0x95, 0xe1, 0x79, 0x89, 0xdc, 0x94, 0xda, 0x72,
	0x04, 0xef, 0xa2, 0xe3, 0xdb, 0x5c, 0xa1, 0x69, 0x6e, 0x93, 0xfc, 0x05, 0xe1, 0x4f, 0xf1, 0x3a,
	0x3d, 0x2f, 0xaa, 0xef, 0x91, 0x72, 0x63, 0x4e, 0x6d, 0x60, 0x93, 0xcd, 0x3d, 0x01, 0x33, 0xf9,
	0x3b, 0xc2, 0xbb, 0x85, 0x1e, 0x1c, 0xa5, 0xdc, 0x4b, 0x6e, 0xcf, 0x52, 0xca, 0xbd, 0x94, 0xb6,
	0x2b, 0xfa, 0x22, 0x43, 0x34, 0x47, 0x66, 0xb2, 0x11, 0x89, 0x5f, 0x3b, 0xc6, 0xdd, 0xe8, 0x6f,
	0xc1, 0xbc, 0x14, 0x14, 0x54, 0xa9, 0xa6, 0xe0, 0xb0, 0x60, 0xd3, 0x7b, 0xcc, 0x64, 0x53, 0x50,
	0x04, 0x4b, 0xfe, 0x8d, 0xf0, 0xfe, 0xc4, 0xf6, 0x2c, 0x32, 0x2d, 0x6b, 0x55, 0x56, 0xa7, 0x58,
	0x69, 0x66, 0x48, 0x29, 0x00, 0x6f, 0x9e, 0xc1, 0xbb, 0x46, 0x66, 0xb3, 0xe1, 0x59, 0x9d, 0x9e,
	0x1b, 0x82, 0xf3, 0x16, 0xee, 0xe0, 0xe4, 0x2f, 0xd4, 0xd3, 0x8f, 0xfb, 0x95, 0xa7, 0xdf, 0x41,
	0xa2, 0x5e, 0x79, 0x84, 0xbe, 0x9a, 0x1c, 0x95, 0x47, 0xec, 0x96, 0x91, 0x8d, 0x59, 0xf1, 0x0b,
	0xdc, 0xb4, 0x98, 0xbd, 0xd7, 0xaf, 0x37, 0x81, 0xa6, 0x7c, 0xf5, 0x26, 0x37, 0xd2, 0xd4, 0x36,
	0x31, 0xc5, 0x63, 0x5d, 0x1f, 0xa9, 0xb7, 0xd1, 0xdc, 0x23, 0x76, 0x05, 0x11, 0x95, 0x72, 0x91,
	0xd2, 0x15, 0x55, 0x9a, 0x1a, 0x4a, 0x86, 0xda, 0x93, 0x91, 0xf8, 0x17, 0xd2, 0xb1, 0x08, 0x7d,
	0x80, 0xf0, 0x5e, 0x51, 0x8d, 0xe7, 0x3c, 0x95, 0x62, 0x31, 0x34, 0xd4, 0x8c, 0xc6, 0x2e, 0x7a,
	0x81, 0x41, 0x1d, 0x27, 0xa7, 0x55, 0xa1, 0xb2, 0x33, 0x20, 0xd7, 0xc8, 0xa3, 0xb4, 0xf7, 0x4c,
	0x6a, 0x5e, 0x52, 0xda, 0x7b, 0x26, 0x36, 0x25, 0xc9, 0x9e, 0x01, 0xf9, 0x2f, 0xd7, 0x63, 0x5e,
	0xfb, 0x23, 0xc2, 0x7b, 0x38, 0xf9, 0xaa, 0x0f, 0x51, 0x86, 0x43, 0x97, 0xd6, 0x72, 0x25, 0x7b,
	0x48, 0xe0, 0xd1, 0x45, 0x1d, 0x05, 0x89, 0x96, 0xc3, 0x51, 0x7c, 0xe8, 0x5d, 0xcd, 0x2f, 0x20,
	0x9f, 0xa3, 0x52, 0xd2, 0x2b, 0xe2, 0xa8, 0x30, 0xb7, 0x72, 0x38, 0x2a, 0x27, 0xba, 0xb4, 0x2e,
	0x29, 0x55, 0x47, 0x41, 0x46, 0xbd, 0x59, 0xc0, 0x07, 0xb3, 0x7a, 0x58, 0xc8, 0xbc, 0x02, 0xed,
	0x12, 0x4d, 0x3f, 0xa5, 0x9b, 0xda, 0xe4, 0xa9, 0x79, 0x35, 0xf9, 0x9f, 0x3c, 0x54, 0x36, 0xd8,
	0xcb, 0xbb, 0x4d, 0xf2, 0x46, 0x01, 0x1f, 0xce, 0x52, 0xe7, 0x39, 0x79, 0x5e, 0xc1, 0x47, 0x5a,
	0xa9, 0x90, 0xec, 0x6b, 0x92, 0x7d, 0x40, 0x91, 0x4c, 0x05, 0xf9, 0x17, 0xc2, 0xfb, 0x53, 0xde,
	0x59, 0xe5, 0x4d, 0x3d, 0x11, 0xf1, 0xb5, 0xe1, 0x05, 0x01, 0xd4, 0x19, 0x06, 0xf5, 0x0a, 0xb9,
	0xac, 0x12, 0xed, 0xb5, 0x65, 0x10, 0xd3, 0x77, 0xfb, 0x3f, 0x10, 0x1e, 0x49, 0xf5, 0xf7, 0x5c,
	0xde, 0x9c, 0xcc, 0x0d, 0x7b, 0x50, 0xb3, 0x11, 0xbd, 0xcc, 0x60, 0x3f, 0x4f, 0xce, 0xe5, 0x82,
	0x4d, 0x7e, 0x56, 0xc0, 0x74, 0xf0, 0xdb, 0x4c, 0xb2, 0xa8, 0xb8, 0x1d, 0x95, 0x7a, 0x2d, 0x5c,
	0xfa, 0x8a, 0x66, 0xa9, 0x40, 0xc9, 0x6d, 0x46, 0xc9, 0x22, 0x59, 0x88, 0x53, 0x72, 0x2a, 0x90,
	0xcf, 0x6d, 0x0a, 0x57, 0xcd, 0x5a, 0xd3, 0x17, 0x5c, 0x1b, 0x14, 0x1e, 0x3f, 0x2d, 0xe0, 0xe7,
	0x06, 0x9b, 0xe2, 0xc5, 0xca, 0xa2, 0xe2, 0xbe, 0x56, 0x33, 0x65, 0x4a, 0x6f, 0xc8, 0xe9, 0x02,
	0xa3, 0xec, 0x06, 0x79, 0x41, 0x1f, 0x65, 0x93, 0x37, 0xdf, 0x7b, 0x38, 0x8a, 0xee, 0x3d, 0x1c,
	0x45, 0x1f, 0x3d, 0x1c, 0x45, 0x3f, 0x78, 0x34, 0xba, 0xed, 0xde, 0xa3, 0xd1, 0x6d, 0x0f, 0x1e,
	0x8d, 0x6e, 0xbb, 0x7d, 0xae, 0xdd, 0x71, 0xef, 0xac, 0xd4, 0xcb, 0x0d, 0x67, 0x29, 0x4b, 0xdf,
	0x5a, 0x5f, 0xa3, 0xbb, 0xbe, 0x6c, 0xf6, 0xea, 0xdb, 0xd9, 0xc8, 0x99, 0xff, 0x05, 0x00, 0x00,
	0xff, 0xff, 0xe1, 0xb1, 0x08, 0x96, 0x21, 0x4a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a NFTSchema by index.
	NFTSchema(ctx context.Context, in *QueryGetNFTSchemaRequest, opts ...grpc.CallOption) (*QueryGetNFTSchemaResponse, error)
	// Queries a list of NFTSchema items.
	NFTSchemaAll(ctx context.Context, in *QueryAllNFTSchemaRequest, opts ...grpc.CallOption) (*QueryAllNFTSchemaResponse, error)
	// Queries a NftData by index.
	NftData(ctx context.Context, in *QueryGetNftDataRequest, opts ...grpc.CallOption) (*QueryGetNftDataResponse, error)
	// Queries a list of NftData items.
	NftDataAll(ctx context.Context, in *QueryAllNftDataRequest, opts ...grpc.CallOption) (*QueryAllNftDataResponse, error)
	// Queries a ActionByRefId by index.
	ActionByRefId(ctx context.Context, in *QueryGetActionByRefIdRequest, opts ...grpc.CallOption) (*QueryGetActionByRefIdResponse, error)
	// Queries a list of ActionByRefId items.
	ActionByRefIdAll(ctx context.Context, in *QueryAllActionByRefIdRequest, opts ...grpc.CallOption) (*QueryAllActionByRefIdResponse, error)
	// Queries a Organization by index.
	Organization(ctx context.Context, in *QueryGetOrganizationRequest, opts ...grpc.CallOption) (*QueryGetOrganizationResponse, error)
	// Queries a list of Organization items.
	OrganizationAll(ctx context.Context, in *QueryAllOrganizationRequest, opts ...grpc.CallOption) (*QueryAllOrganizationResponse, error)
	// Queries a NftCollection by index.
	NftCollection(ctx context.Context, in *QueryGetNftCollectionRequest, opts ...grpc.CallOption) (*QueryGetNftCollectionResponse, error)
	// Queries a NFTSchemaByContract by index.
	NFTSchemaByContract(ctx context.Context, in *QueryGetNFTSchemaByContractRequest, opts ...grpc.CallOption) (*QueryGetNFTSchemaByContractResponse, error)
	// Queries a list of NFTSchemaByContract items.
	NFTSchemaByContractAll(ctx context.Context, in *QueryAllNFTSchemaByContractRequest, opts ...grpc.CallOption) (*QueryAllNFTSchemaByContractResponse, error)
	// Queries a NFTFeeConfig by index.
	NFTFeeConfig(ctx context.Context, in *QueryGetNFTFeeConfigRequest, opts ...grpc.CallOption) (*QueryGetNFTFeeConfigResponse, error)
	// Queries a NFTFeeBalance by index.
	NFTFeeBalance(ctx context.Context, in *QueryGetNFTFeeBalanceRequest, opts ...grpc.CallOption) (*QueryGetNFTFeeBalanceResponse, error)
	// Queries a MetadataCreator by index.
	MetadataCreator(ctx context.Context, in *QueryGetMetadataCreatorRequest, opts ...grpc.CallOption) (*QueryGetMetadataCreatorResponse, error)
	// Queries a list of MetadataCreator items.
	MetadataCreatorAll(ctx context.Context, in *QueryAllMetadataCreatorRequest, opts ...grpc.CallOption) (*QueryAllMetadataCreatorResponse, error)
	// Queries a ActionExecutor by index.
	ActionExecutor(ctx context.Context, in *QueryGetActionExecutorRequest, opts ...grpc.CallOption) (*QueryGetActionExecutorResponse, error)
	// Queries a list of ActionExecutor items.
	ActionExecutorAll(ctx context.Context, in *QueryAllActionExecutorRequest, opts ...grpc.CallOption) (*QueryAllActionExecutorResponse, error)
	// Queries a SchemaAttribute by index.
	SchemaAttribute(ctx context.Context, in *QueryGetSchemaAttributeRequest, opts ...grpc.CallOption) (*QueryGetSchemaAttributeResponse, error)
	// Queries a list of SchemaAttribute items.
	SchemaAttributeAll(ctx context.Context, in *QueryAllSchemaAttributeRequest, opts ...grpc.CallOption) (*QueryAllSchemaAttributeResponse, error)
	// Queries a list of ListAttributeBySchema items.
	ListAttributeBySchema(ctx context.Context, in *QueryListAttributeBySchemaRequest, opts ...grpc.CallOption) (*QueryListAttributeBySchemaResponse, error)
	// Queries a ActionOfSchema by index.
	ActionOfSchema(ctx context.Context, in *QueryGetActionOfSchemaRequest, opts ...grpc.CallOption) (*QueryGetActionOfSchemaResponse, error)
	// Queries a list of ActionOfSchema items.
	ActionOfSchemaAll(ctx context.Context, in *QueryAllActionOfSchemaRequest, opts ...grpc.CallOption) (*QueryAllActionOfSchemaResponse, error)
	// Queries a ExecutorOfSchema by index.
	ExecutorOfSchema(ctx context.Context, in *QueryGetExecutorOfSchemaRequest, opts ...grpc.CallOption) (*QueryGetExecutorOfSchemaResponse, error)
	// Queries a list of ExecutorOfSchema items.
	ExecutorOfSchemaAll(ctx context.Context, in *QueryAllExecutorOfSchemaRequest, opts ...grpc.CallOption) (*QueryAllExecutorOfSchemaResponse, error)
	// Queries a Virtual by index
	VirtualAction(ctx context.Context, in *QueryGetVirtualActionRequest, opts ...grpc.CallOption) (*QueryGetVirtualActionResponse, error)
	// Queries a list of Virtual items.
	VirtualActionAll(ctx context.Context, in *QueryAllVirtualActionRequest, opts ...grpc.CallOption) (*QueryAllVirtualActionResponse, error)
	// Queries a VirtualSchema by index.
	VirtualSchema(ctx context.Context, in *QueryGetVirtualSchemaRequest, opts ...grpc.CallOption) (*QueryGetVirtualSchemaResponse, error)
	// Queries a list of VirtualSchema items.
	VirtualSchemaAll(ctx context.Context, in *QueryAllVirtualSchemaRequest, opts ...grpc.CallOption) (*QueryAllVirtualSchemaResponse, error)
	// Queries a DisableVirtualSchema by index.
	DisableVirtualSchemaProposal(ctx context.Context, in *QueryGetDisableVirtualSchemaProposalRequest, opts ...grpc.CallOption) (*QueryGetDisableVirtualSchemaProposalResponse, error)
	// Queries a list of DisableVirtualSchema items.
	DisableVirtualSchemaProposalAll(ctx context.Context, in *QueryAllDisableVirtualSchemaProposalRequest, opts ...grpc.CallOption) (*QueryAllDisableVirtualSchemaProposalResponse, error)
	// Queries a VirtualSchemaProposal by index.
	VirtualSchemaProposal(ctx context.Context, in *QueryGetVirtualSchemaProposalRequest, opts ...grpc.CallOption) (*QueryGetVirtualSchemaProposalResponse, error)
	// Queries a list of VirtualSchemaProposal items.
	VirtualSchemaProposalAll(ctx context.Context, in *QueryAllVirtualSchemaProposalRequest, opts ...grpc.CallOption) (*QueryAllVirtualSchemaProposalResponse, error)
	// Queries a ActiveDislabeVirtualSchemaProposal by index.
	ActiveDislabeVirtualSchemaProposal(ctx context.Context, in *QueryGetActiveDislabeVirtualSchemaProposalRequest, opts ...grpc.CallOption) (*QueryGetActiveDislabeVirtualSchemaProposalResponse, error)
	// Queries a list of ActiveDislabeVirtualSchemaProposal items.
	ActiveDislabeVirtualSchemaProposalAll(ctx context.Context, in *QueryAllActiveDislabeVirtualSchemaProposalRequest, opts ...grpc.CallOption) (*QueryAllActiveDislabeVirtualSchemaProposalResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NFTSchema(ctx context.Context, in *QueryGetNFTSchemaRequest, opts ...grpc.CallOption) (*QueryGetNFTSchemaResponse, error) {
	out := new(QueryGetNFTSchemaResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/NFTSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NFTSchemaAll(ctx context.Context, in *QueryAllNFTSchemaRequest, opts ...grpc.CallOption) (*QueryAllNFTSchemaResponse, error) {
	out := new(QueryAllNFTSchemaResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/NFTSchemaAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftData(ctx context.Context, in *QueryGetNftDataRequest, opts ...grpc.CallOption) (*QueryGetNftDataResponse, error) {
	out := new(QueryGetNftDataResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/NftData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftDataAll(ctx context.Context, in *QueryAllNftDataRequest, opts ...grpc.CallOption) (*QueryAllNftDataResponse, error) {
	out := new(QueryAllNftDataResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/NftDataAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionByRefId(ctx context.Context, in *QueryGetActionByRefIdRequest, opts ...grpc.CallOption) (*QueryGetActionByRefIdResponse, error) {
	out := new(QueryGetActionByRefIdResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/ActionByRefId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionByRefIdAll(ctx context.Context, in *QueryAllActionByRefIdRequest, opts ...grpc.CallOption) (*QueryAllActionByRefIdResponse, error) {
	out := new(QueryAllActionByRefIdResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/ActionByRefIdAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Organization(ctx context.Context, in *QueryGetOrganizationRequest, opts ...grpc.CallOption) (*QueryGetOrganizationResponse, error) {
	out := new(QueryGetOrganizationResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/Organization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrganizationAll(ctx context.Context, in *QueryAllOrganizationRequest, opts ...grpc.CallOption) (*QueryAllOrganizationResponse, error) {
	out := new(QueryAllOrganizationResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/OrganizationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftCollection(ctx context.Context, in *QueryGetNftCollectionRequest, opts ...grpc.CallOption) (*QueryGetNftCollectionResponse, error) {
	out := new(QueryGetNftCollectionResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/NftCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NFTSchemaByContract(ctx context.Context, in *QueryGetNFTSchemaByContractRequest, opts ...grpc.CallOption) (*QueryGetNFTSchemaByContractResponse, error) {
	out := new(QueryGetNFTSchemaByContractResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/NFTSchemaByContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NFTSchemaByContractAll(ctx context.Context, in *QueryAllNFTSchemaByContractRequest, opts ...grpc.CallOption) (*QueryAllNFTSchemaByContractResponse, error) {
	out := new(QueryAllNFTSchemaByContractResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/NFTSchemaByContractAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NFTFeeConfig(ctx context.Context, in *QueryGetNFTFeeConfigRequest, opts ...grpc.CallOption) (*QueryGetNFTFeeConfigResponse, error) {
	out := new(QueryGetNFTFeeConfigResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/NFTFeeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NFTFeeBalance(ctx context.Context, in *QueryGetNFTFeeBalanceRequest, opts ...grpc.CallOption) (*QueryGetNFTFeeBalanceResponse, error) {
	out := new(QueryGetNFTFeeBalanceResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/NFTFeeBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MetadataCreator(ctx context.Context, in *QueryGetMetadataCreatorRequest, opts ...grpc.CallOption) (*QueryGetMetadataCreatorResponse, error) {
	out := new(QueryGetMetadataCreatorResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/MetadataCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MetadataCreatorAll(ctx context.Context, in *QueryAllMetadataCreatorRequest, opts ...grpc.CallOption) (*QueryAllMetadataCreatorResponse, error) {
	out := new(QueryAllMetadataCreatorResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/MetadataCreatorAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionExecutor(ctx context.Context, in *QueryGetActionExecutorRequest, opts ...grpc.CallOption) (*QueryGetActionExecutorResponse, error) {
	out := new(QueryGetActionExecutorResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/ActionExecutor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionExecutorAll(ctx context.Context, in *QueryAllActionExecutorRequest, opts ...grpc.CallOption) (*QueryAllActionExecutorResponse, error) {
	out := new(QueryAllActionExecutorResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/ActionExecutorAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SchemaAttribute(ctx context.Context, in *QueryGetSchemaAttributeRequest, opts ...grpc.CallOption) (*QueryGetSchemaAttributeResponse, error) {
	out := new(QueryGetSchemaAttributeResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/SchemaAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SchemaAttributeAll(ctx context.Context, in *QueryAllSchemaAttributeRequest, opts ...grpc.CallOption) (*QueryAllSchemaAttributeResponse, error) {
	out := new(QueryAllSchemaAttributeResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/SchemaAttributeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListAttributeBySchema(ctx context.Context, in *QueryListAttributeBySchemaRequest, opts ...grpc.CallOption) (*QueryListAttributeBySchemaResponse, error) {
	out := new(QueryListAttributeBySchemaResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/ListAttributeBySchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionOfSchema(ctx context.Context, in *QueryGetActionOfSchemaRequest, opts ...grpc.CallOption) (*QueryGetActionOfSchemaResponse, error) {
	out := new(QueryGetActionOfSchemaResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/ActionOfSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionOfSchemaAll(ctx context.Context, in *QueryAllActionOfSchemaRequest, opts ...grpc.CallOption) (*QueryAllActionOfSchemaResponse, error) {
	out := new(QueryAllActionOfSchemaResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/ActionOfSchemaAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecutorOfSchema(ctx context.Context, in *QueryGetExecutorOfSchemaRequest, opts ...grpc.CallOption) (*QueryGetExecutorOfSchemaResponse, error) {
	out := new(QueryGetExecutorOfSchemaResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/ExecutorOfSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecutorOfSchemaAll(ctx context.Context, in *QueryAllExecutorOfSchemaRequest, opts ...grpc.CallOption) (*QueryAllExecutorOfSchemaResponse, error) {
	out := new(QueryAllExecutorOfSchemaResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/ExecutorOfSchemaAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VirtualAction(ctx context.Context, in *QueryGetVirtualActionRequest, opts ...grpc.CallOption) (*QueryGetVirtualActionResponse, error) {
	out := new(QueryGetVirtualActionResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/VirtualAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VirtualActionAll(ctx context.Context, in *QueryAllVirtualActionRequest, opts ...grpc.CallOption) (*QueryAllVirtualActionResponse, error) {
	out := new(QueryAllVirtualActionResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/VirtualActionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VirtualSchema(ctx context.Context, in *QueryGetVirtualSchemaRequest, opts ...grpc.CallOption) (*QueryGetVirtualSchemaResponse, error) {
	out := new(QueryGetVirtualSchemaResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/VirtualSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VirtualSchemaAll(ctx context.Context, in *QueryAllVirtualSchemaRequest, opts ...grpc.CallOption) (*QueryAllVirtualSchemaResponse, error) {
	out := new(QueryAllVirtualSchemaResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/VirtualSchemaAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DisableVirtualSchemaProposal(ctx context.Context, in *QueryGetDisableVirtualSchemaProposalRequest, opts ...grpc.CallOption) (*QueryGetDisableVirtualSchemaProposalResponse, error) {
	out := new(QueryGetDisableVirtualSchemaProposalResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/DisableVirtualSchemaProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DisableVirtualSchemaProposalAll(ctx context.Context, in *QueryAllDisableVirtualSchemaProposalRequest, opts ...grpc.CallOption) (*QueryAllDisableVirtualSchemaProposalResponse, error) {
	out := new(QueryAllDisableVirtualSchemaProposalResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/DisableVirtualSchemaProposalAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VirtualSchemaProposal(ctx context.Context, in *QueryGetVirtualSchemaProposalRequest, opts ...grpc.CallOption) (*QueryGetVirtualSchemaProposalResponse, error) {
	out := new(QueryGetVirtualSchemaProposalResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/VirtualSchemaProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VirtualSchemaProposalAll(ctx context.Context, in *QueryAllVirtualSchemaProposalRequest, opts ...grpc.CallOption) (*QueryAllVirtualSchemaProposalResponse, error) {
	out := new(QueryAllVirtualSchemaProposalResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/VirtualSchemaProposalAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActiveDislabeVirtualSchemaProposal(ctx context.Context, in *QueryGetActiveDislabeVirtualSchemaProposalRequest, opts ...grpc.CallOption) (*QueryGetActiveDislabeVirtualSchemaProposalResponse, error) {
	out := new(QueryGetActiveDislabeVirtualSchemaProposalResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/ActiveDislabeVirtualSchemaProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActiveDislabeVirtualSchemaProposalAll(ctx context.Context, in *QueryAllActiveDislabeVirtualSchemaProposalRequest, opts ...grpc.CallOption) (*QueryAllActiveDislabeVirtualSchemaProposalResponse, error) {
	out := new(QueryAllActiveDislabeVirtualSchemaProposalResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixprotocol.nftmngr.Query/ActiveDislabeVirtualSchemaProposalAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a NFTSchema by index.
	NFTSchema(context.Context, *QueryGetNFTSchemaRequest) (*QueryGetNFTSchemaResponse, error)
	// Queries a list of NFTSchema items.
	NFTSchemaAll(context.Context, *QueryAllNFTSchemaRequest) (*QueryAllNFTSchemaResponse, error)
	// Queries a NftData by index.
	NftData(context.Context, *QueryGetNftDataRequest) (*QueryGetNftDataResponse, error)
	// Queries a list of NftData items.
	NftDataAll(context.Context, *QueryAllNftDataRequest) (*QueryAllNftDataResponse, error)
	// Queries a ActionByRefId by index.
	ActionByRefId(context.Context, *QueryGetActionByRefIdRequest) (*QueryGetActionByRefIdResponse, error)
	// Queries a list of ActionByRefId items.
	ActionByRefIdAll(context.Context, *QueryAllActionByRefIdRequest) (*QueryAllActionByRefIdResponse, error)
	// Queries a Organization by index.
	Organization(context.Context, *QueryGetOrganizationRequest) (*QueryGetOrganizationResponse, error)
	// Queries a list of Organization items.
	OrganizationAll(context.Context, *QueryAllOrganizationRequest) (*QueryAllOrganizationResponse, error)
	// Queries a NftCollection by index.
	NftCollection(context.Context, *QueryGetNftCollectionRequest) (*QueryGetNftCollectionResponse, error)
	// Queries a NFTSchemaByContract by index.
	NFTSchemaByContract(context.Context, *QueryGetNFTSchemaByContractRequest) (*QueryGetNFTSchemaByContractResponse, error)
	// Queries a list of NFTSchemaByContract items.
	NFTSchemaByContractAll(context.Context, *QueryAllNFTSchemaByContractRequest) (*QueryAllNFTSchemaByContractResponse, error)
	// Queries a NFTFeeConfig by index.
	NFTFeeConfig(context.Context, *QueryGetNFTFeeConfigRequest) (*QueryGetNFTFeeConfigResponse, error)
	// Queries a NFTFeeBalance by index.
	NFTFeeBalance(context.Context, *QueryGetNFTFeeBalanceRequest) (*QueryGetNFTFeeBalanceResponse, error)
	// Queries a MetadataCreator by index.
	MetadataCreator(context.Context, *QueryGetMetadataCreatorRequest) (*QueryGetMetadataCreatorResponse, error)
	// Queries a list of MetadataCreator items.
	MetadataCreatorAll(context.Context, *QueryAllMetadataCreatorRequest) (*QueryAllMetadataCreatorResponse, error)
	// Queries a ActionExecutor by index.
	ActionExecutor(context.Context, *QueryGetActionExecutorRequest) (*QueryGetActionExecutorResponse, error)
	// Queries a list of ActionExecutor items.
	ActionExecutorAll(context.Context, *QueryAllActionExecutorRequest) (*QueryAllActionExecutorResponse, error)
	// Queries a SchemaAttribute by index.
	SchemaAttribute(context.Context, *QueryGetSchemaAttributeRequest) (*QueryGetSchemaAttributeResponse, error)
	// Queries a list of SchemaAttribute items.
	SchemaAttributeAll(context.Context, *QueryAllSchemaAttributeRequest) (*QueryAllSchemaAttributeResponse, error)
	// Queries a list of ListAttributeBySchema items.
	ListAttributeBySchema(context.Context, *QueryListAttributeBySchemaRequest) (*QueryListAttributeBySchemaResponse, error)
	// Queries a ActionOfSchema by index.
	ActionOfSchema(context.Context, *QueryGetActionOfSchemaRequest) (*QueryGetActionOfSchemaResponse, error)
	// Queries a list of ActionOfSchema items.
	ActionOfSchemaAll(context.Context, *QueryAllActionOfSchemaRequest) (*QueryAllActionOfSchemaResponse, error)
	// Queries a ExecutorOfSchema by index.
	ExecutorOfSchema(context.Context, *QueryGetExecutorOfSchemaRequest) (*QueryGetExecutorOfSchemaResponse, error)
	// Queries a list of ExecutorOfSchema items.
	ExecutorOfSchemaAll(context.Context, *QueryAllExecutorOfSchemaRequest) (*QueryAllExecutorOfSchemaResponse, error)
	// Queries a Virtual by index
	VirtualAction(context.Context, *QueryGetVirtualActionRequest) (*QueryGetVirtualActionResponse, error)
	// Queries a list of Virtual items.
	VirtualActionAll(context.Context, *QueryAllVirtualActionRequest) (*QueryAllVirtualActionResponse, error)
	// Queries a VirtualSchema by index.
	VirtualSchema(context.Context, *QueryGetVirtualSchemaRequest) (*QueryGetVirtualSchemaResponse, error)
	// Queries a list of VirtualSchema items.
	VirtualSchemaAll(context.Context, *QueryAllVirtualSchemaRequest) (*QueryAllVirtualSchemaResponse, error)
	// Queries a DisableVirtualSchema by index.
	DisableVirtualSchemaProposal(context.Context, *QueryGetDisableVirtualSchemaProposalRequest) (*QueryGetDisableVirtualSchemaProposalResponse, error)
	// Queries a list of DisableVirtualSchema items.
	DisableVirtualSchemaProposalAll(context.Context, *QueryAllDisableVirtualSchemaProposalRequest) (*QueryAllDisableVirtualSchemaProposalResponse, error)
	// Queries a VirtualSchemaProposal by index.
	VirtualSchemaProposal(context.Context, *QueryGetVirtualSchemaProposalRequest) (*QueryGetVirtualSchemaProposalResponse, error)
	// Queries a list of VirtualSchemaProposal items.
	VirtualSchemaProposalAll(context.Context, *QueryAllVirtualSchemaProposalRequest) (*QueryAllVirtualSchemaProposalResponse, error)
	// Queries a ActiveDislabeVirtualSchemaProposal by index.
	ActiveDislabeVirtualSchemaProposal(context.Context, *QueryGetActiveDislabeVirtualSchemaProposalRequest) (*QueryGetActiveDislabeVirtualSchemaProposalResponse, error)
	// Queries a list of ActiveDislabeVirtualSchemaProposal items.
	ActiveDislabeVirtualSchemaProposalAll(context.Context, *QueryAllActiveDislabeVirtualSchemaProposalRequest) (*QueryAllActiveDislabeVirtualSchemaProposalResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) NFTSchema(ctx context.Context, req *QueryGetNFTSchemaRequest) (*QueryGetNFTSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NFTSchema not implemented")
}
func (*UnimplementedQueryServer) NFTSchemaAll(ctx context.Context, req *QueryAllNFTSchemaRequest) (*QueryAllNFTSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NFTSchemaAll not implemented")
}
func (*UnimplementedQueryServer) NftData(ctx context.Context, req *QueryGetNftDataRequest) (*QueryGetNftDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftData not implemented")
}
func (*UnimplementedQueryServer) NftDataAll(ctx context.Context, req *QueryAllNftDataRequest) (*QueryAllNftDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftDataAll not implemented")
}
func (*UnimplementedQueryServer) ActionByRefId(ctx context.Context, req *QueryGetActionByRefIdRequest) (*QueryGetActionByRefIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionByRefId not implemented")
}
func (*UnimplementedQueryServer) ActionByRefIdAll(ctx context.Context, req *QueryAllActionByRefIdRequest) (*QueryAllActionByRefIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionByRefIdAll not implemented")
}
func (*UnimplementedQueryServer) Organization(ctx context.Context, req *QueryGetOrganizationRequest) (*QueryGetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Organization not implemented")
}
func (*UnimplementedQueryServer) OrganizationAll(ctx context.Context, req *QueryAllOrganizationRequest) (*QueryAllOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrganizationAll not implemented")
}
func (*UnimplementedQueryServer) NftCollection(ctx context.Context, req *QueryGetNftCollectionRequest) (*QueryGetNftCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftCollection not implemented")
}
func (*UnimplementedQueryServer) NFTSchemaByContract(ctx context.Context, req *QueryGetNFTSchemaByContractRequest) (*QueryGetNFTSchemaByContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NFTSchemaByContract not implemented")
}
func (*UnimplementedQueryServer) NFTSchemaByContractAll(ctx context.Context, req *QueryAllNFTSchemaByContractRequest) (*QueryAllNFTSchemaByContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NFTSchemaByContractAll not implemented")
}
func (*UnimplementedQueryServer) NFTFeeConfig(ctx context.Context, req *QueryGetNFTFeeConfigRequest) (*QueryGetNFTFeeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NFTFeeConfig not implemented")
}
func (*UnimplementedQueryServer) NFTFeeBalance(ctx context.Context, req *QueryGetNFTFeeBalanceRequest) (*QueryGetNFTFeeBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NFTFeeBalance not implemented")
}
func (*UnimplementedQueryServer) MetadataCreator(ctx context.Context, req *QueryGetMetadataCreatorRequest) (*QueryGetMetadataCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetadataCreator not implemented")
}
func (*UnimplementedQueryServer) MetadataCreatorAll(ctx context.Context, req *QueryAllMetadataCreatorRequest) (*QueryAllMetadataCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetadataCreatorAll not implemented")
}
func (*UnimplementedQueryServer) ActionExecutor(ctx context.Context, req *QueryGetActionExecutorRequest) (*QueryGetActionExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionExecutor not implemented")
}
func (*UnimplementedQueryServer) ActionExecutorAll(ctx context.Context, req *QueryAllActionExecutorRequest) (*QueryAllActionExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionExecutorAll not implemented")
}
func (*UnimplementedQueryServer) SchemaAttribute(ctx context.Context, req *QueryGetSchemaAttributeRequest) (*QueryGetSchemaAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchemaAttribute not implemented")
}
func (*UnimplementedQueryServer) SchemaAttributeAll(ctx context.Context, req *QueryAllSchemaAttributeRequest) (*QueryAllSchemaAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchemaAttributeAll not implemented")
}
func (*UnimplementedQueryServer) ListAttributeBySchema(ctx context.Context, req *QueryListAttributeBySchemaRequest) (*QueryListAttributeBySchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttributeBySchema not implemented")
}
func (*UnimplementedQueryServer) ActionOfSchema(ctx context.Context, req *QueryGetActionOfSchemaRequest) (*QueryGetActionOfSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionOfSchema not implemented")
}
func (*UnimplementedQueryServer) ActionOfSchemaAll(ctx context.Context, req *QueryAllActionOfSchemaRequest) (*QueryAllActionOfSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionOfSchemaAll not implemented")
}
func (*UnimplementedQueryServer) ExecutorOfSchema(ctx context.Context, req *QueryGetExecutorOfSchemaRequest) (*QueryGetExecutorOfSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutorOfSchema not implemented")
}
func (*UnimplementedQueryServer) ExecutorOfSchemaAll(ctx context.Context, req *QueryAllExecutorOfSchemaRequest) (*QueryAllExecutorOfSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutorOfSchemaAll not implemented")
}
func (*UnimplementedQueryServer) VirtualAction(ctx context.Context, req *QueryGetVirtualActionRequest) (*QueryGetVirtualActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualAction not implemented")
}
func (*UnimplementedQueryServer) VirtualActionAll(ctx context.Context, req *QueryAllVirtualActionRequest) (*QueryAllVirtualActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualActionAll not implemented")
}
func (*UnimplementedQueryServer) VirtualSchema(ctx context.Context, req *QueryGetVirtualSchemaRequest) (*QueryGetVirtualSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualSchema not implemented")
}
func (*UnimplementedQueryServer) VirtualSchemaAll(ctx context.Context, req *QueryAllVirtualSchemaRequest) (*QueryAllVirtualSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualSchemaAll not implemented")
}
func (*UnimplementedQueryServer) DisableVirtualSchemaProposal(ctx context.Context, req *QueryGetDisableVirtualSchemaProposalRequest) (*QueryGetDisableVirtualSchemaProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableVirtualSchemaProposal not implemented")
}
func (*UnimplementedQueryServer) DisableVirtualSchemaProposalAll(ctx context.Context, req *QueryAllDisableVirtualSchemaProposalRequest) (*QueryAllDisableVirtualSchemaProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableVirtualSchemaProposalAll not implemented")
}
func (*UnimplementedQueryServer) VirtualSchemaProposal(ctx context.Context, req *QueryGetVirtualSchemaProposalRequest) (*QueryGetVirtualSchemaProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualSchemaProposal not implemented")
}
func (*UnimplementedQueryServer) VirtualSchemaProposalAll(ctx context.Context, req *QueryAllVirtualSchemaProposalRequest) (*QueryAllVirtualSchemaProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualSchemaProposalAll not implemented")
}
func (*UnimplementedQueryServer) ActiveDislabeVirtualSchemaProposal(ctx context.Context, req *QueryGetActiveDislabeVirtualSchemaProposalRequest) (*QueryGetActiveDislabeVirtualSchemaProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveDislabeVirtualSchemaProposal not implemented")
}
func (*UnimplementedQueryServer) ActiveDislabeVirtualSchemaProposalAll(ctx context.Context, req *QueryAllActiveDislabeVirtualSchemaProposalRequest) (*QueryAllActiveDislabeVirtualSchemaProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveDislabeVirtualSchemaProposalAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NFTSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNFTSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NFTSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/NFTSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NFTSchema(ctx, req.(*QueryGetNFTSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NFTSchemaAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNFTSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NFTSchemaAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/NFTSchemaAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NFTSchemaAll(ctx, req.(*QueryAllNFTSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/NftData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftData(ctx, req.(*QueryGetNftDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftDataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNftDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftDataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/NftDataAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftDataAll(ctx, req.(*QueryAllNftDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionByRefId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetActionByRefIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionByRefId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/ActionByRefId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionByRefId(ctx, req.(*QueryGetActionByRefIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionByRefIdAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllActionByRefIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionByRefIdAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/ActionByRefIdAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionByRefIdAll(ctx, req.(*QueryAllActionByRefIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Organization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Organization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/Organization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Organization(ctx, req.(*QueryGetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrganizationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrganizationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/OrganizationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrganizationAll(ctx, req.(*QueryAllOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/NftCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftCollection(ctx, req.(*QueryGetNftCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NFTSchemaByContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNFTSchemaByContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NFTSchemaByContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/NFTSchemaByContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NFTSchemaByContract(ctx, req.(*QueryGetNFTSchemaByContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NFTSchemaByContractAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNFTSchemaByContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NFTSchemaByContractAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/NFTSchemaByContractAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NFTSchemaByContractAll(ctx, req.(*QueryAllNFTSchemaByContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NFTFeeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNFTFeeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NFTFeeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/NFTFeeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NFTFeeConfig(ctx, req.(*QueryGetNFTFeeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NFTFeeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNFTFeeBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NFTFeeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/NFTFeeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NFTFeeBalance(ctx, req.(*QueryGetNFTFeeBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MetadataCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMetadataCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MetadataCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/MetadataCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MetadataCreator(ctx, req.(*QueryGetMetadataCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MetadataCreatorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMetadataCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MetadataCreatorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/MetadataCreatorAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MetadataCreatorAll(ctx, req.(*QueryAllMetadataCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetActionExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/ActionExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionExecutor(ctx, req.(*QueryGetActionExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionExecutorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllActionExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionExecutorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/ActionExecutorAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionExecutorAll(ctx, req.(*QueryAllActionExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SchemaAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSchemaAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SchemaAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/SchemaAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SchemaAttribute(ctx, req.(*QueryGetSchemaAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SchemaAttributeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSchemaAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SchemaAttributeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/SchemaAttributeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SchemaAttributeAll(ctx, req.(*QueryAllSchemaAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListAttributeBySchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListAttributeBySchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListAttributeBySchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/ListAttributeBySchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListAttributeBySchema(ctx, req.(*QueryListAttributeBySchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionOfSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetActionOfSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionOfSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/ActionOfSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionOfSchema(ctx, req.(*QueryGetActionOfSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionOfSchemaAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllActionOfSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionOfSchemaAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/ActionOfSchemaAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionOfSchemaAll(ctx, req.(*QueryAllActionOfSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecutorOfSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExecutorOfSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExecutorOfSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/ExecutorOfSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExecutorOfSchema(ctx, req.(*QueryGetExecutorOfSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecutorOfSchemaAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExecutorOfSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExecutorOfSchemaAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/ExecutorOfSchemaAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExecutorOfSchemaAll(ctx, req.(*QueryAllExecutorOfSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VirtualAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVirtualActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VirtualAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/VirtualAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VirtualAction(ctx, req.(*QueryGetVirtualActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VirtualActionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVirtualActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VirtualActionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/VirtualActionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VirtualActionAll(ctx, req.(*QueryAllVirtualActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VirtualSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVirtualSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VirtualSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/VirtualSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VirtualSchema(ctx, req.(*QueryGetVirtualSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VirtualSchemaAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVirtualSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VirtualSchemaAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/VirtualSchemaAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VirtualSchemaAll(ctx, req.(*QueryAllVirtualSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DisableVirtualSchemaProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDisableVirtualSchemaProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DisableVirtualSchemaProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/DisableVirtualSchemaProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DisableVirtualSchemaProposal(ctx, req.(*QueryGetDisableVirtualSchemaProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DisableVirtualSchemaProposalAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDisableVirtualSchemaProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DisableVirtualSchemaProposalAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/DisableVirtualSchemaProposalAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DisableVirtualSchemaProposalAll(ctx, req.(*QueryAllDisableVirtualSchemaProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VirtualSchemaProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVirtualSchemaProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VirtualSchemaProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/VirtualSchemaProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VirtualSchemaProposal(ctx, req.(*QueryGetVirtualSchemaProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VirtualSchemaProposalAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVirtualSchemaProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VirtualSchemaProposalAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/VirtualSchemaProposalAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VirtualSchemaProposalAll(ctx, req.(*QueryAllVirtualSchemaProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActiveDislabeVirtualSchemaProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetActiveDislabeVirtualSchemaProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActiveDislabeVirtualSchemaProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/ActiveDislabeVirtualSchemaProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActiveDislabeVirtualSchemaProposal(ctx, req.(*QueryGetActiveDislabeVirtualSchemaProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActiveDislabeVirtualSchemaProposalAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllActiveDislabeVirtualSchemaProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActiveDislabeVirtualSchemaProposalAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixprotocol.nftmngr.Query/ActiveDislabeVirtualSchemaProposalAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActiveDislabeVirtualSchemaProposalAll(ctx, req.(*QueryAllActiveDislabeVirtualSchemaProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thesixnetwork.sixprotocol.nftmngr.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "NFTSchema",
			Handler:    _Query_NFTSchema_Handler,
		},
		{
			MethodName: "NFTSchemaAll",
			Handler:    _Query_NFTSchemaAll_Handler,
		},
		{
			MethodName: "NftData",
			Handler:    _Query_NftData_Handler,
		},
		{
			MethodName: "NftDataAll",
			Handler:    _Query_NftDataAll_Handler,
		},
		{
			MethodName: "ActionByRefId",
			Handler:    _Query_ActionByRefId_Handler,
		},
		{
			MethodName: "ActionByRefIdAll",
			Handler:    _Query_ActionByRefIdAll_Handler,
		},
		{
			MethodName: "Organization",
			Handler:    _Query_Organization_Handler,
		},
		{
			MethodName: "OrganizationAll",
			Handler:    _Query_OrganizationAll_Handler,
		},
		{
			MethodName: "NftCollection",
			Handler:    _Query_NftCollection_Handler,
		},
		{
			MethodName: "NFTSchemaByContract",
			Handler:    _Query_NFTSchemaByContract_Handler,
		},
		{
			MethodName: "NFTSchemaByContractAll",
			Handler:    _Query_NFTSchemaByContractAll_Handler,
		},
		{
			MethodName: "NFTFeeConfig",
			Handler:    _Query_NFTFeeConfig_Handler,
		},
		{
			MethodName: "NFTFeeBalance",
			Handler:    _Query_NFTFeeBalance_Handler,
		},
		{
			MethodName: "MetadataCreator",
			Handler:    _Query_MetadataCreator_Handler,
		},
		{
			MethodName: "MetadataCreatorAll",
			Handler:    _Query_MetadataCreatorAll_Handler,
		},
		{
			MethodName: "ActionExecutor",
			Handler:    _Query_ActionExecutor_Handler,
		},
		{
			MethodName: "ActionExecutorAll",
			Handler:    _Query_ActionExecutorAll_Handler,
		},
		{
			MethodName: "SchemaAttribute",
			Handler:    _Query_SchemaAttribute_Handler,
		},
		{
			MethodName: "SchemaAttributeAll",
			Handler:    _Query_SchemaAttributeAll_Handler,
		},
		{
			MethodName: "ListAttributeBySchema",
			Handler:    _Query_ListAttributeBySchema_Handler,
		},
		{
			MethodName: "ActionOfSchema",
			Handler:    _Query_ActionOfSchema_Handler,
		},
		{
			MethodName: "ActionOfSchemaAll",
			Handler:    _Query_ActionOfSchemaAll_Handler,
		},
		{
			MethodName: "ExecutorOfSchema",
			Handler:    _Query_ExecutorOfSchema_Handler,
		},
		{
			MethodName: "ExecutorOfSchemaAll",
			Handler:    _Query_ExecutorOfSchemaAll_Handler,
		},
		{
			MethodName: "VirtualAction",
			Handler:    _Query_VirtualAction_Handler,
		},
		{
			MethodName: "VirtualActionAll",
			Handler:    _Query_VirtualActionAll_Handler,
		},
		{
			MethodName: "VirtualSchema",
			Handler:    _Query_VirtualSchema_Handler,
		},
		{
			MethodName: "VirtualSchemaAll",
			Handler:    _Query_VirtualSchemaAll_Handler,
		},
		{
			MethodName: "DisableVirtualSchemaProposal",
			Handler:    _Query_DisableVirtualSchemaProposal_Handler,
		},
		{
			MethodName: "DisableVirtualSchemaProposalAll",
			Handler:    _Query_DisableVirtualSchemaProposalAll_Handler,
		},
		{
			MethodName: "VirtualSchemaProposal",
			Handler:    _Query_VirtualSchemaProposal_Handler,
		},
		{
			MethodName: "VirtualSchemaProposalAll",
			Handler:    _Query_VirtualSchemaProposalAll_Handler,
		},
		{
			MethodName: "ActiveDislabeVirtualSchemaProposal",
			Handler:    _Query_ActiveDislabeVirtualSchemaProposal_Handler,
		},
		{
			MethodName: "ActiveDislabeVirtualSchemaProposalAll",
			Handler:    _Query_ActiveDislabeVirtualSchemaProposalAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nftmngr/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetNFTSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNFTSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNFTSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNFTSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNFTSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNFTSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NFTSchema.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllNFTSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNFTSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNFTSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNFTSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNFTSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNFTSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NFTSchema) > 0 {
		for iNdEx := len(m.NFTSchema) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NFTSchema[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithGlobal {
		i--
		if m.WithGlobal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NftData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllNftDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNftDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNftDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.WithGlobal {
		i--
		if m.WithGlobal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNftDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNftDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNftDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftData) > 0 {
		for iNdEx := len(m.NftData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NftData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActionByRefIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActionByRefIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActionByRefIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RefId) > 0 {
		i -= len(m.RefId)
		copy(dAtA[i:], m.RefId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RefId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActionByRefIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActionByRefIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActionByRefIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ActionByRefId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllActionByRefIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActionByRefIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActionByRefIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllActionByRefIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActionByRefIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActionByRefIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActionByRefId) > 0 {
		for iNdEx := len(m.ActionByRefId) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActionByRefId[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrganizationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrganizationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrganizationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrganizationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrganizationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrganizationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Organization.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllOrganizationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrganizationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrganizationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOrganizationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrganizationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrganizationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Organization) > 0 {
		for iNdEx := len(m.Organization) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Organization[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftCollectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftCollectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftCollectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftCollection) > 0 {
		for iNdEx := len(m.NftCollection) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NftCollection[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNFTSchemaByContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNFTSchemaByContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNFTSchemaByContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OriginContractAddress) > 0 {
		i -= len(m.OriginContractAddress)
		copy(dAtA[i:], m.OriginContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OriginContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNFTSchemaByContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNFTSchemaByContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNFTSchemaByContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NFTSchemaByContract.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllNFTSchemaByContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNFTSchemaByContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNFTSchemaByContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNFTSchemaByContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNFTSchemaByContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNFTSchemaByContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NFTSchemaByContract) > 0 {
		for iNdEx := len(m.NFTSchemaByContract) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NFTSchemaByContract[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNFTFeeConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNFTFeeConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNFTFeeConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetNFTFeeConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNFTFeeConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNFTFeeConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NFTFeeConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetNFTFeeBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNFTFeeBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNFTFeeBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetNFTFeeBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNFTFeeBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNFTFeeBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NFTFeeBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetMetadataCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMetadataCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMetadataCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMetadataCreatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMetadataCreatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMetadataCreatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MetadataCreator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMetadataCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMetadataCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMetadataCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMetadataCreatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMetadataCreatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMetadataCreatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MetadataCreator) > 0 {
		for iNdEx := len(m.MetadataCreator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MetadataCreator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActionExecutorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActionExecutorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActionExecutorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecutorAddress) > 0 {
		i -= len(m.ExecutorAddress)
		copy(dAtA[i:], m.ExecutorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExecutorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActionExecutorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActionExecutorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActionExecutorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ActionExecutor.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllActionExecutorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActionExecutorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActionExecutorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllActionExecutorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActionExecutorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActionExecutorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActionExecutor) > 0 {
		for iNdEx := len(m.ActionExecutor) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActionExecutor[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSchemaAttributeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSchemaAttributeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSchemaAttributeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSchemaAttributeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSchemaAttributeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSchemaAttributeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SchemaAttribute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSchemaAttributeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSchemaAttributeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSchemaAttributeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSchemaAttributeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSchemaAttributeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSchemaAttributeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SchemaAttribute) > 0 {
		for iNdEx := len(m.SchemaAttribute) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SchemaAttribute[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListAttributeBySchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListAttributeBySchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListAttributeBySchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListAttributeBySchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListAttributeBySchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListAttributeBySchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaAttribute) > 0 {
		for iNdEx := len(m.SchemaAttribute) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SchemaAttribute[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActionOfSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActionOfSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActionOfSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActionOfSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActionOfSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActionOfSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ActionOfSchema.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllActionOfSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActionOfSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActionOfSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllActionOfSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActionOfSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActionOfSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActionOfSchema) > 0 {
		for iNdEx := len(m.ActionOfSchema) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActionOfSchema[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExecutorOfSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExecutorOfSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExecutorOfSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExecutorOfSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExecutorOfSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExecutorOfSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExecutorOfSchema.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllExecutorOfSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExecutorOfSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExecutorOfSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExecutorOfSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExecutorOfSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExecutorOfSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExecutorOfSchema) > 0 {
		for iNdEx := len(m.ExecutorOfSchema) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExecutorOfSchema[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVirtualActionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVirtualActionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVirtualActionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVirtualActionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVirtualActionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVirtualActionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VirtualAction.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVirtualActionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVirtualActionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVirtualActionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVirtualActionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVirtualActionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVirtualActionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VirtualAction) > 0 {
		for iNdEx := len(m.VirtualAction) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VirtualAction[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVirtualSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVirtualSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVirtualSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVirtualSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVirtualSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVirtualSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VirtualSchema.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVirtualSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVirtualSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVirtualSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVirtualSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVirtualSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVirtualSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VirtualSchema) > 0 {
		for iNdEx := len(m.VirtualSchema) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VirtualSchema[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDisableVirtualSchemaProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDisableVirtualSchemaProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDisableVirtualSchemaProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDisableVirtualSchemaProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDisableVirtualSchemaProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDisableVirtualSchemaProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DisableVirtualSchemaProposal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDisableVirtualSchemaProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDisableVirtualSchemaProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDisableVirtualSchemaProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDisableVirtualSchemaProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDisableVirtualSchemaProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDisableVirtualSchemaProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DisableVirtualSchemaProposal) > 0 {
		for iNdEx := len(m.DisableVirtualSchemaProposal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DisableVirtualSchemaProposal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVirtualSchemaProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVirtualSchemaProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVirtualSchemaProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVirtualSchemaProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVirtualSchemaProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVirtualSchemaProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VirtualSchemaProposal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVirtualSchemaProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVirtualSchemaProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVirtualSchemaProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVirtualSchemaProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVirtualSchemaProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVirtualSchemaProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VirtualSchemaProposal) > 0 {
		for iNdEx := len(m.VirtualSchemaProposal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VirtualSchemaProposal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActiveVirtualSchemaProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActiveVirtualSchemaProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActiveVirtualSchemaProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActiveVirtualSchemaProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActiveVirtualSchemaProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActiveVirtualSchemaProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ActiveVirtualSchemaProposal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllActiveVirtualSchemaProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActiveVirtualSchemaProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActiveVirtualSchemaProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllActiveVirtualSchemaProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActiveVirtualSchemaProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActiveVirtualSchemaProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActiveVirtualSchemaProposal) > 0 {
		for iNdEx := len(m.ActiveVirtualSchemaProposal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActiveVirtualSchemaProposal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInactiveVirtualSchemaProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInactiveVirtualSchemaProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInactiveVirtualSchemaProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInactiveVirtualSchemaProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInactiveVirtualSchemaProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInactiveVirtualSchemaProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InactiveVirtualSchemaProposal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllInactiveVirtualSchemaProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInactiveVirtualSchemaProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInactiveVirtualSchemaProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInactiveVirtualSchemaProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInactiveVirtualSchemaProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInactiveVirtualSchemaProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InactiveVirtualSchemaProposal) > 0 {
		for iNdEx := len(m.InactiveVirtualSchemaProposal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InactiveVirtualSchemaProposal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActiveDislabeVirtualSchemaProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActiveDislabeVirtualSchemaProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActiveDislabeVirtualSchemaProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActiveDislabeVirtualSchemaProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActiveDislabeVirtualSchemaProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActiveDislabeVirtualSchemaProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ActiveDislabeVirtualSchemaProposal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllActiveDislabeVirtualSchemaProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActiveDislabeVirtualSchemaProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActiveDislabeVirtualSchemaProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllActiveDislabeVirtualSchemaProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActiveDislabeVirtualSchemaProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActiveDislabeVirtualSchemaProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActiveDislabeVirtualSchemaProposal) > 0 {
		for iNdEx := len(m.ActiveDislabeVirtualSchemaProposal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActiveDislabeVirtualSchemaProposal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetNFTSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNFTSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NFTSchema.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllNFTSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNFTSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NFTSchema) > 0 {
		for _, e := range m.NFTSchema {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.WithGlobal {
		n += 2
	}
	return n
}

func (m *QueryGetNftDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NftData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllNftDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WithGlobal {
		n += 2
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNftDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NftData) > 0 {
		for _, e := range m.NftData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetActionByRefIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RefId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetActionByRefIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ActionByRefId.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllActionByRefIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllActionByRefIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActionByRefId) > 0 {
		for _, e := range m.ActionByRefId {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrganizationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrganizationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Organization.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllOrganizationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOrganizationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Organization) > 0 {
		for _, e := range m.Organization {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftCollectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NftCollection) > 0 {
		for _, e := range m.NftCollection {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNFTSchemaByContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OriginContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNFTSchemaByContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NFTSchemaByContract.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllNFTSchemaByContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNFTSchemaByContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NFTSchemaByContract) > 0 {
		for _, e := range m.NFTSchemaByContract {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNFTFeeConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetNFTFeeConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NFTFeeConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetNFTFeeBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetNFTFeeBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NFTFeeBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetMetadataCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMetadataCreatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MetadataCreator.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMetadataCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMetadataCreatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MetadataCreator) > 0 {
		for _, e := range m.MetadataCreator {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetActionExecutorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ExecutorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetActionExecutorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ActionExecutor.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllActionExecutorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllActionExecutorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActionExecutor) > 0 {
		for _, e := range m.ActionExecutor {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSchemaAttributeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSchemaAttributeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SchemaAttribute.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSchemaAttributeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSchemaAttributeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SchemaAttribute) > 0 {
		for _, e := range m.SchemaAttribute {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListAttributeBySchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListAttributeBySchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SchemaAttribute) > 0 {
		for _, e := range m.SchemaAttribute {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetActionOfSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetActionOfSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ActionOfSchema.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllActionOfSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllActionOfSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActionOfSchema) > 0 {
		for _, e := range m.ActionOfSchema {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExecutorOfSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExecutorOfSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExecutorOfSchema.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllExecutorOfSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExecutorOfSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExecutorOfSchema) > 0 {
		for _, e := range m.ExecutorOfSchema {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVirtualActionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVirtualActionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VirtualAction.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllVirtualActionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVirtualActionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VirtualAction) > 0 {
		for _, e := range m.VirtualAction {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVirtualSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVirtualSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VirtualSchema.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllVirtualSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVirtualSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VirtualSchema) > 0 {
		for _, e := range m.VirtualSchema {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDisableVirtualSchemaProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDisableVirtualSchemaProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DisableVirtualSchemaProposal.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDisableVirtualSchemaProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDisableVirtualSchemaProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DisableVirtualSchemaProposal) > 0 {
		for _, e := range m.DisableVirtualSchemaProposal {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVirtualSchemaProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVirtualSchemaProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VirtualSchemaProposal.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllVirtualSchemaProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVirtualSchemaProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VirtualSchemaProposal) > 0 {
		for _, e := range m.VirtualSchemaProposal {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetActiveVirtualSchemaProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetActiveVirtualSchemaProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ActiveVirtualSchemaProposal.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllActiveVirtualSchemaProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllActiveVirtualSchemaProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActiveVirtualSchemaProposal) > 0 {
		for _, e := range m.ActiveVirtualSchemaProposal {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInactiveVirtualSchemaProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInactiveVirtualSchemaProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InactiveVirtualSchemaProposal.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllInactiveVirtualSchemaProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInactiveVirtualSchemaProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InactiveVirtualSchemaProposal) > 0 {
		for _, e := range m.InactiveVirtualSchemaProposal {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetActiveDislabeVirtualSchemaProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetActiveDislabeVirtualSchemaProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ActiveDislabeVirtualSchemaProposal.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllActiveDislabeVirtualSchemaProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllActiveDislabeVirtualSchemaProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActiveDislabeVirtualSchemaProposal) > 0 {
		for _, e := range m.ActiveDislabeVirtualSchemaProposal {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNFTSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNFTSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNFTSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNFTSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNFTSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNFTSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFTSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NFTSchema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNFTSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNFTSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNFTSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNFTSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNFTSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNFTSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFTSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NFTSchema = append(m.NFTSchema, NFTSchema{})
			if err := m.NFTSchema[len(m.NFTSchema)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithGlobal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithGlobal = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNftDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNftDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNftDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithGlobal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithGlobal = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNftDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNftDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNftDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftData = append(m.NftData, NftData{})
			if err := m.NftData[len(m.NftData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActionByRefIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActionByRefIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActionByRefIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActionByRefIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActionByRefIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActionByRefIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionByRefId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActionByRefId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActionByRefIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActionByRefIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActionByRefIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActionByRefIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActionByRefIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActionByRefIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionByRefId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionByRefId = append(m.ActionByRefId, ActionByRefId{})
			if err := m.ActionByRefId[len(m.ActionByRefId)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrganizationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrganizationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrganizationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrganizationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrganizationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrganizationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrganizationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrganizationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrganizationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrganizationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrganizationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrganizationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = append(m.Organization, Organization{})
			if err := m.Organization[len(m.Organization)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftCollectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftCollectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftCollectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftCollection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftCollection = append(m.NftCollection, &NftData{})
			if err := m.NftCollection[len(m.NftCollection)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNFTSchemaByContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNFTSchemaByContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNFTSchemaByContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNFTSchemaByContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNFTSchemaByContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNFTSchemaByContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFTSchemaByContract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NFTSchemaByContract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNFTSchemaByContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNFTSchemaByContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNFTSchemaByContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNFTSchemaByContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNFTSchemaByContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNFTSchemaByContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFTSchemaByContract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NFTSchemaByContract = append(m.NFTSchemaByContract, NFTSchemaByContract{})
			if err := m.NFTSchemaByContract[len(m.NFTSchemaByContract)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNFTFeeConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNFTFeeConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNFTFeeConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNFTFeeConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNFTFeeConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNFTFeeConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFTFeeConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NFTFeeConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNFTFeeBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNFTFeeBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNFTFeeBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNFTFeeBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNFTFeeBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNFTFeeBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFTFeeBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NFTFeeBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMetadataCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMetadataCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMetadataCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMetadataCreatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMetadataCreatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMetadataCreatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataCreator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MetadataCreator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMetadataCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMetadataCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMetadataCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMetadataCreatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMetadataCreatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMetadataCreatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataCreator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataCreator = append(m.MetadataCreator, MetadataCreator{})
			if err := m.MetadataCreator[len(m.MetadataCreator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActionExecutorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActionExecutorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActionExecutorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActionExecutorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActionExecutorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActionExecutorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionExecutor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActionExecutor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActionExecutorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActionExecutorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActionExecutorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActionExecutorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActionExecutorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActionExecutorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionExecutor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionExecutor = append(m.ActionExecutor, ActionExecutor{})
			if err := m.ActionExecutor[len(m.ActionExecutor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSchemaAttributeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSchemaAttributeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSchemaAttributeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSchemaAttributeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSchemaAttributeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSchemaAttributeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SchemaAttribute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSchemaAttributeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSchemaAttributeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSchemaAttributeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSchemaAttributeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSchemaAttributeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSchemaAttributeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaAttribute = append(m.SchemaAttribute, SchemaAttribute{})
			if err := m.SchemaAttribute[len(m.SchemaAttribute)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListAttributeBySchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListAttributeBySchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListAttributeBySchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListAttributeBySchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListAttributeBySchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListAttributeBySchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaAttribute = append(m.SchemaAttribute, SchemaAttribute{})
			if err := m.SchemaAttribute[len(m.SchemaAttribute)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActionOfSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActionOfSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActionOfSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActionOfSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActionOfSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActionOfSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionOfSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActionOfSchema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActionOfSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActionOfSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActionOfSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActionOfSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActionOfSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActionOfSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionOfSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionOfSchema = append(m.ActionOfSchema, ActionOfSchema{})
			if err := m.ActionOfSchema[len(m.ActionOfSchema)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExecutorOfSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExecutorOfSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExecutorOfSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExecutorOfSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExecutorOfSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExecutorOfSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorOfSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExecutorOfSchema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExecutorOfSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExecutorOfSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExecutorOfSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExecutorOfSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExecutorOfSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExecutorOfSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorOfSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorOfSchema = append(m.ExecutorOfSchema, ExecutorOfSchema{})
			if err := m.ExecutorOfSchema[len(m.ExecutorOfSchema)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVirtualActionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVirtualActionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVirtualActionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVirtualActionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVirtualActionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVirtualActionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VirtualAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVirtualActionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVirtualActionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVirtualActionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVirtualActionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVirtualActionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVirtualActionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualAction = append(m.VirtualAction, VirtualAction{})
			if err := m.VirtualAction[len(m.VirtualAction)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVirtualSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVirtualSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVirtualSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVirtualSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVirtualSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVirtualSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VirtualSchema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVirtualSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVirtualSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVirtualSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVirtualSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVirtualSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVirtualSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualSchema = append(m.VirtualSchema, VirtualSchema{})
			if err := m.VirtualSchema[len(m.VirtualSchema)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDisableVirtualSchemaProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDisableVirtualSchemaProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDisableVirtualSchemaProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDisableVirtualSchemaProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDisableVirtualSchemaProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDisableVirtualSchemaProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableVirtualSchemaProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DisableVirtualSchemaProposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDisableVirtualSchemaProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDisableVirtualSchemaProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDisableVirtualSchemaProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDisableVirtualSchemaProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDisableVirtualSchemaProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDisableVirtualSchemaProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableVirtualSchemaProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisableVirtualSchemaProposal = append(m.DisableVirtualSchemaProposal, DisableVirtualSchemaProposal{})
			if err := m.DisableVirtualSchemaProposal[len(m.DisableVirtualSchemaProposal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVirtualSchemaProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVirtualSchemaProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVirtualSchemaProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVirtualSchemaProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVirtualSchemaProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVirtualSchemaProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSchemaProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VirtualSchemaProposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVirtualSchemaProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVirtualSchemaProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVirtualSchemaProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVirtualSchemaProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVirtualSchemaProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVirtualSchemaProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSchemaProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualSchemaProposal = append(m.VirtualSchemaProposal, VirtualSchemaProposal{})
			if err := m.VirtualSchemaProposal[len(m.VirtualSchemaProposal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActiveVirtualSchemaProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActiveVirtualSchemaProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActiveVirtualSchemaProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActiveVirtualSchemaProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActiveVirtualSchemaProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActiveVirtualSchemaProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveVirtualSchemaProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActiveVirtualSchemaProposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActiveVirtualSchemaProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActiveVirtualSchemaProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActiveVirtualSchemaProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActiveVirtualSchemaProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActiveVirtualSchemaProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActiveVirtualSchemaProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveVirtualSchemaProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveVirtualSchemaProposal = append(m.ActiveVirtualSchemaProposal, ActiveVirtualSchemaProposal{})
			if err := m.ActiveVirtualSchemaProposal[len(m.ActiveVirtualSchemaProposal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInactiveVirtualSchemaProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInactiveVirtualSchemaProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInactiveVirtualSchemaProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInactiveVirtualSchemaProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInactiveVirtualSchemaProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInactiveVirtualSchemaProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveVirtualSchemaProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InactiveVirtualSchemaProposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInactiveVirtualSchemaProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInactiveVirtualSchemaProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInactiveVirtualSchemaProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInactiveVirtualSchemaProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInactiveVirtualSchemaProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInactiveVirtualSchemaProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveVirtualSchemaProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InactiveVirtualSchemaProposal = append(m.InactiveVirtualSchemaProposal, InactiveVirtualSchemaProposal{})
			if err := m.InactiveVirtualSchemaProposal[len(m.InactiveVirtualSchemaProposal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActiveDislabeVirtualSchemaProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActiveDislabeVirtualSchemaProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActiveDislabeVirtualSchemaProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActiveDislabeVirtualSchemaProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActiveDislabeVirtualSchemaProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActiveDislabeVirtualSchemaProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveDislabeVirtualSchemaProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActiveDislabeVirtualSchemaProposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActiveDislabeVirtualSchemaProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActiveDislabeVirtualSchemaProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActiveDislabeVirtualSchemaProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActiveDislabeVirtualSchemaProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActiveDislabeVirtualSchemaProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActiveDislabeVirtualSchemaProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveDislabeVirtualSchemaProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveDislabeVirtualSchemaProposal = append(m.ActiveDislabeVirtualSchemaProposal, ActiveDislabeVirtualSchemaProposal{})
			if err := m.ActiveDislabeVirtualSchemaProposal[len(m.ActiveDislabeVirtualSchemaProposal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
