// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nftmngr/virtual_schema.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RegistryStatus int32

const (
	RegistryStatus_ACCEPT RegistryStatus = 0
	RegistryStatus_REJECT RegistryStatus = 1
)

var RegistryStatus_name = map[int32]string{
	0: "ACCEPT",
	1: "REJECT",
}

var RegistryStatus_value = map[string]int32{
	"ACCEPT": 0,
	"REJECT": 1,
}

func (x RegistryStatus) String() string {
	return proto.EnumName(RegistryStatus_name, int32(x))
}

func (RegistryStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1fd45310b3f69052, []int{0}
}

type VirtualSchema struct {
	VirtualNftSchemaCode string                   `protobuf:"bytes,1,opt,name=virtual_nft_schema_code,json=virtualNftSchemaCode,proto3" json:"virtual_nft_schema_code,omitempty"`
	Registry             []*VirtualSchemaRegistry `protobuf:"bytes,2,rep,name=registry,proto3" json:"registry,omitempty"`
}

func (m *VirtualSchema) Reset()         { *m = VirtualSchema{} }
func (m *VirtualSchema) String() string { return proto.CompactTextString(m) }
func (*VirtualSchema) ProtoMessage()    {}
func (*VirtualSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd45310b3f69052, []int{0}
}
func (m *VirtualSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualSchema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualSchema.Merge(m, src)
}
func (m *VirtualSchema) XXX_Size() int {
	return m.Size()
}
func (m *VirtualSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualSchema.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualSchema proto.InternalMessageInfo

func (m *VirtualSchema) GetVirtualNftSchemaCode() string {
	if m != nil {
		return m.VirtualNftSchemaCode
	}
	return ""
}

func (m *VirtualSchema) GetRegistry() []*VirtualSchemaRegistry {
	if m != nil {
		return m.Registry
	}
	return nil
}

type VirtualSchemaRegistry struct {
	NftSchemaCode    string         `protobuf:"bytes,1,opt,name=nft_schema_code,json=nftSchemaCode,proto3" json:"nft_schema_code,omitempty"`
	SharedAttributes []string       `protobuf:"bytes,2,rep,name=shared_attributes,json=sharedAttributes,proto3" json:"shared_attributes,omitempty"`
	Status           RegistryStatus `protobuf:"varint,3,opt,name=status,proto3,enum=thesixnetwork.sixprotocol.nftmngr.RegistryStatus" json:"status,omitempty"`
}

func (m *VirtualSchemaRegistry) Reset()         { *m = VirtualSchemaRegistry{} }
func (m *VirtualSchemaRegistry) String() string { return proto.CompactTextString(m) }
func (*VirtualSchemaRegistry) ProtoMessage()    {}
func (*VirtualSchemaRegistry) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd45310b3f69052, []int{1}
}
func (m *VirtualSchemaRegistry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualSchemaRegistry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualSchemaRegistry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualSchemaRegistry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualSchemaRegistry.Merge(m, src)
}
func (m *VirtualSchemaRegistry) XXX_Size() int {
	return m.Size()
}
func (m *VirtualSchemaRegistry) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualSchemaRegistry.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualSchemaRegistry proto.InternalMessageInfo

func (m *VirtualSchemaRegistry) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *VirtualSchemaRegistry) GetSharedAttributes() []string {
	if m != nil {
		return m.SharedAttributes
	}
	return nil
}

func (m *VirtualSchemaRegistry) GetStatus() RegistryStatus {
	if m != nil {
		return m.Status
	}
	return RegistryStatus_ACCEPT
}

func init() {
	proto.RegisterEnum("thesixnetwork.sixprotocol.nftmngr.RegistryStatus", RegistryStatus_name, RegistryStatus_value)
	proto.RegisterType((*VirtualSchema)(nil), "thesixnetwork.sixprotocol.nftmngr.VirtualSchema")
	proto.RegisterType((*VirtualSchemaRegistry)(nil), "thesixnetwork.sixprotocol.nftmngr.VirtualSchemaRegistry")
}

func init() { proto.RegisterFile("nftmngr/virtual_schema.proto", fileDescriptor_1fd45310b3f69052) }

var fileDescriptor_1fd45310b3f69052 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x4a, 0x02, 0x41,
	0x1c, 0xc7, 0x77, 0x12, 0x24, 0x27, 0x34, 0x5b, 0x8c, 0x24, 0x62, 0x31, 0x0f, 0xb1, 0x14, 0xed,
	0x92, 0x21, 0x74, 0xb5, 0xc5, 0x43, 0x1d, 0x2a, 0x56, 0xe9, 0xd0, 0x45, 0xc6, 0x75, 0x74, 0x87,
	0x74, 0x46, 0x66, 0x7e, 0x5b, 0xeb, 0x5b, 0xf4, 0x00, 0xbd, 0x47, 0xaf, 0xd0, 0xd1, 0x63, 0xc7,
	0x70, 0x5f, 0x24, 0xda, 0x3f, 0xc2, 0x82, 0x50, 0xb7, 0xe1, 0xf7, 0x9d, 0xef, 0xe7, 0xf7, 0x19,
	0x06, 0x1f, 0xf1, 0x31, 0xcc, 0xf8, 0x44, 0xda, 0x2f, 0x4c, 0x42, 0x40, 0xa6, 0x03, 0xe5, 0xf9,
	0x74, 0x46, 0xac, 0xb9, 0x14, 0x20, 0xf4, 0x63, 0xf0, 0xa9, 0x62, 0x21, 0xa7, 0xf0, 0x2a, 0xe4,
	0xb3, 0xa5, 0x58, 0x18, 0xcf, 0x3d, 0x31, 0xb5, 0xd2, 0xde, 0x61, 0x2d, 0x03, 0x10, 0x0f, 0x98,
	0xe0, 0x49, 0xb1, 0xf9, 0x8e, 0x70, 0xf9, 0x31, 0x21, 0xf6, 0x62, 0xa0, 0xde, 0xc6, 0x07, 0xd9,
	0x0a, 0x3e, 0x86, 0x74, 0xcd, 0xc0, 0x13, 0x23, 0x5a, 0x47, 0x0d, 0x64, 0x96, 0xdc, 0x5a, 0x1a,
	0xdf, 0x8d, 0x21, 0xa9, 0x38, 0x62, 0x44, 0xf5, 0x3e, 0xde, 0x96, 0x74, 0xc2, 0x14, 0xc8, 0x45,
	0x7d, 0xab, 0x51, 0x30, 0x77, 0x5a, 0x57, 0xd6, 0x9f, 0x52, 0x56, 0x6e, 0xb5, 0x9b, 0xf6, 0xdd,
	0x35, 0xa9, 0xf9, 0x81, 0xf0, 0xfe, 0xc6, 0x3b, 0xfa, 0x09, 0xde, 0xdd, 0xac, 0x57, 0xe6, 0x39,
	0xaf, 0x33, 0xbc, 0xa7, 0x7c, 0x22, 0xe9, 0x68, 0x40, 0x00, 0x24, 0x1b, 0x06, 0x40, 0x55, 0x2c,
	0x58, 0x72, 0xab, 0x49, 0xd0, 0x59, 0xcf, 0xf5, 0x1b, 0x5c, 0x54, 0x40, 0x20, 0x50, 0xf5, 0x42,
	0x03, 0x99, 0x95, 0xd6, 0xc5, 0x3f, 0x9e, 0x90, 0x19, 0xf5, 0xe2, 0xa2, 0x9b, 0x02, 0x4e, 0x4d,
	0x5c, 0xc9, 0x27, 0x3a, 0xc6, 0xc5, 0x8e, 0xe3, 0x74, 0x1f, 0xfa, 0x55, 0xed, 0xf7, 0xec, 0x76,
	0x6f, 0xbb, 0x4e, 0xbf, 0x8a, 0xae, 0xef, 0x3f, 0x57, 0x06, 0x5a, 0xae, 0x0c, 0xf4, 0xbd, 0x32,
	0xd0, 0x5b, 0x64, 0x68, 0xcb, 0xc8, 0xd0, 0xbe, 0x22, 0x43, 0x7b, 0x6a, 0x4f, 0x18, 0xf8, 0xc1,
	0xd0, 0xf2, 0xc4, 0xcc, 0xce, 0x89, 0xd8, 0x8a, 0x85, 0xe7, 0x99, 0x89, 0x1d, 0xda, 0xd9, 0xd7,
	0xc2, 0x62, 0x4e, 0xd5, 0xb0, 0x18, 0x27, 0x97, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x98, 0x9e,
	0x56, 0x1e, 0x33, 0x02, 0x00, 0x00,
}

func (m *VirtualSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Registry) > 0 {
		for iNdEx := len(m.Registry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Registry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVirtualSchema(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.VirtualNftSchemaCode) > 0 {
		i -= len(m.VirtualNftSchemaCode)
		copy(dAtA[i:], m.VirtualNftSchemaCode)
		i = encodeVarintVirtualSchema(dAtA, i, uint64(len(m.VirtualNftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VirtualSchemaRegistry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualSchemaRegistry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualSchemaRegistry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintVirtualSchema(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SharedAttributes) > 0 {
		for iNdEx := len(m.SharedAttributes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SharedAttributes[iNdEx])
			copy(dAtA[i:], m.SharedAttributes[iNdEx])
			i = encodeVarintVirtualSchema(dAtA, i, uint64(len(m.SharedAttributes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintVirtualSchema(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVirtualSchema(dAtA []byte, offset int, v uint64) int {
	offset -= sovVirtualSchema(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VirtualSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VirtualNftSchemaCode)
	if l > 0 {
		n += 1 + l + sovVirtualSchema(uint64(l))
	}
	if len(m.Registry) > 0 {
		for _, e := range m.Registry {
			l = e.Size()
			n += 1 + l + sovVirtualSchema(uint64(l))
		}
	}
	return n
}

func (m *VirtualSchemaRegistry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovVirtualSchema(uint64(l))
	}
	if len(m.SharedAttributes) > 0 {
		for _, s := range m.SharedAttributes {
			l = len(s)
			n += 1 + l + sovVirtualSchema(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovVirtualSchema(uint64(m.Status))
	}
	return n
}

func sovVirtualSchema(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVirtualSchema(x uint64) (n int) {
	return sovVirtualSchema(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VirtualSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVirtualSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualNftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVirtualSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualNftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVirtualSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registry = append(m.Registry, &VirtualSchemaRegistry{})
			if err := m.Registry[len(m.Registry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVirtualSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVirtualSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualSchemaRegistry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVirtualSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualSchemaRegistry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualSchemaRegistry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVirtualSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedAttributes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVirtualSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharedAttributes = append(m.SharedAttributes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RegistryStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVirtualSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVirtualSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVirtualSchema(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVirtualSchema
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVirtualSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVirtualSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVirtualSchema
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVirtualSchema
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVirtualSchema
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVirtualSchema        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVirtualSchema          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVirtualSchema = fmt.Errorf("proto: unexpected end of group")
)
