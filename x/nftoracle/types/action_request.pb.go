// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nftoracle/action_request.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

var (
	_ = fmt.Errorf
	_ = math.Inf
	_ = time.Kitchen
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ActionParameter struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ActionParameter) Reset()         { *m = ActionParameter{} }
func (m *ActionParameter) String() string { return proto.CompactTextString(m) }
func (*ActionParameter) ProtoMessage()    {}
func (*ActionParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_36b7260720dc8e70, []int{0}
}

func (m *ActionParameter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ActionParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionParameter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ActionParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionParameter.Merge(m, src)
}

func (m *ActionParameter) XXX_Size() int {
	return m.Size()
}

func (m *ActionParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionParameter.DiscardUnknown(m)
}

var xxx_messageInfo_ActionParameter proto.InternalMessageInfo

func (m *ActionParameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ActionParameter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ActionOracleParam struct {
	NftSchemaCode string             `protobuf:"bytes,1,opt,name=nft_schema_code,json=nftSchemaCode,proto3" json:"nft_schema_code,omitempty"`
	TokenId       string             `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Action        string             `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Params        []*ActionParameter `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty"`
	RefId         string             `protobuf:"bytes,5,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	ExpiredAt     time.Time          `protobuf:"bytes,6,opt,name=expired_at,json=expiredAt,proto3,stdtime" json:"expired_at"`
	OnBehalfOf    string             `protobuf:"bytes,7,opt,name=on_behalf_of,json=onBehalfOf,proto3" json:"on_behalf_of,omitempty"`
}

func (m *ActionOracleParam) Reset()         { *m = ActionOracleParam{} }
func (m *ActionOracleParam) String() string { return proto.CompactTextString(m) }
func (*ActionOracleParam) ProtoMessage()    {}
func (*ActionOracleParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_36b7260720dc8e70, []int{1}
}

func (m *ActionOracleParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ActionOracleParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionOracleParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ActionOracleParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionOracleParam.Merge(m, src)
}

func (m *ActionOracleParam) XXX_Size() int {
	return m.Size()
}

func (m *ActionOracleParam) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionOracleParam.DiscardUnknown(m)
}

var xxx_messageInfo_ActionOracleParam proto.InternalMessageInfo

func (m *ActionOracleParam) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *ActionOracleParam) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *ActionOracleParam) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *ActionOracleParam) GetParams() []*ActionParameter {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *ActionOracleParam) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

func (m *ActionOracleParam) GetExpiredAt() time.Time {
	if m != nil {
		return m.ExpiredAt
	}
	return time.Time{}
}

func (m *ActionOracleParam) GetOnBehalfOf() string {
	if m != nil {
		return m.OnBehalfOf
	}
	return ""
}

type ActionOracleRequest struct {
	Id                    uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NftSchemaCode         string             `protobuf:"bytes,2,opt,name=nft_schema_code,json=nftSchemaCode,proto3" json:"nft_schema_code,omitempty"`
	TokenId               string             `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Action                string             `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	Params                []*ActionParameter `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty"`
	Caller                string             `protobuf:"bytes,6,opt,name=caller,proto3" json:"caller,omitempty"`
	RefId                 string             `protobuf:"bytes,7,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	RequiredConfirm       uint64             `protobuf:"varint,8,opt,name=required_confirm,json=requiredConfirm,proto3" json:"required_confirm,omitempty"`
	Status                RequestStatus      `protobuf:"varint,9,opt,name=status,proto3,enum=thesixnetwork.sixprotocol.nftoracle.RequestStatus" json:"status,omitempty"`
	CurrentConfirm        uint64             `protobuf:"varint,10,opt,name=current_confirm,json=currentConfirm,proto3" json:"current_confirm,omitempty"`
	Confirmers            []string           `protobuf:"bytes,11,rep,name=confirmers,proto3" json:"confirmers,omitempty"`
	CreatedAt             time.Time          `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	ValidUntil            time.Time          `protobuf:"bytes,13,opt,name=valid_until,json=validUntil,proto3,stdtime" json:"valid_until"`
	DataHashes            []*DataHash        `protobuf:"bytes,14,rep,name=data_hashes,json=dataHashes,proto3" json:"data_hashes,omitempty"`
	ExpiredHeight         int64              `protobuf:"varint,15,opt,name=expired_height,json=expiredHeight,proto3" json:"expired_height,omitempty"`
	ExecutionErrorMessage string             `protobuf:"bytes,16,opt,name=execution_error_message,json=executionErrorMessage,proto3" json:"execution_error_message,omitempty"`
}

func (m *ActionOracleRequest) Reset()         { *m = ActionOracleRequest{} }
func (m *ActionOracleRequest) String() string { return proto.CompactTextString(m) }
func (*ActionOracleRequest) ProtoMessage()    {}
func (*ActionOracleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_36b7260720dc8e70, []int{2}
}

func (m *ActionOracleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ActionOracleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionOracleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ActionOracleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionOracleRequest.Merge(m, src)
}

func (m *ActionOracleRequest) XXX_Size() int {
	return m.Size()
}

func (m *ActionOracleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionOracleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ActionOracleRequest proto.InternalMessageInfo

func (m *ActionOracleRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ActionOracleRequest) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *ActionOracleRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *ActionOracleRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *ActionOracleRequest) GetParams() []*ActionParameter {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *ActionOracleRequest) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

func (m *ActionOracleRequest) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

func (m *ActionOracleRequest) GetRequiredConfirm() uint64 {
	if m != nil {
		return m.RequiredConfirm
	}
	return 0
}

func (m *ActionOracleRequest) GetStatus() RequestStatus {
	if m != nil {
		return m.Status
	}
	return RequestStatus_PENDING
}

func (m *ActionOracleRequest) GetCurrentConfirm() uint64 {
	if m != nil {
		return m.CurrentConfirm
	}
	return 0
}

func (m *ActionOracleRequest) GetConfirmers() []string {
	if m != nil {
		return m.Confirmers
	}
	return nil
}

func (m *ActionOracleRequest) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *ActionOracleRequest) GetValidUntil() time.Time {
	if m != nil {
		return m.ValidUntil
	}
	return time.Time{}
}

func (m *ActionOracleRequest) GetDataHashes() []*DataHash {
	if m != nil {
		return m.DataHashes
	}
	return nil
}

func (m *ActionOracleRequest) GetExpiredHeight() int64 {
	if m != nil {
		return m.ExpiredHeight
	}
	return 0
}

func (m *ActionOracleRequest) GetExecutionErrorMessage() string {
	if m != nil {
		return m.ExecutionErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*ActionParameter)(nil), "thesixnetwork.sixprotocol.nftoracle.ActionParameter")
	proto.RegisterType((*ActionOracleParam)(nil), "thesixnetwork.sixprotocol.nftoracle.ActionOracleParam")
	proto.RegisterType((*ActionOracleRequest)(nil), "thesixnetwork.sixprotocol.nftoracle.ActionOracleRequest")
}

func init() { proto.RegisterFile("nftoracle/action_request.proto", fileDescriptor_36b7260720dc8e70) }

var fileDescriptor_36b7260720dc8e70 = []byte{
	// 676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcf, 0x52, 0xd4, 0x4e,
	0x10, 0xc7, 0x37, 0xfb, 0x0f, 0xb6, 0x17, 0x76, 0xf9, 0xcd, 0x8f, 0x3f, 0x91, 0x43, 0xd8, 0xc2,
	0x52, 0xd7, 0x03, 0x49, 0xd5, 0x6a, 0xe9, 0xc1, 0x13, 0x20, 0x55, 0x60, 0xa9, 0x68, 0xd0, 0x8b,
	0x97, 0xd4, 0x6c, 0xd2, 0xd9, 0xa4, 0x48, 0x32, 0xeb, 0xcc, 0x04, 0xd7, 0xb7, 0xe0, 0x79, 0x7c,
	0x02, 0x8e, 0x1c, 0x3d, 0xa9, 0x05, 0x2f, 0xe1, 0xd1, 0xca, 0x24, 0x81, 0xc5, 0x92, 0x12, 0xaa,
	0xbc, 0x4d, 0x7f, 0x3b, 0xfd, 0xed, 0x9e, 0xcf, 0x4c, 0x06, 0x8c, 0xc4, 0x97, 0x8c, 0x53, 0x37,
	0x42, 0x8b, 0xba, 0x32, 0x64, 0x89, 0xc3, 0xf1, 0x63, 0x8a, 0x42, 0x9a, 0x63, 0xce, 0x24, 0x23,
	0x77, 0x65, 0x80, 0x22, 0x9c, 0x24, 0x28, 0x3f, 0x31, 0x7e, 0x68, 0x8a, 0x70, 0xa2, 0x74, 0x97,
	0x45, 0xe6, 0x45, 0xe5, 0xea, 0xca, 0xa5, 0x09, 0x1b, 0x63, 0x22, 0x90, 0xe6, 0xd5, 0xd3, 0x89,
	0x2b, 0xb6, 0xab, 0x8b, 0x23, 0x36, 0x62, 0x6a, 0x69, 0x65, 0xab, 0x42, 0x5d, 0x1b, 0x31, 0x36,
	0x8a, 0xd0, 0x52, 0xd1, 0x30, 0xf5, 0x2d, 0x19, 0xc6, 0x28, 0x24, 0x8d, 0xc7, 0xf9, 0x07, 0xeb,
	0xcf, 0xa0, 0xbb, 0xa9, 0xa6, 0x7c, 0x43, 0x39, 0x8d, 0x51, 0x22, 0x27, 0x04, 0xea, 0x09, 0x8d,
	0x51, 0xd7, 0x7a, 0x5a, 0xbf, 0x65, 0xab, 0x35, 0x59, 0x84, 0xc6, 0x11, 0x8d, 0x52, 0xd4, 0xab,
	0x4a, 0xcc, 0x83, 0xf5, 0x2f, 0x55, 0xf8, 0x2f, 0xaf, 0xde, 0x57, 0x23, 0x29, 0x0f, 0x72, 0x1f,
	0xba, 0x89, 0x2f, 0x1d, 0xe1, 0x06, 0x18, 0x53, 0xc7, 0x65, 0x5e, 0x69, 0x35, 0x9f, 0xf8, 0xf2,
	0x40, 0xa9, 0xdb, 0xcc, 0x43, 0x72, 0x07, 0x66, 0x25, 0x3b, 0xc4, 0xc4, 0x09, 0xbd, 0xc2, 0x76,
	0x46, 0xc5, 0x7b, 0x1e, 0x59, 0x86, 0x66, 0xce, 0x4e, 0xaf, 0xa9, 0x44, 0x11, 0x91, 0x97, 0xd0,
	0x1c, 0x67, 0x3d, 0x84, 0x5e, 0xef, 0xd5, 0xfa, 0xed, 0xc1, 0x63, 0xf3, 0x06, 0x30, 0xcd, 0xdf,
	0x36, 0x68, 0x17, 0x1e, 0x64, 0x09, 0x9a, 0x1c, 0xfd, 0xac, 0x7d, 0x23, 0xdf, 0x15, 0x47, 0x7f,
	0xcf, 0x23, 0xdb, 0x00, 0x38, 0x19, 0x87, 0x1c, 0x3d, 0x87, 0x4a, 0xbd, 0xd9, 0xd3, 0xfa, 0xed,
	0xc1, 0xaa, 0x99, 0x83, 0x34, 0x4b, 0x90, 0xe6, 0xbb, 0x12, 0xe4, 0xd6, 0xec, 0xc9, 0xb7, 0xb5,
	0xca, 0xf1, 0xf7, 0x35, 0xcd, 0x6e, 0x15, 0x75, 0x9b, 0x92, 0xf4, 0x60, 0x8e, 0x25, 0xce, 0x10,
	0x03, 0x1a, 0xf9, 0x0e, 0xf3, 0xf5, 0x19, 0xd5, 0x01, 0x58, 0xb2, 0xa5, 0xa4, 0x7d, 0x7f, 0xfd,
	0x67, 0x03, 0xfe, 0x9f, 0x86, 0x67, 0xe7, 0xc7, 0x49, 0x3a, 0x50, 0x0d, 0x3d, 0x45, 0xac, 0x6e,
	0x57, 0x43, 0xef, 0x4f, 0x38, 0xab, 0x7f, 0xc3, 0x59, 0xbb, 0x0e, 0x67, 0xfd, 0x1a, 0x9c, 0x8d,
	0x7f, 0x80, 0x73, 0x19, 0x9a, 0x2e, 0x8d, 0x22, 0xe4, 0x8a, 0x59, 0xcb, 0x2e, 0xa2, 0x29, 0xcc,
	0x33, 0xd3, 0x98, 0x1f, 0xc2, 0x42, 0x76, 0x83, 0x15, 0x67, 0x97, 0x25, 0x7e, 0xc8, 0x63, 0x7d,
	0x56, 0xed, 0xba, 0x5b, 0xea, 0xdb, 0xb9, 0x4c, 0x5e, 0x40, 0x53, 0x48, 0x2a, 0x53, 0xa1, 0xb7,
	0x7a, 0x5a, 0xbf, 0x33, 0x18, 0xdc, 0x68, 0xce, 0x02, 0xe8, 0x81, 0xaa, 0xb4, 0x0b, 0x07, 0xf2,
	0x00, 0xba, 0x6e, 0xca, 0x39, 0x26, 0xf2, 0xa2, 0x2b, 0xa8, 0xae, 0x9d, 0x42, 0x2e, 0x9b, 0x1a,
	0x00, 0xc5, 0x07, 0xc8, 0x85, 0xde, 0xee, 0xd5, 0xb2, 0xf3, 0xbb, 0x54, 0xb2, 0x6b, 0xe2, 0x72,
	0xa4, 0x32, 0xbf, 0x26, 0x73, 0xb7, 0xb9, 0x26, 0x45, 0xdd, 0xa6, 0x24, 0x3b, 0xd0, 0x3e, 0xa2,
	0x51, 0xe8, 0x39, 0x69, 0x22, 0xc3, 0x48, 0x9f, 0xbf, 0x85, 0x0b, 0xa8, 0xc2, 0xf7, 0x59, 0x1d,
	0x79, 0x0d, 0x6d, 0x8f, 0x4a, 0xea, 0x04, 0x54, 0x04, 0x28, 0xf4, 0x8e, 0x3a, 0xcd, 0x8d, 0x1b,
	0x51, 0x7a, 0x4e, 0x25, 0xdd, 0xa5, 0x22, 0xb0, 0xc1, 0x2b, 0x56, 0x28, 0xc8, 0x3d, 0xe8, 0x94,
	0xbf, 0x40, 0x80, 0xe1, 0x28, 0x90, 0x7a, 0xb7, 0xa7, 0xf5, 0x6b, 0xf6, 0x7c, 0xa1, 0xee, 0x2a,
	0x91, 0x3c, 0x81, 0x15, 0x9c, 0xa0, 0x9b, 0xaa, 0x57, 0x0e, 0x39, 0x67, 0xdc, 0x89, 0x51, 0x08,
	0x3a, 0x42, 0x7d, 0x41, 0x1d, 0xf5, 0xd2, 0x45, 0x7a, 0x27, 0xcb, 0xbe, 0xca, 0x93, 0x5b, 0x6f,
	0x4f, 0xce, 0x0c, 0xed, 0xf4, 0xcc, 0xd0, 0x7e, 0x9c, 0x19, 0xda, 0xf1, 0xb9, 0x51, 0x39, 0x3d,
	0x37, 0x2a, 0x5f, 0xcf, 0x8d, 0xca, 0x87, 0xa7, 0xa3, 0x50, 0x06, 0xe9, 0xd0, 0x74, 0x59, 0x6c,
	0x5d, 0x99, 0xde, 0x12, 0xe1, 0x64, 0xa3, 0x1c, 0xdf, 0x9a, 0x58, 0x97, 0xcf, 0xa0, 0xfc, 0x3c,
	0x46, 0x31, 0x6c, 0xaa, 0xdc, 0xa3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xfe, 0x70, 0x45,
	0x7e, 0x05, 0x00, 0x00,
}

func (m *ActionParameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionParameter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionParameter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActionOracleParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionOracleParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionOracleParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OnBehalfOf) > 0 {
		i -= len(m.OnBehalfOf)
		copy(dAtA[i:], m.OnBehalfOf)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.OnBehalfOf)))
		i--
		dAtA[i] = 0x3a
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpiredAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpiredAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintActionRequest(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if len(m.RefId) > 0 {
		i -= len(m.RefId)
		copy(dAtA[i:], m.RefId)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.RefId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Params) > 0 {
		for iNdEx := len(m.Params) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Params[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintActionRequest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActionOracleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionOracleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionOracleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecutionErrorMessage) > 0 {
		i -= len(m.ExecutionErrorMessage)
		copy(dAtA[i:], m.ExecutionErrorMessage)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.ExecutionErrorMessage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ExpiredHeight != 0 {
		i = encodeVarintActionRequest(dAtA, i, uint64(m.ExpiredHeight))
		i--
		dAtA[i] = 0x78
	}
	if len(m.DataHashes) > 0 {
		for iNdEx := len(m.DataHashes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataHashes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintActionRequest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ValidUntil, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ValidUntil):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintActionRequest(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x6a
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintActionRequest(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x62
	if len(m.Confirmers) > 0 {
		for iNdEx := len(m.Confirmers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Confirmers[iNdEx])
			copy(dAtA[i:], m.Confirmers[iNdEx])
			i = encodeVarintActionRequest(dAtA, i, uint64(len(m.Confirmers[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.CurrentConfirm != 0 {
		i = encodeVarintActionRequest(dAtA, i, uint64(m.CurrentConfirm))
		i--
		dAtA[i] = 0x50
	}
	if m.Status != 0 {
		i = encodeVarintActionRequest(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.RequiredConfirm != 0 {
		i = encodeVarintActionRequest(dAtA, i, uint64(m.RequiredConfirm))
		i--
		dAtA[i] = 0x40
	}
	if len(m.RefId) > 0 {
		i -= len(m.RefId)
		copy(dAtA[i:], m.RefId)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.RefId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Params) > 0 {
		for iNdEx := len(m.Params) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Params[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintActionRequest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintActionRequest(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintActionRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovActionRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *ActionParameter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovActionRequest(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovActionRequest(uint64(l))
	}
	return n
}

func (m *ActionOracleParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovActionRequest(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovActionRequest(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovActionRequest(uint64(l))
	}
	if len(m.Params) > 0 {
		for _, e := range m.Params {
			l = e.Size()
			n += 1 + l + sovActionRequest(uint64(l))
		}
	}
	l = len(m.RefId)
	if l > 0 {
		n += 1 + l + sovActionRequest(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpiredAt)
	n += 1 + l + sovActionRequest(uint64(l))
	l = len(m.OnBehalfOf)
	if l > 0 {
		n += 1 + l + sovActionRequest(uint64(l))
	}
	return n
}

func (m *ActionOracleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovActionRequest(uint64(m.Id))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovActionRequest(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovActionRequest(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovActionRequest(uint64(l))
	}
	if len(m.Params) > 0 {
		for _, e := range m.Params {
			l = e.Size()
			n += 1 + l + sovActionRequest(uint64(l))
		}
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovActionRequest(uint64(l))
	}
	l = len(m.RefId)
	if l > 0 {
		n += 1 + l + sovActionRequest(uint64(l))
	}
	if m.RequiredConfirm != 0 {
		n += 1 + sovActionRequest(uint64(m.RequiredConfirm))
	}
	if m.Status != 0 {
		n += 1 + sovActionRequest(uint64(m.Status))
	}
	if m.CurrentConfirm != 0 {
		n += 1 + sovActionRequest(uint64(m.CurrentConfirm))
	}
	if len(m.Confirmers) > 0 {
		for _, s := range m.Confirmers {
			l = len(s)
			n += 1 + l + sovActionRequest(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovActionRequest(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ValidUntil)
	n += 1 + l + sovActionRequest(uint64(l))
	if len(m.DataHashes) > 0 {
		for _, e := range m.DataHashes {
			l = e.Size()
			n += 1 + l + sovActionRequest(uint64(l))
		}
	}
	if m.ExpiredHeight != 0 {
		n += 1 + sovActionRequest(uint64(m.ExpiredHeight))
	}
	l = len(m.ExecutionErrorMessage)
	if l > 0 {
		n += 2 + l + sovActionRequest(uint64(l))
	}
	return n
}

func sovActionRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozActionRequest(x uint64) (n int) {
	return sovActionRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *ActionParameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActionRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionParameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionParameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActionRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActionRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ActionOracleParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActionRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionOracleParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionOracleParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, &ActionParameter{})
			if err := m.Params[len(m.Params)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpiredAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnBehalfOf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnBehalfOf = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActionRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActionRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ActionOracleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActionRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionOracleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionOracleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, &ActionParameter{})
			if err := m.Params[len(m.Params)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredConfirm", wireType)
			}
			m.RequiredConfirm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredConfirm |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentConfirm", wireType)
			}
			m.CurrentConfirm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentConfirm |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirmers = append(m.Confirmers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ValidUntil, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHashes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHashes = append(m.DataHashes, &DataHash{})
			if err := m.DataHashes[len(m.DataHashes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredHeight", wireType)
			}
			m.ExpiredHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActionRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActionRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipActionRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActionRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActionRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActionRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActionRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActionRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActionRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActionRequest = fmt.Errorf("proto: unexpected end of group")
)
