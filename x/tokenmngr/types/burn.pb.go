// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tokenmngr/burn.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Burn struct {
	Id      uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator string     `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount  types.Coin `protobuf:"bytes,3,opt,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
}

func (m *Burn) Reset()         { *m = Burn{} }
func (m *Burn) String() string { return proto.CompactTextString(m) }
func (*Burn) ProtoMessage()    {}
func (*Burn) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b4d0bda0c6c58ac, []int{0}
}
func (m *Burn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Burn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Burn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Burn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Burn.Merge(m, src)
}
func (m *Burn) XXX_Size() int {
	return m.Size()
}
func (m *Burn) XXX_DiscardUnknown() {
	xxx_messageInfo_Burn.DiscardUnknown(m)
}

var xxx_messageInfo_Burn proto.InternalMessageInfo

func (m *Burn) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Burn) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Burn) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type BurnV202 struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Token   string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Amount  uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *BurnV202) Reset()         { *m = BurnV202{} }
func (m *BurnV202) String() string { return proto.CompactTextString(m) }
func (*BurnV202) ProtoMessage()    {}
func (*BurnV202) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b4d0bda0c6c58ac, []int{1}
}
func (m *BurnV202) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurnV202) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurnV202.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BurnV202) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnV202.Merge(m, src)
}
func (m *BurnV202) XXX_Size() int {
	return m.Size()
}
func (m *BurnV202) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnV202.DiscardUnknown(m)
}

var xxx_messageInfo_BurnV202 proto.InternalMessageInfo

func (m *BurnV202) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BurnV202) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *BurnV202) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *BurnV202) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*Burn)(nil), "thesixnetwork.sixprotocol.tokenmngr.Burn")
	proto.RegisterType((*BurnV202)(nil), "thesixnetwork.sixprotocol.tokenmngr.BurnV202")
}

func init() { proto.RegisterFile("tokenmngr/burn.proto", fileDescriptor_9b4d0bda0c6c58ac) }

var fileDescriptor_9b4d0bda0c6c58ac = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xe3, 0xfe, 0xfd, 0x0b, 0x35, 0x12, 0x43, 0x54, 0xa1, 0xd0, 0xc1, 0xad, 0xca, 0x40,
	0x97, 0xda, 0xb4, 0x0c, 0xec, 0xe5, 0x09, 0xc8, 0xc0, 0xc0, 0x16, 0xa7, 0x56, 0x6a, 0x95, 0xf8,
	0x56, 0xb6, 0x03, 0xe1, 0x2d, 0x18, 0x78, 0x0a, 0x9e, 0xa4, 0x63, 0x47, 0x26, 0x40, 0xc9, 0x8b,
	0xa0, 0x38, 0x69, 0x81, 0x91, 0xc9, 0xbe, 0xd7, 0xbe, 0xe7, 0x7c, 0x3e, 0xc6, 0x3d, 0x0b, 0x2b,
	0xa1, 0x52, 0x95, 0x68, 0xc6, 0x33, 0xad, 0xe8, 0x5a, 0x83, 0x05, 0xff, 0xcc, 0x2e, 0x85, 0x91,
	0xb9, 0x12, 0xf6, 0x11, 0xf4, 0x8a, 0x1a, 0x99, 0xbb, 0x7e, 0x0c, 0xf7, 0x74, 0x7f, 0xbf, 0xdf,
	0x4b, 0x20, 0x01, 0xd7, 0x67, 0xd5, 0xae, 0x1e, 0xed, 0x93, 0x18, 0x4c, 0x0a, 0x86, 0xf1, 0xc8,
	0x08, 0xf6, 0x30, 0xe5, 0xc2, 0x46, 0x53, 0x16, 0x83, 0x6c, 0xa4, 0x47, 0x2f, 0x08, 0xb7, 0xe7,
	0x99, 0x56, 0xfe, 0x31, 0x6e, 0xc9, 0x45, 0x80, 0x86, 0x68, 0xdc, 0x0e, 0x5b, 0x72, 0xe1, 0x07,
	0xf8, 0x20, 0xd6, 0x22, 0xb2, 0xa0, 0x83, 0xd6, 0x10, 0x8d, 0xbb, 0xe1, 0xae, 0xf4, 0x39, 0xee,
	0x44, 0x29, 0x64, 0xca, 0x06, 0xff, 0x86, 0x68, 0x7c, 0x34, 0x3b, 0xa5, 0xb5, 0x07, 0xad, 0x3c,
	0x68, 0xe3, 0x41, 0xaf, 0x41, 0xaa, 0x39, 0xdb, 0xbc, 0x0f, 0xbc, 0xd7, 0x8f, 0xc1, 0x79, 0x22,
	0xed, 0x32, 0xe3, 0x34, 0x86, 0x94, 0x35, 0x40, 0xf5, 0x32, 0x31, 0x8b, 0x15, 0xb3, 0x4f, 0x6b,
	0x61, 0xdc, 0x40, 0xd8, 0x28, 0x8f, 0x38, 0x3e, 0xac, 0xa8, 0x6e, 0x67, 0x17, 0xb3, 0x3f, 0x90,
	0xf5, 0xf0, 0x7f, 0x97, 0x87, 0x03, 0xeb, 0x86, 0x75, 0xe1, 0x9f, 0xec, 0x79, 0xdb, 0x4e, 0xa3,
	0xa9, 0xe6, 0x37, 0x9b, 0x82, 0xa0, 0x6d, 0x41, 0xd0, 0x67, 0x41, 0xd0, 0x73, 0x49, 0xbc, 0x6d,
	0x49, 0xbc, 0xb7, 0x92, 0x78, 0x77, 0x57, 0x3f, 0x70, 0x7f, 0x45, 0xcf, 0x8c, 0xcc, 0x27, 0xbb,
	0xec, 0x59, 0xce, 0xbe, 0x7f, 0xcb, 0xbd, 0x81, 0x77, 0xdc, 0xd9, 0xe5, 0x57, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x39, 0x11, 0x6a, 0xf6, 0xc7, 0x01, 0x00, 0x00,
}

func (m *Burn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Burn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Burn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBurn(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintBurn(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBurn(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BurnV202) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurnV202) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BurnV202) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintBurn(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBurn(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintBurn(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBurn(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBurn(dAtA []byte, offset int, v uint64) int {
	offset -= sovBurn(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Burn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBurn(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovBurn(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovBurn(uint64(l))
	return n
}

func (m *BurnV202) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBurn(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovBurn(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBurn(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovBurn(uint64(m.Amount))
	}
	return n
}

func sovBurn(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBurn(x uint64) (n int) {
	return sovBurn(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Burn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBurn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Burn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Burn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBurn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBurn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBurn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBurn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBurn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBurn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBurn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBurn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBurn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BurnV202) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBurn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurnV202: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurnV202: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBurn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBurn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBurn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBurn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBurn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBurn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBurn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBurn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBurn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBurn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBurn(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBurn
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBurn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBurn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBurn
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBurn
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBurn
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBurn        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBurn          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBurn = fmt.Errorf("proto: unexpected end of group")
)
