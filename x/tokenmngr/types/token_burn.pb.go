// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tokenmngr/v2/token_burn.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TokenBurn struct {
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
}

func (m *TokenBurn) Reset()         { *m = TokenBurn{} }
func (m *TokenBurn) String() string { return proto.CompactTextString(m) }
func (*TokenBurn) ProtoMessage()    {}
func (*TokenBurn) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ab0ea7ec05ef479, []int{0}
}
func (m *TokenBurn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenBurn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenBurn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenBurn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenBurn.Merge(m, src)
}
func (m *TokenBurn) XXX_Size() int {
	return m.Size()
}
func (m *TokenBurn) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenBurn.DiscardUnknown(m)
}

var xxx_messageInfo_TokenBurn proto.InternalMessageInfo

func (m *TokenBurn) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*TokenBurn)(nil), "thesixnetwork.sixprotocol.tokenmngr.v2.TokenBurn")
}

func init() { proto.RegisterFile("tokenmngr/v2/token_burn.proto", fileDescriptor_1ab0ea7ec05ef479) }

var fileDescriptor_1ab0ea7ec05ef479 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xbb, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0xe3, 0xa5, 0x12, 0x61, 0xab, 0x18, 0xa0, 0x12, 0x2e, 0x62, 0x00, 0x96, 0x9e, 0xa3,
	0x86, 0x81, 0x3d, 0x3c, 0x01, 0x88, 0x89, 0x05, 0xc5, 0xc1, 0x4a, 0xad, 0x10, 0x9f, 0xca, 0x76,
	0x42, 0x78, 0x0b, 0x9e, 0x83, 0x27, 0xe9, 0xd8, 0x91, 0x09, 0x50, 0xf2, 0x22, 0x28, 0x8e, 0xb9,
	0x74, 0xf2, 0xe5, 0xd7, 0xf7, 0x1d, 0xfd, 0x27, 0x3e, 0x76, 0x54, 0x4a, 0x5d, 0xe9, 0xc2, 0x60,
	0x93, 0xa0, 0x7f, 0x3c, 0x88, 0xda, 0x68, 0x58, 0x1b, 0x72, 0x34, 0x3d, 0x73, 0x2b, 0x69, 0x55,
	0xab, 0xa5, 0x7b, 0x26, 0x53, 0x82, 0x55, 0xad, 0xff, 0xcf, 0xe9, 0x09, 0x7e, 0x41, 0x68, 0x92,
	0xd9, 0x41, 0x41, 0x05, 0xf9, 0x08, 0x87, 0xdb, 0x48, 0xcf, 0x78, 0x4e, 0xb6, 0x22, 0x8b, 0x22,
	0xb3, 0x12, 0x9b, 0xa5, 0x90, 0x2e, 0x5b, 0x62, 0x4e, 0x2a, 0xd8, 0x4f, 0x29, 0xde, 0xbb, 0x1b,
	0x2c, 0x69, 0x6d, 0xf4, 0x54, 0xc4, 0x93, 0xac, 0xa2, 0x5a, 0xbb, 0x43, 0x76, 0xc2, 0x2e, 0xf6,
	0x93, 0x23, 0x18, 0x69, 0x18, 0x68, 0x08, 0x34, 0x5c, 0x93, 0xd2, 0x29, 0x6e, 0x3e, 0xe6, 0xd1,
	0xdb, 0xe7, 0xfc, 0xbc, 0x50, 0x6e, 0x55, 0x0b, 0xc8, 0xa9, 0xc2, 0x30, 0x6a, 0x3c, 0x16, 0xf6,
	0xb1, 0x44, 0xf7, 0xb2, 0x96, 0xd6, 0x03, 0xb7, 0xc1, 0x9c, 0xde, 0x6c, 0x3a, 0xce, 0xb6, 0x1d,
	0x67, 0x5f, 0x1d, 0x67, 0xaf, 0x3d, 0x8f, 0xb6, 0x3d, 0x8f, 0xde, 0x7b, 0x1e, 0xdd, 0x5f, 0xfd,
	0x53, 0xed, 0x74, 0x46, 0xab, 0xda, 0xc5, 0x4f, 0x69, 0x6c, 0xf1, 0x6f, 0x5f, 0xde, 0x2f, 0x26,
	0x3e, 0xbb, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x26, 0xd5, 0xa4, 0x49, 0x01, 0x00, 0x00,
}

func (m *TokenBurn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenBurn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenBurn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTokenBurn(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTokenBurn(dAtA []byte, offset int, v uint64) int {
	offset -= sovTokenBurn(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenBurn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTokenBurn(uint64(l))
	return n
}

func sovTokenBurn(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTokenBurn(x uint64) (n int) {
	return sovTokenBurn(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenBurn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenBurn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenBurn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenBurn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenBurn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokenBurn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTokenBurn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenBurn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokenBurn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokenBurn(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokenBurn
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenBurn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenBurn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTokenBurn
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTokenBurn
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTokenBurn
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTokenBurn        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokenBurn          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTokenBurn = fmt.Errorf("proto: unexpected end of group")
)
